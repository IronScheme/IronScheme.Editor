#pragma warning disable 3001,3002,3003,3004,3005,3006,3007,3008,3009
// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using Xacc.Build;
using Xacc.CodeModel;
using Xacc.ComponentModel;
using Xacc.Languages.CSLex;
using Xacc.Languages.gppg;
using System.Collections;
using System.Reflection;

namespace Xacc.Languages.CSharp
{
public enum Tokens {IGNORE = -1,error=127,EOF=128,RANK_SPECIFIER=129,IDENTIFIER=130,INTEGER_LITERAL=131,REAL_LITERAL=132,CHARACTER_LITERAL=133,STRING_LITERAL=134,MLSTRING_LITERAL=135,ABSTRACT=136,AS=137,BASE=138,BOOL=139,BREAK=140,BYTE=141,CASE=142,CATCH=143,CHAR=144,CHECKED=145,CLASS=146,CONST=147,CONTINUE=148,DECIMAL=149,DEFAULT=150,DELEGATE=151,DO=152,DOUBLE=153,ELSE=154,ENUM=155,EVENT=156,EXPLICIT=157,EXTERN=158,FALSE=159,FINALLY=160,FIXED=161,FLOAT=162,FOR=163,FOREACH=164,GOTO=165,IF=166,IMPLICIT=167,IN=168,INT=169,INTERFACE=170,INTERNAL=171,IS=172,LOCK=173,LONG=174,NAMESPACE=175,NEW=176,NULL_LITERAL=177,OBJECT=178,OPERATOR=179,OUT=180,OVERRIDE=181,PARAMS=182,PRIVATE=183,PROTECTED=184,PUBLIC=185,READONLY=186,REF=187,RETURN=188,SBYTE=189,SEALED=190,SHORT=191,SIZEOF=192,STACKALLOC=193,STATIC=194,KW_STRING=195,STRUCT=196,SWITCH=197,THIS=198,THROW=199,TRUE=200,TRY=201,TYPEOF=202,UINT=203,ULONG=204,UNCHECKED=205,UNSAFE=206,USHORT=207,USING=208,VIRTUAL=209,VOID=210,VOLATILE=211,WHILE=212,WHERE=213,ARGLIST=214,VAR=215,ADD=216,REMOVE=217,SELECT=218,INTO=219,ORDERBY=220,FROM=221,LET=222,JOIN=223,EQUALS=224,ASCENDING=225,DESCENDING=226,GROUP=227,ON=228,BY=229,PPSTART=230,PPDEFINE=231,PPIF=232,PPELSE=233,PPENDIF=234,PPREGION=235,PPENDREGION=236,PPID=237,PPELIF=238,GET=239,SET=240,PLUSEQ=241,MINUSEQ=242,STAREQ=243,DIVEQ=244,MODEQ=245,QQ=246,GTGTEQ=247,GTGT=248,XOREQ=249,ANDEQ=250,OREQ=251,LTLT=252,LTLTEQ=253,EQEQ=254,NOTEQ=255,LEQ=256,GEQ=257,ANDAND=258,OROR=259,PLUSPLUS=260,MINUSMINUS=261,ARROW=262,LAMBDA=263,IFREDUCE=264,SHIFT=265,REDUCE=266};

public abstract class LexerBase<T> : Xacc.Languages.CSLex.Language<T>.LexerBase where T : struct, Xacc.ComponentModel.IToken
{
public const int error=127;
public const int EOF=128;
public const int RANK_SPECIFIER=129;
public const int IDENTIFIER=130;
public const int INTEGER_LITERAL=131;
public const int REAL_LITERAL=132;
public const int CHARACTER_LITERAL=133;
public const int STRING_LITERAL=134;
public const int MLSTRING_LITERAL=135;
public const int ABSTRACT=136;
public const int AS=137;
public const int BASE=138;
public const int BOOL=139;
public const int BREAK=140;
public const int BYTE=141;
public const int CASE=142;
public const int CATCH=143;
public const int CHAR=144;
public const int CHECKED=145;
public const int CLASS=146;
public const int CONST=147;
public const int CONTINUE=148;
public const int DECIMAL=149;
public const int DEFAULT=150;
public const int DELEGATE=151;
public const int DO=152;
public const int DOUBLE=153;
public const int ELSE=154;
public const int ENUM=155;
public const int EVENT=156;
public const int EXPLICIT=157;
public const int EXTERN=158;
public const int FALSE=159;
public const int FINALLY=160;
public const int FIXED=161;
public const int FLOAT=162;
public const int FOR=163;
public const int FOREACH=164;
public const int GOTO=165;
public const int IF=166;
public const int IMPLICIT=167;
public const int IN=168;
public const int INT=169;
public const int INTERFACE=170;
public const int INTERNAL=171;
public const int IS=172;
public const int LOCK=173;
public const int LONG=174;
public const int NAMESPACE=175;
public const int NEW=176;
public const int NULL_LITERAL=177;
public const int OBJECT=178;
public const int OPERATOR=179;
public const int OUT=180;
public const int OVERRIDE=181;
public const int PARAMS=182;
public const int PRIVATE=183;
public const int PROTECTED=184;
public const int PUBLIC=185;
public const int READONLY=186;
public const int REF=187;
public const int RETURN=188;
public const int SBYTE=189;
public const int SEALED=190;
public const int SHORT=191;
public const int SIZEOF=192;
public const int STACKALLOC=193;
public const int STATIC=194;
public const int KW_STRING=195;
public const int STRUCT=196;
public const int SWITCH=197;
public const int THIS=198;
public const int THROW=199;
public const int TRUE=200;
public const int TRY=201;
public const int TYPEOF=202;
public const int UINT=203;
public const int ULONG=204;
public const int UNCHECKED=205;
public const int UNSAFE=206;
public const int USHORT=207;
public const int USING=208;
public const int VIRTUAL=209;
public const int VOID=210;
public const int VOLATILE=211;
public const int WHILE=212;
public const int WHERE=213;
public const int ARGLIST=214;
public const int VAR=215;
public const int ADD=216;
public const int REMOVE=217;
public const int SELECT=218;
public const int INTO=219;
public const int ORDERBY=220;
public const int FROM=221;
public const int LET=222;
public const int JOIN=223;
public const int EQUALS=224;
public const int ASCENDING=225;
public const int DESCENDING=226;
public const int GROUP=227;
public const int ON=228;
public const int BY=229;
public const int PPSTART=230;
public const int PPDEFINE=231;
public const int PPIF=232;
public const int PPELSE=233;
public const int PPENDIF=234;
public const int PPREGION=235;
public const int PPENDREGION=236;
public const int PPID=237;
public const int PPELIF=238;
public const int GET=239;
public const int SET=240;
public const int PLUSEQ=241;
public const int MINUSEQ=242;
public const int STAREQ=243;
public const int DIVEQ=244;
public const int MODEQ=245;
public const int QQ=246;
public const int GTGTEQ=247;
public const int GTGT=248;
public const int XOREQ=249;
public const int ANDEQ=250;
public const int OREQ=251;
public const int LTLT=252;
public const int LTLTEQ=253;
public const int EQEQ=254;
public const int NOTEQ=255;
public const int LEQ=256;
public const int GEQ=257;
public const int ANDAND=258;
public const int OROR=259;
public const int PLUSPLUS=260;
public const int MINUSMINUS=261;
public const int ARROW=262;
public const int LAMBDA=263;
public const int IFREDUCE=264;
public const int SHIFT=265;
public const int REDUCE=266;
}
public struct ValueType : Xacc.ComponentModel.IToken
#line 74 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{
  public ArrayList            list        {get {return value as ArrayList; } set {this.value = value;}}
  public CodeNamespace        ns          {get {return value as CodeNamespace; } set {this.value = value;}}
  public CodeElementList      elemlist    {get {return value as CodeElementList; } set {this.value = value;}}
  public CodeElement          elem        {get {return value as CodeElement; } set {this.value = value;}}
  public CodeTypeRef          typeref     {get {return value as CodeTypeRef; } set {this.value = value;}}
  public Object               primval     {get {return value; } set {this.value = value;}}
  public ParameterAttributes  paramattr   {get {return (ParameterAttributes)value; } set {this.value = value;}}
  
#if DEBUG
  public object Value { get { return value; } }
#endif


#line default
internal int __type;
internal TokenClass __class;
Location __loc;
object value;
public Location Location {get {return __loc;} set {__loc = value;} }
public int Type {get {return __type;} set {__type = value;}}
public TokenClass Class {get {return __class;} set {__class = value;}}
public string text {get {return (string)value;} set {this.value = value;}}
public string Text {get {return (string)value;} set {this.value = value;}}
public int Length {get {return Text.Length;}}

public static implicit operator ValueType(Xacc.Languages.CSLex.Yytoken y)
{
  ValueType t = new ValueType();
  t.__type = -1;
  t.__class = y.Class;
  return t;
}

public static readonly ValueType EOF = new ValueType();
}
#line default
public partial class Parser: ShiftReduceParser<ValueType>
{
#line 7 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"


public override string[] Extensions {get {return new string[]{"cs"}; }}
public override string Name {get {return "C#"; }}
protected override LexerBase GetLexer() { return new CSharpLexer(); } 

[Serializable]
class TypeRef : CodeTypeRef
{
  public TypeRef(string t) : base(t)
  {
  }
  
  public TypeRef(string t, bool isarr) : base(t, isarr)
  {
  }

  public TypeRef(Type t) : base(t)
  {
  }
  
  public TypeRef(CodeTypeRef r, bool isarray) : base(r, isarray)
  {
  }
  
  readonly static Hashtable typemap = new Hashtable();
  
  static TypeRef()
  {
    typemap.Add("Void", "void");
    typemap.Add("Int32", "int");
    typemap.Add("UInt32", "uint");
    typemap.Add("UInt16", "ushort");
    typemap.Add("Int16", "short");
    typemap.Add("Char", "char");
    typemap.Add("Object", "object");
    typemap.Add("String", "string");
    typemap.Add("Int64", "long");
    typemap.Add("UInt64", "ulong");
    typemap.Add("Byte", "byte");
    typemap.Add("SByte", "sbyte");
    typemap.Add("Boolean", "bool");
    typemap.Add("Single", "float");
    typemap.Add("Double", "double");
    typemap.Add("Decimal", "decimal");
    
  }
  
  protected override string MakeShort(string name)
  {
    if (typemap.ContainsKey(name))
    {
      name = typemap[name] as string;
    }
    return name;
  }
  
  public override string ToString()
  {
    return Name + (IsArray ? "[]" : "");
  }
}

#line default
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    stringstates=new string[1171];
    stringrules=new string[679];
    states=new State[1171];
stringstates[0] = @"1 $accept: . compilation_unit EOF ";
    AddState(0,new State(new int[]{208,1159,91,-420,127,-420,175,-420,136,-420,158,-420,171,-420,176,-420,181,-420,183,-420,184,-420,185,-420,186,-420,190,-420,194,-420,206,-420,209,-420,211,-420,146,-420,196,-420,170,-420,155,-420,151,-420,128,-420},new int[]{-1,1,-255,3,-257,1156,-260,1169,-261,1158,-262,1168}));
stringstates[1] = @"1 $accept: compilation_unit . EOF ";
    AddState(1,new State(new int[]{128,2}));
stringstates[2] = @"1 $accept: compilation_unit EOF .		[]";
    AddState(2,new State(-1));
stringstates[3] = @"418 compilation_unit: using_directives_opt . attributes_opt 
419 compilation_unit: using_directives_opt . namespace_member_declarations ";
    AddState(3,new State(new int[]{91,649,127,1154,175,-422,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,146,-422,196,-422,170,-422,155,-422,151,-422,128,-422},new int[]{-256,4,-2,1170,-258,646,-314,647,-315,664,-26,1155,-25,16,-43,1153,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[4] = @"418 compilation_unit: using_directives_opt attributes_opt .		[EOF, ]
426 namespace_declaration: attributes_opt . NAMESPACE qualified_identifier namespace_body comma_opt 
490 class_declaration: attributes_opt . modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt . modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt . modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt . modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(4,new State(new int[]{175,5,136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,128,-418,146,-458,196,-458,170,-458,155,-458,151,-458},new int[]{-263,18,-264,822,-265,838}));
stringstates[5] = @"426 namespace_declaration: attributes_opt NAMESPACE . qualified_identifier namespace_body comma_opt ";
    AddState(5,new State(new int[]{130,157},new int[]{-33,6,-82,145,-81,146,-84,154,-37,180}));
stringstates[6] = @"426 namespace_declaration: attributes_opt NAMESPACE qualified_identifier . namespace_body comma_opt ";
    AddState(6,new State(new int[]{123,10},new int[]{-3,7}));
stringstates[7] = @"426 namespace_declaration: attributes_opt NAMESPACE qualified_identifier namespace_body . comma_opt ";
    AddState(7,new State(new int[]{59,9,91,-427,127,-427,175,-427,136,-427,158,-427,171,-427,176,-427,181,-427,183,-427,184,-427,185,-427,186,-427,190,-427,194,-427,206,-427,209,-427,211,-427,146,-427,196,-427,170,-427,155,-427,151,-427,128,-427,125,-427},new int[]{-259,8}));
stringstates[8] = @"426 namespace_declaration: attributes_opt NAMESPACE qualified_identifier namespace_body comma_opt .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(8,new State(-426));
stringstates[9] = @"428 comma_opt: ';' .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(9,new State(-428));
stringstates[10] = @"440 namespace_body: '{' . using_directives_opt namespace_member_declarations_opt '}' ";
    AddState(10,new State(new int[]{208,1159,91,-420,127,-420,125,-420,175,-420,136,-420,158,-420,171,-420,176,-420,181,-420,183,-420,184,-420,185,-420,186,-420,190,-420,194,-420,206,-420,209,-420,211,-420,146,-420,196,-420,170,-420,155,-420,151,-420},new int[]{-255,11,-257,1156,-260,1169,-261,1158,-262,1168}));
stringstates[11] = @"440 namespace_body: '{' using_directives_opt . namespace_member_declarations_opt '}' ";
    AddState(11,new State(new int[]{91,649,127,1154,125,-424,175,-422,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,146,-422,196,-422,170,-422,155,-422,151,-422},new int[]{-4,12,-2,14,-26,1155,-25,16,-256,17,-258,646,-314,647,-315,664,-43,1153,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[12] = @"440 namespace_body: '{' using_directives_opt namespace_member_declarations_opt . '}' ";
    AddState(12,new State(new int[]{125,13}));
stringstates[13] = @"440 namespace_body: '{' using_directives_opt namespace_member_declarations_opt '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(13,new State(-440));
stringstates[14] = @"425 namespace_member_declarations_opt: namespace_member_declarations .		['}', ]
449 namespace_member_declarations: namespace_member_declarations . namespace_member_declaration ";
    AddState(14,new State(new int[]{91,649,127,1154,125,-425,175,-422,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,146,-422,196,-422,170,-422,155,-422,151,-422},new int[]{-26,15,-25,16,-256,17,-258,646,-314,647,-315,664,-43,1153,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[15] = @"449 namespace_member_declarations: namespace_member_declarations namespace_member_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(15,new State(-449));
stringstates[16] = @"450 namespace_member_declaration: namespace_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(16,new State(-450));
stringstates[17] = @"426 namespace_declaration: attributes_opt . NAMESPACE qualified_identifier namespace_body comma_opt 
490 class_declaration: attributes_opt . modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt . modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt . modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt . modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(17,new State(new int[]{175,5,136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,146,-458,196,-458,170,-458,155,-458,151,-458},new int[]{-263,18,-264,822,-265,838}));
stringstates[18] = @"490 class_declaration: attributes_opt modifiers_opt . CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt modifiers_opt . STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt modifiers_opt . INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt modifiers_opt . DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(18,new State(new int[]{146,19,196,941,170,957,155,1053,151,1073}));
stringstates[19] = @"490 class_declaration: attributes_opt modifiers_opt CLASS . IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt ";
    AddState(19,new State(new int[]{130,20}));
stringstates[20] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER . type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt ";
    AddState(20,new State(new int[]{60,1047,58,-23,213,-23,123,-23},new int[]{-79,21}));
stringstates[21] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt . in_gen_clause class_base_opt gen_clause_opt class_body comma_opt ";
    AddState(21,new State(-476,new int[]{-266,22}));
stringstates[22] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause . class_base_opt gen_clause_opt class_body comma_opt ";
    AddState(22,new State(new int[]{58,1148,213,-491,123,-491},new int[]{-273,23,-274,1147}));
stringstates[23] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt . gen_clause_opt class_body comma_opt ";
    AddState(23,new State(new int[]{213,983,123,-479},new int[]{-269,24,-267,981,-268,998}));
stringstates[24] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt . class_body comma_opt ";
    AddState(24,new State(new int[]{123,27},new int[]{-9,25}));
stringstates[25] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body . comma_opt ";
    AddState(25,new State(new int[]{59,9,91,-427,127,-427,175,-427,136,-427,158,-427,171,-427,176,-427,181,-427,183,-427,184,-427,185,-427,186,-427,190,-427,194,-427,206,-427,209,-427,211,-427,146,-427,196,-427,170,-427,155,-427,151,-427,128,-427,125,-427,147,-427,210,-427,156,-427,126,-427,189,-427,141,-427,191,-427,207,-427,169,-427,203,-427,174,-427,204,-427,144,-427,162,-427,153,-427,149,-427,139,-427,178,-427,195,-427,130,-427,167,-427,157,-427},new int[]{-259,26}));
stringstates[26] = @"490 class_declaration: attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(26,new State(-490));
stringstates[27] = @"498 class_body: '{' . class_member_declarations_opt '}' ";
    AddState(27,new State(new int[]{91,649,127,1145,125,-499,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,147,-422,210,-422,156,-422,126,-422,146,-422,196,-422,170,-422,155,-422,151,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422,167,-422,157,-422},new int[]{-8,28,-10,30,-44,1146,-21,32,-256,33,-258,646,-314,647,-315,664,-22,1136,-45,1137,-56,1117,-46,1138,-48,1139,-49,1140,-50,1141,-51,1142,-52,1143,-43,1144,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[28] = @"498 class_body: '{' class_member_declarations_opt . '}' ";
    AddState(28,new State(new int[]{125,29}));
stringstates[29] = @"498 class_body: '{' class_member_declarations_opt '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(29,new State(-498));
stringstates[30] = @"500 class_member_declarations_opt: class_member_declarations .		['}', ]
502 class_member_declarations: class_member_declarations . class_member_declaration ";
    AddState(30,new State(new int[]{91,649,127,1145,125,-500,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,147,-422,210,-422,156,-422,126,-422,146,-422,196,-422,170,-422,155,-422,151,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422,167,-422,157,-422},new int[]{-44,31,-21,32,-256,33,-258,646,-314,647,-315,664,-22,1136,-45,1137,-56,1117,-46,1138,-48,1139,-49,1140,-50,1141,-51,1142,-52,1143,-43,1144,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[31] = @"502 class_member_declarations: class_member_declarations class_member_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(31,new State(-502));
stringstates[32] = @"503 class_member_declaration: constant_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(32,new State(-503));
stringstates[33] = @"514 constant_declaration: attributes_opt . modifiers_opt CONST type constant_declarators ';' 
515 field_declaration: attributes_opt . modifiers_opt type variable_declarators ';' 
517 method_header: attributes_opt . modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' 
518 method_header: attributes_opt . modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt . modifiers_opt type qualified_identifier '{' accessor_declarations '}' 
553 event_declaration: attributes_opt . modifiers_opt EVENT type variable_declarators ';' 
554 event_declaration: attributes_opt . modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations '}' 
561 indexer_declaration: attributes_opt . modifiers_opt indexer_declarator '{' accessor_declarations '}' 
565 operator_declaration: attributes_opt . modifiers_opt operator_declarator operator_body 
594 constructor_declaration: attributes_opt . modifiers_opt constructor_declarator constructor_body 
600 destructor_declaration: attributes_opt . modifiers_opt '~' IDENTIFIER '(' ')' block 
490 class_declaration: attributes_opt . modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt . modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt . modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt . modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(33,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,147,-458,210,-458,156,-458,126,-458,146,-458,196,-458,170,-458,155,-458,151,-458,189,-458,141,-458,191,-458,207,-458,169,-458,203,-458,174,-458,204,-458,144,-458,162,-458,153,-458,149,-458,139,-458,178,-458,195,-458,130,-458,167,-458,157,-458},new int[]{-263,34,-264,822,-265,838}));
stringstates[34] = @"514 constant_declaration: attributes_opt modifiers_opt . CONST type constant_declarators ';' 
515 field_declaration: attributes_opt modifiers_opt . type variable_declarators ';' 
517 method_header: attributes_opt modifiers_opt . type qualified_identifier '(' formal_parameter_list_opt ')' 
518 method_header: attributes_opt modifiers_opt . VOID qualified_identifier '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt modifiers_opt . type qualified_identifier '{' accessor_declarations '}' 
553 event_declaration: attributes_opt modifiers_opt . EVENT type variable_declarators ';' 
554 event_declaration: attributes_opt modifiers_opt . EVENT type qualified_identifier '{' event_accessor_declarations '}' 
561 indexer_declaration: attributes_opt modifiers_opt . indexer_declarator '{' accessor_declarations '}' 
565 operator_declaration: attributes_opt modifiers_opt . operator_declarator operator_body 
594 constructor_declaration: attributes_opt modifiers_opt . constructor_declarator constructor_body 
600 destructor_declaration: attributes_opt modifiers_opt . '~' IDENTIFIER '(' ')' block 
490 class_declaration: attributes_opt modifiers_opt . CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt modifiers_opt . STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt modifiers_opt . INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt modifiers_opt . DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(34,new State(new int[]{147,35,210,897,156,902,126,936,146,19,196,941,170,957,155,1053,151,1073,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,1084,167,1101,157,1108},new int[]{-59,797,-292,924,-294,928,-30,932,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-296,1099,-297,1100}));
stringstates[35] = @"514 constant_declaration: attributes_opt modifiers_opt CONST . type constant_declarators ';' ";
    AddState(35,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,36,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[36] = @"514 constant_declaration: attributes_opt modifiers_opt CONST type . constant_declarators ';' ";
    AddState(36,new State(new int[]{130,41},new int[]{-77,37,-32,437}));
stringstates[37] = @"514 constant_declaration: attributes_opt modifiers_opt CONST type constant_declarators . ';' 
335 constant_declarators: constant_declarators . ',' constant_declarator ";
    AddState(37,new State(new int[]{59,38,44,39}));
stringstates[38] = @"514 constant_declaration: attributes_opt modifiers_opt CONST type constant_declarators ';' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(38,new State(-514));
stringstates[39] = @"335 constant_declarators: constant_declarators ',' . constant_declarator ";
    AddState(39,new State(new int[]{130,41},new int[]{-32,40}));
stringstates[40] = @"335 constant_declarators: constant_declarators ',' constant_declarator .		[';', ',', ]";
    AddState(40,new State(-335));
stringstates[41] = @"336 constant_declarator: IDENTIFIER . '=' constant_expression ";
    AddState(41,new State(new int[]{61,42}));
stringstates[42] = @"336 constant_declarator: IDENTIFIER '=' . constant_expression ";
    AddState(42,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-195,43,-94,44,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[43] = @"336 constant_declarator: IDENTIFIER '=' constant_expression .		[';', ',', ]";
    AddState(43,new State(-336));
stringstates[44] = @"294 constant_expression: expression .		[';', ',', ':', '}', ]";
    AddState(44,new State(-294));
stringstates[45] = @"240 expression: assignment .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(45,new State(-240));
stringstates[46] = @"228 assignment: unary_expression . assignment_operator expression 
193 multiplicative_expression: unary_expression .		['*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(46,new State(new int[]{61,455,241,456,242,457,243,458,244,459,245,460,249,461,250,462,251,463,253,464,247,465,42,-193,47,-193,37,-193,43,-193,45,-193,252,-193,248,-193,60,-193,62,-193,256,-193,257,-193,172,-193,137,-193,254,-193,255,-193,38,-193,94,-193,124,-193,258,-193,259,-193,63,-193,246,-193,59,-193,44,-193,93,-193,41,-193,125,-193,58,-193,221,-193,222,-193,213,-193,223,-193,220,-193,218,-193,227,-193,228,-193,224,-193,219,-193,225,-193,226,-193,229,-193},new int[]{-162,47}));
stringstates[47] = @"228 assignment: unary_expression assignment_operator . expression ";
    AddState(47,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,48,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[48] = @"228 assignment: unary_expression assignment_operator expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(48,new State(-228));
stringstates[49] = @"169 unary_expression: unary_expression_not_plusminus .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(49,new State(-169));
stringstates[50] = @"163 unary_expression_not_plusminus: postfix_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
118 post_increment_expression: postfix_expression . PLUSPLUS 
119 post_decrement_expression: postfix_expression . MINUSMINUS 
155 pointer_member_access: postfix_expression . ARROW IDENTIFIER ";
    AddState(50,new State(new int[]{260,51,261,52,262,53,61,-163,241,-163,242,-163,243,-163,244,-163,245,-163,249,-163,250,-163,251,-163,253,-163,247,-163,42,-163,47,-163,37,-163,43,-163,45,-163,252,-163,248,-163,60,-163,62,-163,256,-163,257,-163,172,-163,137,-163,254,-163,255,-163,38,-163,94,-163,124,-163,258,-163,259,-163,63,-163,246,-163,59,-163,44,-163,93,-163,41,-163,125,-163,58,-163,221,-163,222,-163,213,-163,223,-163,220,-163,218,-163,227,-163,228,-163,224,-163,219,-163,225,-163,226,-163,229,-163}));
stringstates[51] = @"118 post_increment_expression: postfix_expression PLUSPLUS .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(51,new State(-118));
stringstates[52] = @"119 post_decrement_expression: postfix_expression MINUSMINUS .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(52,new State(-119));
stringstates[53] = @"155 pointer_member_access: postfix_expression ARROW . IDENTIFIER ";
    AddState(53,new State(new int[]{130,54}));
stringstates[54] = @"155 pointer_member_access: postfix_expression ARROW IDENTIFIER .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(54,new State(-155));
stringstates[55] = @"158 postfix_expression: primary_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
100 member_access: primary_expression . '.' IDENTIFIER 
108 element_access: primary_expression . '[' expression_list ']' ";
    AddState(55,new State(new int[]{46,56,91,58,260,-158,261,-158,262,-158,61,-158,241,-158,242,-158,243,-158,244,-158,245,-158,249,-158,250,-158,251,-158,253,-158,247,-158,42,-158,47,-158,37,-158,43,-158,45,-158,252,-158,248,-158,60,-158,62,-158,256,-158,257,-158,172,-158,137,-158,254,-158,255,-158,38,-158,94,-158,124,-158,258,-158,259,-158,63,-158,246,-158,59,-158,44,-158,93,-158,41,-158,125,-158,58,-158,221,-158,222,-158,213,-158,223,-158,220,-158,218,-158,227,-158,228,-158,224,-158,219,-158,225,-158,226,-158,229,-158}));
stringstates[56] = @"100 member_access: primary_expression '.' . IDENTIFIER ";
    AddState(56,new State(new int[]{130,57}));
stringstates[57] = @"100 member_access: primary_expression '.' IDENTIFIER .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(57,new State(-100));
stringstates[58] = @"108 element_access: primary_expression '[' . expression_list ']' ";
    AddState(58,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-119,59,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[59] = @"108 element_access: primary_expression '[' expression_list . ']' 
113 expression_list: expression_list . ',' expression ";
    AddState(59,new State(new int[]{93,60,44,61}));
stringstates[60] = @"108 element_access: primary_expression '[' expression_list ']' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(60,new State(-108));
stringstates[61] = @"113 expression_list: expression_list ',' . expression ";
    AddState(61,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,62,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[62] = @"113 expression_list: expression_list ',' expression .		[']', ',', ')', '}', ]";
    AddState(62,new State(-113));
stringstates[63] = @"71 primary_expression: parenthesized_expression .		['.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(63,new State(-71));
stringstates[64] = @"99 parenthesized_expression: '(' . expression ')' 
176 cast_expression: '(' . IDENTIFIER '?' ')' unary_expression_not_plusminus 
177 cast_expression: '(' . expression ')' unary_expression_not_plusminus 
178 cast_expression: '(' . multiplicative_expression '*' ')' unary_expression 
179 cast_expression: '(' . qualified_identifier rank_specifier type_quals_opt ')' unary_expression 
180 cast_expression: '(' . qualified_identifier '?' rank_specifier ')' unary_expression 
181 cast_expression: '(' . primitive_type type_quals_opt ')' unary_expression 
182 cast_expression: '(' . class_type type_quals_opt ')' unary_expression 
183 cast_expression: '(' . primitive_type '?' ')' unary_expression 
184 cast_expression: '(' . primitive_type '?' rank_specifier ')' unary_expression 
185 cast_expression: '(' . qualified_identifier '?' ')' unary_expression 
186 cast_expression: '(' . VOID type_quals_opt ')' unary_expression 
245 lambda_expression: '(' . lambda_paramlist_opt ')' LAMBDA lambda_expression_body 
246 lambda_expression: '(' . IDENTIFIER ')' LAMBDA lambda_expression_body 
248 lambda_expression: '(' . IDENTIFIER ',' impltype_lambda_paramlist ')' LAMBDA lambda_expression_body ";
    AddState(64,new State(new int[]{130,768,210,764,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262,41,-249},new int[]{-94,65,-147,730,-33,781,-63,783,-64,785,-165,786,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-65,117,-69,118,-66,128,-102,138,-103,139,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-163,336,-167,337,-164,341,-173,342,-169,790,-170,791,-171,796,-59,794,-61,167,-72,168,-62,169,-71,176,-68,181,-70,183}));
stringstates[65] = @"99 parenthesized_expression: '(' expression . ')' 
177 cast_expression: '(' expression . ')' unary_expression_not_plusminus ";
    AddState(65,new State(new int[]{41,66}));
stringstates[66] = @"99 parenthesized_expression: '(' expression ')' .		['.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
177 cast_expression: '(' expression ')' . unary_expression_not_plusminus ";
    AddState(66,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,46,-99,91,-99,260,-99,261,-99,262,-99,61,-99,241,-99,242,-99,243,-99,244,-99,245,-99,249,-99,250,-99,251,-99,253,-99,247,-99,42,-99,47,-99,37,-99,43,-99,45,-99,252,-99,248,-99,60,-99,62,-99,256,-99,257,-99,172,-99,137,-99,254,-99,255,-99,38,-99,94,-99,124,-99,258,-99,259,-99,63,-99,246,-99,59,-99,44,-99,93,-99,41,-99,125,-99,58,-99,221,-99,222,-99,213,-99,223,-99,220,-99,218,-99,227,-99,228,-99,224,-99,219,-99,225,-99,226,-99,229,-99},new int[]{-143,67,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263}));
stringstates[67] = @"177 cast_expression: '(' expression ')' unary_expression_not_plusminus .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(67,new State(-177));
stringstates[68] = @"99 parenthesized_expression: '(' . expression ')' 
176 cast_expression: '(' . IDENTIFIER '?' ')' unary_expression_not_plusminus 
177 cast_expression: '(' . expression ')' unary_expression_not_plusminus 
178 cast_expression: '(' . multiplicative_expression '*' ')' unary_expression 
179 cast_expression: '(' . qualified_identifier rank_specifier type_quals_opt ')' unary_expression 
180 cast_expression: '(' . qualified_identifier '?' rank_specifier ')' unary_expression 
181 cast_expression: '(' . primitive_type type_quals_opt ')' unary_expression 
182 cast_expression: '(' . class_type type_quals_opt ')' unary_expression 
183 cast_expression: '(' . primitive_type '?' ')' unary_expression 
184 cast_expression: '(' . primitive_type '?' rank_specifier ')' unary_expression 
185 cast_expression: '(' . qualified_identifier '?' ')' unary_expression 
186 cast_expression: '(' . VOID type_quals_opt ')' unary_expression ";
    AddState(68,new State(new int[]{130,69,210,764,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,65,-147,730,-33,734,-63,750,-64,760,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-65,117,-69,118,-66,128,-102,138,-103,139,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-163,336,-167,337,-164,341,-173,342}));
stringstates[69] = @"176 cast_expression: '(' IDENTIFIER . '?' ')' unary_expression_not_plusminus 
15 member_name: IDENTIFIER . type_list_opt 
225 conditional_expression: IDENTIFIER . '?' expression ':' expression 
257 impltype_lambda_parameter: IDENTIFIER .		[LAMBDA, ]";
    AddState(69,new State(new int[]{63,70,60,158,263,-257,46,-18,91,-18,40,-18,129,-18,260,-18,261,-18,262,-18,61,-18,241,-18,242,-18,243,-18,244,-18,245,-18,249,-18,250,-18,251,-18,253,-18,247,-18,42,-18,47,-18,37,-18,43,-18,45,-18,252,-18,248,-18,62,-18,256,-18,257,-18,172,-18,137,-18,254,-18,255,-18,38,-18,94,-18,124,-18,258,-18,259,-18,246,-18,41,-18},new int[]{-7,149},new int[]{63,-18,60,-18}));
stringstates[70] = @"176 cast_expression: '(' IDENTIFIER '?' . ')' unary_expression_not_plusminus 
225 conditional_expression: IDENTIFIER '?' . expression ':' expression ";
    AddState(70,new State(new int[]{41,71,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,151,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[71] = @"176 cast_expression: '(' IDENTIFIER '?' ')' . unary_expression_not_plusminus ";
    AddState(71,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261},new int[]{-143,72,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263}));
stringstates[72] = @"176 cast_expression: '(' IDENTIFIER '?' ')' unary_expression_not_plusminus .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(72,new State(-176));
stringstates[73] = @"72 primary_expression: primary_expression_no_parenthesis .		['.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
104 invocation_expression: primary_expression_no_parenthesis . type_list_opt '(' argument_list_opt ')' ";
    AddState(73,new State(new int[]{60,158,46,-72,91,-72,260,-72,261,-72,262,-72,61,-72,241,-72,242,-72,243,-72,244,-72,245,-72,249,-72,250,-72,251,-72,253,-72,247,-72,42,-72,47,-72,37,-72,43,-72,45,-72,252,-72,248,-72,62,-72,256,-72,257,-72,172,-72,137,-72,254,-72,255,-72,38,-72,94,-72,124,-72,258,-72,259,-72,63,-72,246,-72,59,-72,44,-72,93,-72,41,-72,125,-72,58,-72,221,-72,222,-72,213,-72,223,-72,220,-72,218,-72,227,-72,228,-72,224,-72,219,-72,225,-72,226,-72,229,-72,40,-18},new int[]{-7,74},new int[]{60,-72}));
stringstates[74] = @"104 invocation_expression: primary_expression_no_parenthesis type_list_opt . '(' argument_list_opt ')' ";
    AddState(74,new State(new int[]{40,75}));
stringstates[75] = @"104 invocation_expression: primary_expression_no_parenthesis type_list_opt '(' . argument_list_opt ')' ";
    AddState(75,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,41,-106,221,-262},new int[]{-118,76,-95,78,-96,424,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[76] = @"104 invocation_expression: primary_expression_no_parenthesis type_list_opt '(' argument_list_opt . ')' ";
    AddState(76,new State(new int[]{41,77}));
stringstates[77] = @"104 invocation_expression: primary_expression_no_parenthesis type_list_opt '(' argument_list_opt ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(77,new State(-104));
stringstates[78] = @"107 argument_list_opt: argument_list .		[')', ]
67 argument_list: argument_list . ',' argument ";
    AddState(78,new State(new int[]{44,79,41,-107}));
stringstates[79] = @"67 argument_list: argument_list ',' . argument ";
    AddState(79,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,221,-262},new int[]{-96,80,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[80] = @"67 argument_list: argument_list ',' argument .		[',', ')', ]";
    AddState(80,new State(-67));
stringstates[81] = @"68 argument: expression .		[',', ')', ]";
    AddState(81,new State(-68));
stringstates[82] = @"74 primary_expression_no_parenthesis: literal .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(82,new State(-74));
stringstates[83] = @"2 literal: boolean_literal .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(83,new State(-2));
stringstates[84] = @"11 boolean_literal: TRUE .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(84,new State(-11));
stringstates[85] = @"12 boolean_literal: FALSE .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(85,new State(-12));
stringstates[86] = @"3 literal: INTEGER_LITERAL .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(86,new State(-3));
stringstates[87] = @"4 literal: REAL_LITERAL .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(87,new State(-4));
stringstates[88] = @"5 literal: CHARACTER_LITERAL .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(88,new State(-5));
stringstates[89] = @"6 literal: STRING_LITERAL .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(89,new State(-6));
stringstates[90] = @"7 literal: NULL_LITERAL .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(90,new State(-7));
stringstates[91] = @"8 literal: mllit .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
10 mllit: mllit . MLSTRING_LITERAL ";
    AddState(91,new State(new int[]{135,92,60,-8,40,-8,46,-8,91,-8,260,-8,261,-8,262,-8,61,-8,241,-8,242,-8,243,-8,244,-8,245,-8,249,-8,250,-8,251,-8,253,-8,247,-8,42,-8,47,-8,37,-8,43,-8,45,-8,252,-8,248,-8,62,-8,256,-8,257,-8,172,-8,137,-8,254,-8,255,-8,38,-8,94,-8,124,-8,258,-8,259,-8,63,-8,246,-8,59,-8,44,-8,93,-8,41,-8,125,-8,58,-8,221,-8,222,-8,213,-8,223,-8,220,-8,218,-8,227,-8,228,-8,224,-8,219,-8,225,-8,226,-8,229,-8}));
stringstates[92] = @"10 mllit: mllit MLSTRING_LITERAL .		[MLSTRING_LITERAL, '<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(92,new State(-10));
stringstates[93] = @"9 mllit: MLSTRING_LITERAL .		[MLSTRING_LITERAL, '<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(93,new State(-9));
stringstates[94] = @"75 primary_expression_no_parenthesis: array_creation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(94,new State(-75));
stringstates[95] = @"146 array_creation_expression: NEW . non_array_type '[' expression_list ']' @1 rank_specifiers_opt array_initializer_opt 
147 array_creation_expression: NEW . array_type array_initializer 
148 array_creation_expression: NEW . rank_specifier array_initializer 
89 anon_object_creation_expression: NEW . anon_object_init 
123 object_creation_expression: NEW . type '(' argument_list_opt ')' object_col_init_opt 
124 object_creation_expression: NEW . type object_col_init_opt 
125 object_creation_expression: NEW . error ";
    AddState(95,new State(new int[]{127,712,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,129,171,123,713},new int[]{-61,96,-70,674,-91,676,-114,678,-59,679,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181}));
stringstates[96] = @"146 array_creation_expression: NEW non_array_type . '[' expression_list ']' @1 rank_specifiers_opt array_initializer_opt 
29 type: non_array_type .		['(', '{', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(96,new State(new int[]{91,97,40,-29,123,-29,60,-29,46,-29,260,-29,261,-29,262,-29,61,-29,241,-29,242,-29,243,-29,244,-29,245,-29,249,-29,250,-29,251,-29,253,-29,247,-29,42,-29,47,-29,37,-29,43,-29,45,-29,252,-29,248,-29,62,-29,256,-29,257,-29,172,-29,137,-29,254,-29,255,-29,38,-29,94,-29,124,-29,258,-29,259,-29,63,-29,246,-29,59,-29,44,-29,93,-29,41,-29,125,-29,58,-29,221,-29,222,-29,213,-29,223,-29,220,-29,218,-29,227,-29,228,-29,224,-29,219,-29,225,-29,226,-29,229,-29},new int[]{91,-29}));
stringstates[97] = @"146 array_creation_expression: NEW non_array_type '[' . expression_list ']' @1 rank_specifiers_opt array_initializer_opt ";
    AddState(97,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-119,98,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[98] = @"146 array_creation_expression: NEW non_array_type '[' expression_list . ']' @1 rank_specifiers_opt array_initializer_opt 
113 expression_list: expression_list . ',' expression ";
    AddState(98,new State(new int[]{93,99,44,61}));
stringstates[99] = @"146 array_creation_expression: NEW non_array_type '[' expression_list ']' . @1 rank_specifiers_opt array_initializer_opt ";
    AddState(99,new State(-145,new int[]{-137,100}));
stringstates[100] = @"146 array_creation_expression: NEW non_array_type '[' expression_list ']' @1 . rank_specifiers_opt array_initializer_opt ";
    AddState(100,new State(new int[]{129,171,123,-62,60,-62,40,-62,46,-62,91,-62,260,-62,261,-62,262,-62,61,-62,241,-62,242,-62,243,-62,244,-62,245,-62,249,-62,250,-62,251,-62,253,-62,247,-62,42,-62,47,-62,37,-62,43,-62,45,-62,252,-62,248,-62,62,-62,256,-62,257,-62,172,-62,137,-62,254,-62,255,-62,38,-62,94,-62,124,-62,258,-62,259,-62,63,-62,246,-62,59,-62,44,-62,93,-62,41,-62,125,-62,58,-62,221,-62,222,-62,213,-62,223,-62,220,-62,218,-62,227,-62,228,-62,224,-62,219,-62,225,-62,226,-62,229,-62},new int[]{-92,101,-91,672}));
stringstates[101] = @"146 array_creation_expression: NEW non_array_type '[' expression_list ']' @1 rank_specifiers_opt . array_initializer_opt ";
    AddState(101,new State(new int[]{123,104,60,-149,40,-149,46,-149,91,-149,260,-149,261,-149,262,-149,61,-149,241,-149,242,-149,243,-149,244,-149,245,-149,249,-149,250,-149,251,-149,253,-149,247,-149,42,-149,47,-149,37,-149,43,-149,45,-149,252,-149,248,-149,62,-149,256,-149,257,-149,172,-149,137,-149,254,-149,255,-149,38,-149,94,-149,124,-149,258,-149,259,-149,63,-149,246,-149,59,-149,44,-149,93,-149,41,-149,125,-149,58,-149,221,-149,222,-149,213,-149,223,-149,220,-149,218,-149,227,-149,228,-149,224,-149,219,-149,225,-149,226,-149,229,-149},new int[]{-138,102,-139,103}));
stringstates[102] = @"146 array_creation_expression: NEW non_array_type '[' expression_list ']' @1 rank_specifiers_opt array_initializer_opt .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(102,new State(-146));
stringstates[103] = @"150 array_initializer_opt: array_initializer .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(103,new State(-150));
stringstates[104] = @"623 array_initializer: '{' . variable_initializer_list_opt '}' 
624 array_initializer: '{' . variable_initializer_list ',' '}' ";
    AddState(104,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,104,193,412,125,-625,221,-262},new int[]{-304,105,-305,107,-218,671,-94,111,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-139,410,-219,411}));
stringstates[105] = @"623 array_initializer: '{' variable_initializer_list_opt . '}' ";
    AddState(105,new State(new int[]{125,106}));
stringstates[106] = @"623 array_initializer: '{' variable_initializer_list_opt '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(106,new State(-623));
stringstates[107] = @"624 array_initializer: '{' variable_initializer_list . ',' '}' 
626 variable_initializer_list_opt: variable_initializer_list .		['}', ]
628 variable_initializer_list: variable_initializer_list . ',' variable_initializer ";
    AddState(107,new State(new int[]{44,108,125,-626}));
stringstates[108] = @"624 array_initializer: '{' variable_initializer_list ',' . '}' 
628 variable_initializer_list: variable_initializer_list ',' . variable_initializer ";
    AddState(108,new State(new int[]{125,109,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,104,193,412,221,-262},new int[]{-218,110,-94,111,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-139,410,-219,411}));
stringstates[109] = @"624 array_initializer: '{' variable_initializer_list ',' '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(109,new State(-624));
stringstates[110] = @"628 variable_initializer_list: variable_initializer_list ',' variable_initializer .		[',', '}', ]";
    AddState(110,new State(-628));
stringstates[111] = @"329 variable_initializer: expression .		[',', '}', ';', ')', ]";
    AddState(111,new State(-329));
stringstates[112] = @"76 primary_expression_no_parenthesis: member_access .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(112,new State(-76));
stringstates[113] = @"73 primary_expression: error .		['.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(113,new State(-73));
stringstates[114] = @"101 member_access: primitive_type . '.' IDENTIFIER ";
    AddState(114,new State(new int[]{46,115}));
stringstates[115] = @"101 member_access: primitive_type '.' . IDENTIFIER ";
    AddState(115,new State(new int[]{130,116}));
stringstates[116] = @"101 member_access: primitive_type '.' IDENTIFIER .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(116,new State(-101));
stringstates[117] = @"38 primitive_type: numeric_type .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(117,new State(-38));
stringstates[118] = @"40 numeric_type: integral_type .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(118,new State(-40));
stringstates[119] = @"43 integral_type: SBYTE .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(119,new State(-43));
stringstates[120] = @"44 integral_type: BYTE .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(120,new State(-44));
stringstates[121] = @"45 integral_type: SHORT .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(121,new State(-45));
stringstates[122] = @"46 integral_type: USHORT .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(122,new State(-46));
stringstates[123] = @"47 integral_type: INT .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(123,new State(-47));
stringstates[124] = @"48 integral_type: UINT .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(124,new State(-48));
stringstates[125] = @"49 integral_type: LONG .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(125,new State(-49));
stringstates[126] = @"50 integral_type: ULONG .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(126,new State(-50));
stringstates[127] = @"51 integral_type: CHAR .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(127,new State(-51));
stringstates[128] = @"41 numeric_type: floating_point_type .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(128,new State(-41));
stringstates[129] = @"52 floating_point_type: FLOAT .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(129,new State(-52));
stringstates[130] = @"53 floating_point_type: DOUBLE .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(130,new State(-53));
stringstates[131] = @"42 numeric_type: DECIMAL .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(131,new State(-42));
stringstates[132] = @"39 primitive_type: BOOL .		['?', RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(132,new State(-39));
stringstates[133] = @"102 member_access: class_type . '.' IDENTIFIER ";
    AddState(133,new State(new int[]{46,134}));
stringstates[134] = @"102 member_access: class_type '.' . IDENTIFIER ";
    AddState(134,new State(new int[]{130,135}));
stringstates[135] = @"102 member_access: class_type '.' IDENTIFIER .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(135,new State(-102));
stringstates[136] = @"54 class_type: OBJECT .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(136,new State(-54));
stringstates[137] = @"55 class_type: KW_STRING .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '.', '*', ')', '[', '(', '{', '<', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(137,new State(-55));
stringstates[138] = @"77 primary_expression_no_parenthesis: invocation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(138,new State(-77));
stringstates[139] = @"78 primary_expression_no_parenthesis: element_access .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(139,new State(-78));
stringstates[140] = @"109 element_access: qualified_identifier . '[' expression_list ']' 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(140,new State(new int[]{91,141,40,421,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159,42,-159,47,-159,37,-159,43,-159,45,-159,252,-159,248,-159,60,-159,62,-159,256,-159,257,-159,172,-159,137,-159,254,-159,255,-159,38,-159,94,-159,124,-159,258,-159,259,-159,63,-159,246,-159,59,-159,44,-159,93,-159,41,-159,125,-159,58,-159,221,-159,222,-159,213,-159,223,-159,220,-159,218,-159,227,-159,228,-159,224,-159,219,-159,225,-159,226,-159,229,-159}));
stringstates[141] = @"109 element_access: qualified_identifier '[' . expression_list ']' ";
    AddState(141,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-119,142,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[142] = @"109 element_access: qualified_identifier '[' expression_list . ']' 
113 expression_list: expression_list . ',' expression ";
    AddState(142,new State(new int[]{93,143,44,61}));
stringstates[143] = @"109 element_access: qualified_identifier '[' expression_list ']' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(143,new State(-109));
stringstates[144] = @"112 expression_list: expression .		[']', ',', ')', '}', ]";
    AddState(144,new State(-112));
stringstates[145] = @"429 qualified_identifier: gen_qualified_identifier .		['{', RANK_SPECIFIER, '?', THIS, OPERATOR, IDENTIFIER, '[', '(', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, '.', ]";
    AddState(145,new State(-429));
stringstates[146] = @"436 gen_qualified_identifier: member_name .		['{', RANK_SPECIFIER, '?', THIS, OPERATOR, IDENTIFIER, '[', '(', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, '.', ]
438 gen_qualifier: member_name . '.' ";
    AddState(146,new State(new int[]{46,147,123,-436,129,-436,63,-436,198,-436,179,-436,130,-436,91,-436,40,-436,260,-436,261,-436,262,-436,61,-436,241,-436,242,-436,243,-436,244,-436,245,-436,249,-436,250,-436,251,-436,253,-436,247,-436,42,-436,47,-436,37,-436,43,-436,45,-436,252,-436,248,-436,60,-436,62,-436,256,-436,257,-436,172,-436,137,-436,254,-436,255,-436,38,-436,94,-436,124,-436,258,-436,259,-436,246,-436,59,-436,44,-436,93,-436,41,-436,125,-436,58,-436,221,-436,222,-436,213,-436,223,-436,220,-436,218,-436,227,-436,228,-436,224,-436,219,-436,225,-436,226,-436,229,-436},new int[]{46,-436}));
stringstates[147] = @"438 gen_qualifier: member_name '.' .		[IDENTIFIER, THIS, ]";
    AddState(147,new State(-438));
stringstates[148] = @"15 member_name: IDENTIFIER . type_list_opt 
225 conditional_expression: IDENTIFIER . '?' expression ':' expression 
257 impltype_lambda_parameter: IDENTIFIER .		[LAMBDA, ]";
    AddState(148,new State(new int[]{63,150,60,158,263,-257,46,-18,91,-18,40,-18,260,-18,261,-18,262,-18,61,-18,241,-18,242,-18,243,-18,244,-18,245,-18,249,-18,250,-18,251,-18,253,-18,247,-18,42,-18,47,-18,37,-18,43,-18,45,-18,252,-18,248,-18,62,-18,256,-18,257,-18,172,-18,137,-18,254,-18,255,-18,38,-18,94,-18,124,-18,258,-18,259,-18,246,-18,59,-18,44,-18,93,-18,41,-18,125,-18,58,-18,221,-18,222,-18,213,-18,223,-18,220,-18,218,-18,227,-18,228,-18,224,-18,219,-18,225,-18,226,-18,229,-18,129,-18,130,-18},new int[]{-7,149},new int[]{60,-18,63,-18}));
stringstates[149] = @"15 member_name: IDENTIFIER type_list_opt .		['.', '{', RANK_SPECIFIER, '?', THIS, OPERATOR, IDENTIFIER, '[', '(', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(149,new State(-15));
stringstates[150] = @"225 conditional_expression: IDENTIFIER '?' . expression ':' expression ";
    AddState(150,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,151,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[151] = @"225 conditional_expression: IDENTIFIER '?' expression . ':' expression ";
    AddState(151,new State(new int[]{58,152}));
stringstates[152] = @"225 conditional_expression: IDENTIFIER '?' expression ':' . expression ";
    AddState(152,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,153,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[153] = @"225 conditional_expression: IDENTIFIER '?' expression ':' expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(153,new State(-225));
stringstates[154] = @"437 gen_qualified_identifier: gen_qualifier . member_name 
435 long_qualified_identifier: gen_qualifier . member_name '.' ";
    AddState(154,new State(new int[]{130,157},new int[]{-81,155}));
stringstates[155] = @"437 gen_qualified_identifier: gen_qualifier member_name .		['{', RANK_SPECIFIER, '?', THIS, OPERATOR, IDENTIFIER, '[', '(', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, '.', ]
435 long_qualified_identifier: gen_qualifier member_name . '.' ";
    AddState(155,new State(new int[]{46,156,123,-437,129,-437,63,-437,198,-437,179,-437,130,-437,91,-437,40,-437,260,-437,261,-437,262,-437,61,-437,241,-437,242,-437,243,-437,244,-437,245,-437,249,-437,250,-437,251,-437,253,-437,247,-437,42,-437,47,-437,37,-437,43,-437,45,-437,252,-437,248,-437,60,-437,62,-437,256,-437,257,-437,172,-437,137,-437,254,-437,255,-437,38,-437,94,-437,124,-437,258,-437,259,-437,246,-437,59,-437,44,-437,93,-437,41,-437,125,-437,58,-437,221,-437,222,-437,213,-437,223,-437,220,-437,218,-437,227,-437,228,-437,224,-437,219,-437,225,-437,226,-437,229,-437},new int[]{46,-437}));
stringstates[156] = @"435 long_qualified_identifier: gen_qualifier member_name '.' .		[IDENTIFIER, THIS, ]";
    AddState(156,new State(-435));
stringstates[157] = @"15 member_name: IDENTIFIER . type_list_opt ";
    AddState(157,new State(new int[]{60,158,46,-18,123,-18,129,-18,63,-18,130,-18,91,-18,40,-18,260,-18,261,-18,262,-18,61,-18,241,-18,242,-18,243,-18,244,-18,245,-18,249,-18,250,-18,251,-18,253,-18,247,-18,42,-18,47,-18,37,-18,43,-18,45,-18,252,-18,248,-18,62,-18,256,-18,257,-18,172,-18,137,-18,254,-18,255,-18,38,-18,94,-18,124,-18,258,-18,259,-18,246,-18,59,-18,44,-18,93,-18,41,-18,125,-18,58,-18,221,-18,222,-18,213,-18,223,-18,220,-18,218,-18,227,-18,228,-18,224,-18,219,-18,225,-18,226,-18,229,-18,198,-18,179,-18},new int[]{-7,149},new int[]{60,-18}));
stringstates[158] = @"19 type_list_opt: '<' . type_list '>' 
20 type_list_opt: '<' . type_list '<' type_list GTGT ";
    AddState(158,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,62,-16,60,-16,44,-16},new int[]{-6,159,-67,185,-59,166,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[159] = @"19 type_list_opt: '<' type_list . '>' 
20 type_list_opt: '<' type_list . '<' type_list GTGT 
22 type_list: type_list . ',' type_opt ";
    AddState(159,new State(new int[]{62,160,60,161,44,164}));
stringstates[160] = @"19 type_list_opt: '<' type_list '>' .		['.', '?', '[', '(', RANK_SPECIFIER, PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ')', ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, IDENTIFIER, '{', THIS, OPERATOR, ]";
    AddState(160,new State(-19));
stringstates[161] = @"20 type_list_opt: '<' type_list '<' . type_list GTGT ";
    AddState(161,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,248,-16,44,-16},new int[]{-6,162,-67,185,-59,166,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[162] = @"20 type_list_opt: '<' type_list '<' type_list . GTGT 
22 type_list: type_list . ',' type_opt ";
    AddState(162,new State(new int[]{248,163,44,164}));
stringstates[163] = @"20 type_list_opt: '<' type_list '<' type_list GTGT .		['.', '?', '[', '(', RANK_SPECIFIER, PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ')', ';', ',', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, IDENTIFIER, '{', THIS, OPERATOR, ]";
    AddState(163,new State(-20));
stringstates[164] = @"22 type_list: type_list ',' . type_opt ";
    AddState(164,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,62,-16,60,-16,44,-16,248,-16},new int[]{-67,165,-59,166,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[165] = @"22 type_list: type_list ',' type_opt .		['>', '<', ',', GTGT, ]";
    AddState(165,new State(-22));
stringstates[166] = @"17 type_opt: type .		['>', '<', ',', GTGT, IDENTIFIER, ]";
    AddState(166,new State(-17));
stringstates[167] = @"29 type: non_array_type .		[THIS, OPERATOR, IDENTIFIER, '>', '<', ',', GTGT, ')', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, '[', '(', ]";
    AddState(167,new State(-29));
stringstates[168] = @"34 non_array_type: non_null_type .		[THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(168,new State(-34));
stringstates[169] = @"32 non_null_type: simple_type .		[THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
60 array_type: simple_type . rank_specifier ";
    AddState(169,new State(new int[]{129,171,198,-32,179,-32,130,-32,91,-32,40,-32,123,-32,60,-32,46,-32,260,-32,261,-32,262,-32,61,-32,241,-32,242,-32,243,-32,244,-32,245,-32,249,-32,250,-32,251,-32,253,-32,247,-32,42,-32,47,-32,37,-32,43,-32,45,-32,252,-32,248,-32,62,-32,256,-32,257,-32,172,-32,137,-32,254,-32,255,-32,38,-32,94,-32,124,-32,258,-32,259,-32,63,-32,246,-32,59,-32,44,-32,93,-32,41,-32,125,-32,58,-32,221,-32,222,-32,213,-32,223,-32,220,-32,218,-32,227,-32,228,-32,224,-32,219,-32,225,-32,226,-32,229,-32},new int[]{-91,170}));
stringstates[170] = @"60 array_type: simple_type rank_specifier .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '{', '(', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(170,new State(-60));
stringstates[171] = @"64 rank_specifier: RANK_SPECIFIER .		['{', RANK_SPECIFIER, '<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, THIS, OPERATOR, IDENTIFIER, ]";
    AddState(171,new State(-64));
stringstates[172] = @"36 simple_type: primitive_type . nullable_opt ";
    AddState(172,new State(new int[]{63,174,129,-27,198,-27,179,-27,130,-27,91,-27,40,-27,123,-27,60,-27,46,-27,260,-27,261,-27,262,-27,61,-27,241,-27,242,-27,243,-27,244,-27,245,-27,249,-27,250,-27,251,-27,253,-27,247,-27,42,-27,47,-27,37,-27,43,-27,45,-27,252,-27,248,-27,62,-27,256,-27,257,-27,172,-27,137,-27,254,-27,255,-27,38,-27,94,-27,124,-27,258,-27,259,-27,246,-27,59,-27,44,-27,93,-27,41,-27,125,-27,58,-27,221,-27,222,-27,213,-27,223,-27,220,-27,218,-27,227,-27,228,-27,224,-27,219,-27,225,-27,226,-27,229,-27},new int[]{-89,173},new int[]{63,-27}));
stringstates[173] = @"36 simple_type: primitive_type nullable_opt .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(173,new State(-36));
stringstates[174] = @"28 nullable_opt: '?' .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(174,new State(-28));
stringstates[175] = @"37 simple_type: class_type .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(175,new State(-37));
stringstates[176] = @"33 non_null_type: type_name .		[THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
31 nullable_type: type_name . '?' ";
    AddState(176,new State(new int[]{63,177,198,-33,179,-33,130,-33,91,-33,40,-33,123,-33,60,-33,46,-33,260,-33,261,-33,262,-33,61,-33,241,-33,242,-33,243,-33,244,-33,245,-33,249,-33,250,-33,251,-33,253,-33,247,-33,42,-33,47,-33,37,-33,43,-33,45,-33,252,-33,248,-33,62,-33,256,-33,257,-33,172,-33,137,-33,254,-33,255,-33,38,-33,94,-33,124,-33,258,-33,259,-33,246,-33,59,-33,44,-33,93,-33,41,-33,125,-33,58,-33,221,-33,222,-33,213,-33,223,-33,220,-33,218,-33,227,-33,228,-33,224,-33,219,-33,225,-33,226,-33,229,-33},new int[]{63,-33}));
stringstates[177] = @"31 nullable_type: type_name '?' .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', ]";
    AddState(177,new State(-31));
stringstates[178] = @"14 type_name: qualified_identifier .		['?', THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
61 array_type: qualified_identifier . rank_specifier ";
    AddState(178,new State(new int[]{129,171,63,-14,198,-14,179,-14,130,-14,91,-14,40,-14,123,-14,60,-14,46,-14,260,-14,261,-14,262,-14,61,-14,241,-14,242,-14,243,-14,244,-14,245,-14,249,-14,250,-14,251,-14,253,-14,247,-14,42,-14,47,-14,37,-14,43,-14,45,-14,252,-14,248,-14,62,-14,256,-14,257,-14,172,-14,137,-14,254,-14,255,-14,38,-14,94,-14,124,-14,258,-14,259,-14,246,-14,59,-14,44,-14,93,-14,41,-14,125,-14,58,-14,221,-14,222,-14,213,-14,223,-14,220,-14,218,-14,227,-14,228,-14,224,-14,219,-14,225,-14,226,-14,229,-14},new int[]{-91,179}));
stringstates[179] = @"61 array_type: qualified_identifier rank_specifier .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '{', '(', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(179,new State(-61));
stringstates[180] = @"439 gen_qualifier: long_qualified_identifier .		[IDENTIFIER, THIS, ]";
    AddState(180,new State(-439));
stringstates[181] = @"35 non_array_type: nullable_type .		[THIS, OPERATOR, IDENTIFIER, '[', '(', '{', '<', '.', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
59 array_type: nullable_type . rank_specifier ";
    AddState(181,new State(new int[]{129,171,198,-35,179,-35,130,-35,91,-35,40,-35,123,-35,60,-35,46,-35,260,-35,261,-35,262,-35,61,-35,241,-35,242,-35,243,-35,244,-35,245,-35,249,-35,250,-35,251,-35,253,-35,247,-35,42,-35,47,-35,37,-35,43,-35,45,-35,252,-35,248,-35,62,-35,256,-35,257,-35,172,-35,137,-35,254,-35,255,-35,38,-35,94,-35,124,-35,258,-35,259,-35,63,-35,246,-35,59,-35,44,-35,93,-35,41,-35,125,-35,58,-35,221,-35,222,-35,213,-35,223,-35,220,-35,218,-35,227,-35,228,-35,224,-35,219,-35,225,-35,226,-35,229,-35},new int[]{-91,182}));
stringstates[182] = @"59 array_type: nullable_type rank_specifier .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '{', '(', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(182,new State(-59));
stringstates[183] = @"30 type: array_type .		[THIS, OPERATOR, IDENTIFIER, '>', '<', ',', GTGT, ')', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ']', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, '[', '(', ]
58 array_type: array_type . rank_specifier ";
    AddState(183,new State(new int[]{129,171,198,-30,179,-30,130,-30,62,-30,60,-30,44,-30,248,-30,41,-30,256,-30,257,-30,172,-30,137,-30,254,-30,255,-30,38,-30,94,-30,124,-30,258,-30,259,-30,63,-30,246,-30,59,-30,93,-30,125,-30,58,-30,221,-30,222,-30,213,-30,223,-30,220,-30,218,-30,227,-30,228,-30,224,-30,219,-30,225,-30,226,-30,229,-30,91,-30,40,-30},new int[]{-91,184}));
stringstates[184] = @"58 array_type: array_type rank_specifier .		[RANK_SPECIFIER, THIS, OPERATOR, IDENTIFIER, '{', '(', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(184,new State(-58));
stringstates[185] = @"21 type_list: type_opt .		['>', '<', ',', GTGT, ]";
    AddState(185,new State(-21));
stringstates[186] = @"79 primary_expression_no_parenthesis: this_access .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(186,new State(-79));
stringstates[187] = @"114 this_access: THIS .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
115 this_access: THIS . '.' IDENTIFIER ";
    AddState(187,new State(new int[]{46,188,60,-114,40,-114,91,-114,260,-114,261,-114,262,-114,61,-114,241,-114,242,-114,243,-114,244,-114,245,-114,249,-114,250,-114,251,-114,253,-114,247,-114,42,-114,47,-114,37,-114,43,-114,45,-114,252,-114,248,-114,62,-114,256,-114,257,-114,172,-114,137,-114,254,-114,255,-114,38,-114,94,-114,124,-114,258,-114,259,-114,63,-114,246,-114,59,-114,44,-114,93,-114,41,-114,125,-114,58,-114,221,-114,222,-114,213,-114,223,-114,220,-114,218,-114,227,-114,228,-114,224,-114,219,-114,225,-114,226,-114,229,-114},new int[]{46,-114}));
stringstates[188] = @"115 this_access: THIS '.' . IDENTIFIER ";
    AddState(188,new State(new int[]{130,189}));
stringstates[189] = @"115 this_access: THIS '.' IDENTIFIER .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(189,new State(-115));
stringstates[190] = @"80 primary_expression_no_parenthesis: base_access .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(190,new State(-80));
stringstates[191] = @"116 base_access: BASE . '.' IDENTIFIER 
117 base_access: BASE . '[' expression_list ']' ";
    AddState(191,new State(new int[]{46,192,91,194}));
stringstates[192] = @"116 base_access: BASE '.' . IDENTIFIER ";
    AddState(192,new State(new int[]{130,193}));
stringstates[193] = @"116 base_access: BASE '.' IDENTIFIER .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(193,new State(-116));
stringstates[194] = @"117 base_access: BASE '[' . expression_list ']' ";
    AddState(194,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-119,195,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[195] = @"117 base_access: BASE '[' expression_list . ']' 
113 expression_list: expression_list . ',' expression ";
    AddState(195,new State(new int[]{93,196,44,61}));
stringstates[196] = @"117 base_access: BASE '[' expression_list ']' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(196,new State(-117));
stringstates[197] = @"81 primary_expression_no_parenthesis: anon_delegate_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(197,new State(-81));
stringstates[198] = @"120 anon_delegate_expression: DELEGATE . method_body 
121 anon_delegate_expression: DELEGATE . '(' formal_parameter_list_opt ')' method_body ";
    AddState(198,new State(new int[]{40,200,59,630,123,-313},new int[]{-124,199,-172,204,-212,205}));
stringstates[199] = @"120 anon_delegate_expression: DELEGATE method_body .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(199,new State(-120));
stringstates[200] = @"121 anon_delegate_expression: DELEGATE '(' . formal_parameter_list_opt ')' method_body ";
    AddState(200,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,201,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[201] = @"121 anon_delegate_expression: DELEGATE '(' formal_parameter_list_opt . ')' method_body ";
    AddState(201,new State(new int[]{41,202}));
stringstates[202] = @"121 anon_delegate_expression: DELEGATE '(' formal_parameter_list_opt ')' . method_body ";
    AddState(202,new State(new int[]{59,630,123,-313},new int[]{-124,203,-172,204,-212,205}));
stringstates[203] = @"121 anon_delegate_expression: DELEGATE '(' formal_parameter_list_opt ')' method_body .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(203,new State(-121));
stringstates[204] = @"526 method_body: block .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(204,new State(-526));
stringstates[205] = @"312 block: block_start . '{' statement_list_opt '}' block_end ";
    AddState(205,new State(new int[]{123,206}));
stringstates[206] = @"312 block: block_start '{' . statement_list_opt '}' block_end ";
    AddState(206,new State(new int[]{130,213,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,221,430,147,434,59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,125,-315,123,-313},new int[]{-213,207,-215,210,-196,621,-197,212,-198,216,-216,217,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-217,432,-199,438,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[207] = @"312 block: block_start '{' statement_list_opt . '}' block_end ";
    AddState(207,new State(new int[]{125,208}));
stringstates[208] = @"312 block: block_start '{' statement_list_opt '}' . block_end ";
    AddState(208,new State(-314,new int[]{-214,209}));
stringstates[209] = @"312 block: block_start '{' statement_list_opt '}' block_end .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, CONST, TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', CASE, ELSE, CATCH, FINALLY, ABSTRACT, EXTERN, INTERNAL, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, VIRTUAL, VOLATILE, GET, SET, ADD, REMOVE, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, IMPLICIT, EXPLICIT, ]";
    AddState(209,new State(-312));
stringstates[210] = @"316 statement_list_opt: statement_list .		['}', ]
318 statement_list: statement_list . statement ";
    AddState(210,new State(new int[]{130,213,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,221,430,147,434,59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,125,-316,123,-313},new int[]{-196,211,-197,212,-198,216,-216,217,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-217,432,-199,438,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[211] = @"318 statement_list: statement_list statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(211,new State(-318));
stringstates[212] = @"296 statement: labeled_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(212,new State(-296));
stringstates[213] = @"320 labeled_statement: IDENTIFIER . ':' statement 
15 member_name: IDENTIFIER . type_list_opt ";
    AddState(213,new State(new int[]{58,214,60,158,46,-18,40,-18,91,-18,129,-18,63,-18,130,-18,260,-18,261,-18,262,-18,61,-18,241,-18,242,-18,243,-18,244,-18,245,-18,249,-18,250,-18,251,-18,253,-18,247,-18},new int[]{-7,149}));
stringstates[214] = @"320 labeled_statement: IDENTIFIER ':' . statement ";
    AddState(214,new State(new int[]{130,213,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,221,430,147,434,59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-196,215,-197,212,-198,216,-216,217,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-217,432,-199,438,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[215] = @"320 labeled_statement: IDENTIFIER ':' statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(215,new State(-320));
stringstates[216] = @"297 statement: declaration_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(216,new State(-297));
stringstates[217] = @"321 declaration_statement: local_variable_declaration . ';' ";
    AddState(217,new State(new int[]{59,218}));
stringstates[218] = @"321 declaration_statement: local_variable_declaration ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(218,new State(-321));
stringstates[219] = @"323 local_variable_declaration: type . variable_declarators ";
    AddState(219,new State(new int[]{130,223},new int[]{-76,220,-31,417}));
stringstates[220] = @"323 local_variable_declaration: type variable_declarators .		[';', ')', ]
326 variable_declarators: variable_declarators . ',' variable_declarator ";
    AddState(220,new State(new int[]{44,221,59,-323,41,-323}));
stringstates[221] = @"326 variable_declarators: variable_declarators ',' . variable_declarator ";
    AddState(221,new State(new int[]{130,223},new int[]{-31,222}));
stringstates[222] = @"326 variable_declarators: variable_declarators ',' variable_declarator .		[',', ';', ')', ]";
    AddState(222,new State(-326));
stringstates[223] = @"327 variable_declarator: IDENTIFIER .		[',', ';', ')', ]
328 variable_declarator: IDENTIFIER . '=' variable_initializer ";
    AddState(223,new State(new int[]{61,224,44,-327,59,-327,41,-327}));
stringstates[224] = @"328 variable_declarator: IDENTIFIER '=' . variable_initializer ";
    AddState(224,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,104,193,412,221,-262},new int[]{-218,225,-94,111,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-139,410,-219,411}));
stringstates[225] = @"328 variable_declarator: IDENTIFIER '=' variable_initializer .		[',', ';', ')', ]";
    AddState(225,new State(-328));
stringstates[226] = @"82 primary_expression_no_parenthesis: anon_object_creation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(226,new State(-82));
stringstates[227] = @"83 primary_expression_no_parenthesis: new_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(227,new State(-83));
stringstates[228] = @"122 new_expression: object_creation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(228,new State(-122));
stringstates[229] = @"84 primary_expression_no_parenthesis: default_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(229,new State(-84));
stringstates[230] = @"103 default_expression: DEFAULT . '(' type ')' ";
    AddState(230,new State(new int[]{40,231}));
stringstates[231] = @"103 default_expression: DEFAULT '(' . type ')' ";
    AddState(231,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,232,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[232] = @"103 default_expression: DEFAULT '(' type . ')' ";
    AddState(232,new State(new int[]{41,233}));
stringstates[233] = @"103 default_expression: DEFAULT '(' type ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(233,new State(-103));
stringstates[234] = @"85 primary_expression_no_parenthesis: typeof_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(234,new State(-85));
stringstates[235] = @"151 typeof_expression: TYPEOF . '(' type ')' 
152 typeof_expression: TYPEOF . '(' VOID ')' ";
    AddState(235,new State(new int[]{40,236}));
stringstates[236] = @"151 typeof_expression: TYPEOF '(' . type ')' 
152 typeof_expression: TYPEOF '(' . VOID ')' ";
    AddState(236,new State(new int[]{210,239,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,237,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[237] = @"151 typeof_expression: TYPEOF '(' type . ')' ";
    AddState(237,new State(new int[]{41,238}));
stringstates[238] = @"151 typeof_expression: TYPEOF '(' type ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(238,new State(-151));
stringstates[239] = @"152 typeof_expression: TYPEOF '(' VOID . ')' ";
    AddState(239,new State(new int[]{41,240}));
stringstates[240] = @"152 typeof_expression: TYPEOF '(' VOID ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(240,new State(-152));
stringstates[241] = @"86 primary_expression_no_parenthesis: sizeof_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(241,new State(-86));
stringstates[242] = @"157 sizeof_expression: SIZEOF . '(' type ')' ";
    AddState(242,new State(new int[]{40,243}));
stringstates[243] = @"157 sizeof_expression: SIZEOF '(' . type ')' ";
    AddState(243,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,244,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[244] = @"157 sizeof_expression: SIZEOF '(' type . ')' ";
    AddState(244,new State(new int[]{41,245}));
stringstates[245] = @"157 sizeof_expression: SIZEOF '(' type ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(245,new State(-157));
stringstates[246] = @"87 primary_expression_no_parenthesis: checked_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(246,new State(-87));
stringstates[247] = @"153 checked_expression: CHECKED . '(' expression ')' ";
    AddState(247,new State(new int[]{40,248}));
stringstates[248] = @"153 checked_expression: CHECKED '(' . expression ')' ";
    AddState(248,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,249,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[249] = @"153 checked_expression: CHECKED '(' expression . ')' ";
    AddState(249,new State(new int[]{41,250}));
stringstates[250] = @"153 checked_expression: CHECKED '(' expression ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(250,new State(-153));
stringstates[251] = @"88 primary_expression_no_parenthesis: unchecked_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(251,new State(-88));
stringstates[252] = @"154 unchecked_expression: UNCHECKED . '(' expression ')' ";
    AddState(252,new State(new int[]{40,253}));
stringstates[253] = @"154 unchecked_expression: UNCHECKED '(' . expression ')' ";
    AddState(253,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,254,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[254] = @"154 unchecked_expression: UNCHECKED '(' expression . ')' ";
    AddState(254,new State(new int[]{41,255}));
stringstates[255] = @"154 unchecked_expression: UNCHECKED '(' expression ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(255,new State(-154));
stringstates[256] = @"160 postfix_expression: post_increment_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(256,new State(-160));
stringstates[257] = @"161 postfix_expression: post_decrement_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(257,new State(-161));
stringstates[258] = @"162 postfix_expression: pointer_member_access .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(258,new State(-162));
stringstates[259] = @"164 unary_expression_not_plusminus: '!' . unary_expression ";
    AddState(259,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,260,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[260] = @"164 unary_expression_not_plusminus: '!' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(260,new State(-164));
stringstates[261] = @"165 unary_expression_not_plusminus: '~' . unary_expression ";
    AddState(261,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,262,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[262] = @"165 unary_expression_not_plusminus: '~' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(262,new State(-165));
stringstates[263] = @"166 unary_expression_not_plusminus: cast_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(263,new State(-166));
stringstates[264] = @"170 unary_expression: '+' . unary_expression ";
    AddState(264,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,265,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[265] = @"170 unary_expression: '+' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(265,new State(-170));
stringstates[266] = @"171 unary_expression: '-' . unary_expression ";
    AddState(266,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,267,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[267] = @"171 unary_expression: '-' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(267,new State(-171));
stringstates[268] = @"172 unary_expression: '*' . unary_expression ";
    AddState(268,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,269,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[269] = @"172 unary_expression: '*' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(269,new State(-172));
stringstates[270] = @"173 unary_expression: pre_increment_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(270,new State(-173));
stringstates[271] = @"167 pre_increment_expression: PLUSPLUS . unary_expression ";
    AddState(271,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,272,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[272] = @"167 pre_increment_expression: PLUSPLUS unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(272,new State(-167));
stringstates[273] = @"174 unary_expression: pre_decrement_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(273,new State(-174));
stringstates[274] = @"168 pre_decrement_expression: MINUSMINUS . unary_expression ";
    AddState(274,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,275,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[275] = @"168 pre_decrement_expression: MINUSMINUS unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(275,new State(-168));
stringstates[276] = @"175 unary_expression: addressof_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(276,new State(-175));
stringstates[277] = @"156 addressof_expression: '&' . unary_expression ";
    AddState(277,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,278,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[278] = @"156 addressof_expression: '&' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(278,new State(-156));
stringstates[279] = @"241 expression: nonassign_expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(279,new State(-241));
stringstates[280] = @"242 nonassign_expression: conditional_expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(280,new State(-242));
stringstates[281] = @"224 conditional_expression: conditional_or_expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
223 conditional_or_expression: conditional_or_expression . OROR conditional_and_expression 
226 conditional_expression: conditional_or_expression . '?' expression ':' expression 
227 conditional_expression: conditional_or_expression . QQ expression ";
    AddState(281,new State(new int[]{259,282,63,404,246,408,59,-224,44,-224,93,-224,41,-224,125,-224,58,-224,60,-224,62,-224,256,-224,257,-224,172,-224,137,-224,254,-224,255,-224,38,-224,94,-224,124,-224,258,-224,221,-224,222,-224,213,-224,223,-224,220,-224,218,-224,227,-224,228,-224,224,-224,219,-224,225,-224,226,-224,229,-224},new int[]{259,-224,63,-224,246,-224}));
stringstates[282] = @"223 conditional_or_expression: conditional_or_expression OROR . conditional_and_expression ";
    AddState(282,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-158,283,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[283] = @"223 conditional_or_expression: conditional_or_expression OROR conditional_and_expression .		[OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
221 conditional_and_expression: conditional_and_expression . ANDAND inclusive_or_expression ";
    AddState(283,new State(new int[]{258,284,259,-223,63,-223,246,-223,59,-223,44,-223,93,-223,41,-223,125,-223,58,-223,60,-223,62,-223,256,-223,257,-223,172,-223,137,-223,254,-223,255,-223,38,-223,94,-223,124,-223,221,-223,222,-223,213,-223,223,-223,220,-223,218,-223,227,-223,228,-223,224,-223,219,-223,225,-223,226,-223,229,-223},new int[]{258,-223}));
stringstates[284] = @"221 conditional_and_expression: conditional_and_expression ANDAND . inclusive_or_expression ";
    AddState(284,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-157,285,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[285] = @"221 conditional_and_expression: conditional_and_expression ANDAND inclusive_or_expression .		[ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
219 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression ";
    AddState(285,new State(new int[]{124,286,258,-221,259,-221,63,-221,246,-221,59,-221,44,-221,93,-221,41,-221,125,-221,58,-221,60,-221,62,-221,256,-221,257,-221,172,-221,137,-221,254,-221,255,-221,38,-221,94,-221,221,-221,222,-221,213,-221,223,-221,220,-221,218,-221,227,-221,228,-221,224,-221,219,-221,225,-221,226,-221,229,-221},new int[]{124,-221}));
stringstates[286] = @"219 inclusive_or_expression: inclusive_or_expression '|' . exclusive_or_expression ";
    AddState(286,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-156,287,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[287] = @"219 inclusive_or_expression: inclusive_or_expression '|' exclusive_or_expression .		['|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
217 exclusive_or_expression: exclusive_or_expression . '^' and_expression ";
    AddState(287,new State(new int[]{94,288,124,-219,258,-219,259,-219,63,-219,246,-219,59,-219,44,-219,93,-219,41,-219,125,-219,58,-219,60,-219,62,-219,256,-219,257,-219,172,-219,137,-219,254,-219,255,-219,38,-219,221,-219,222,-219,213,-219,223,-219,220,-219,218,-219,227,-219,228,-219,224,-219,219,-219,225,-219,226,-219,229,-219},new int[]{94,-219}));
stringstates[288] = @"217 exclusive_or_expression: exclusive_or_expression '^' . and_expression ";
    AddState(288,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-155,289,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[289] = @"217 exclusive_or_expression: exclusive_or_expression '^' and_expression .		['^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
215 and_expression: and_expression . '&' equality_expression ";
    AddState(289,new State(new int[]{38,290,94,-217,124,-217,258,-217,259,-217,63,-217,246,-217,59,-217,44,-217,93,-217,41,-217,125,-217,58,-217,60,-217,62,-217,256,-217,257,-217,172,-217,137,-217,254,-217,255,-217,221,-217,222,-217,213,-217,223,-217,220,-217,218,-217,227,-217,228,-217,224,-217,219,-217,225,-217,226,-217,229,-217},new int[]{38,-217}));
stringstates[290] = @"215 and_expression: and_expression '&' . equality_expression ";
    AddState(290,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-154,291,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[291] = @"215 and_expression: and_expression '&' equality_expression .		['&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
212 equality_expression: equality_expression . EQEQ relational_expression 
213 equality_expression: equality_expression . NOTEQ relational_expression ";
    AddState(291,new State(new int[]{254,292,255,330,38,-215,94,-215,124,-215,258,-215,259,-215,63,-215,246,-215,59,-215,44,-215,93,-215,41,-215,125,-215,58,-215,60,-215,62,-215,256,-215,257,-215,172,-215,137,-215,221,-215,222,-215,213,-215,223,-215,220,-215,218,-215,227,-215,228,-215,224,-215,219,-215,225,-215,226,-215,229,-215},new int[]{254,-215,255,-215}));
stringstates[292] = @"212 equality_expression: equality_expression EQEQ . relational_expression ";
    AddState(292,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-153,293,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[293] = @"212 equality_expression: equality_expression EQEQ relational_expression .		[EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
204 relational_expression: relational_expression . '<' shift_expression 
205 relational_expression: relational_expression . '>' shift_expression 
206 relational_expression: relational_expression . LEQ shift_expression 
207 relational_expression: relational_expression . GEQ shift_expression 
208 relational_expression: relational_expression . IS type 
209 relational_expression: relational_expression . IS nullable_type expression ':' expression 
210 relational_expression: relational_expression . AS type ";
    AddState(293,new State(new int[]{60,294,62,313,256,315,257,317,172,319,137,332,254,-212,255,-212,38,-212,94,-212,124,-212,258,-212,259,-212,63,-212,246,-212,59,-212,44,-212,93,-212,41,-212,125,-212,58,-212,221,-212,222,-212,213,-212,223,-212,220,-212,218,-212,227,-212,228,-212,224,-212,219,-212,225,-212,226,-212,229,-212},new int[]{60,-212,62,-212,256,-212,257,-212,172,-212,137,-212}));
stringstates[294] = @"204 relational_expression: relational_expression '<' . shift_expression ";
    AddState(294,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-152,295,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[295] = @"204 relational_expression: relational_expression '<' shift_expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
201 shift_expression: shift_expression . LTLT additive_expression 
202 shift_expression: shift_expression . GTGT additive_expression ";
    AddState(295,new State(new int[]{252,296,248,310,60,-204,62,-204,256,-204,257,-204,172,-204,137,-204,254,-204,255,-204,38,-204,94,-204,124,-204,258,-204,259,-204,63,-204,246,-204,59,-204,44,-204,93,-204,41,-204,125,-204,58,-204,221,-204,222,-204,213,-204,223,-204,220,-204,218,-204,227,-204,228,-204,224,-204,219,-204,225,-204,226,-204,229,-204}));
stringstates[296] = @"201 shift_expression: shift_expression LTLT . additive_expression ";
    AddState(296,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-151,297,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[297] = @"201 shift_expression: shift_expression LTLT additive_expression .		[LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
198 additive_expression: additive_expression . '+' multiplicative_expression 
199 additive_expression: additive_expression . '-' multiplicative_expression ";
    AddState(297,new State(new int[]{43,298,45,307,252,-201,248,-201,60,-201,62,-201,256,-201,257,-201,172,-201,137,-201,254,-201,255,-201,38,-201,94,-201,124,-201,258,-201,259,-201,63,-201,246,-201,59,-201,44,-201,93,-201,41,-201,125,-201,58,-201,221,-201,222,-201,213,-201,223,-201,220,-201,218,-201,227,-201,228,-201,224,-201,219,-201,225,-201,226,-201,229,-201}));
stringstates[298] = @"198 additive_expression: additive_expression '+' . multiplicative_expression ";
    AddState(298,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-147,299,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[299] = @"198 additive_expression: additive_expression '+' multiplicative_expression .		['+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
194 multiplicative_expression: multiplicative_expression . '*' unary_expression 
195 multiplicative_expression: multiplicative_expression . '/' unary_expression 
196 multiplicative_expression: multiplicative_expression . '%' unary_expression ";
    AddState(299,new State(new int[]{42,300,47,302,37,304,43,-198,45,-198,252,-198,248,-198,60,-198,62,-198,256,-198,257,-198,172,-198,137,-198,254,-198,255,-198,38,-198,94,-198,124,-198,258,-198,259,-198,63,-198,246,-198,59,-198,44,-198,93,-198,41,-198,125,-198,58,-198,221,-198,222,-198,213,-198,223,-198,220,-198,218,-198,227,-198,228,-198,224,-198,219,-198,225,-198,226,-198,229,-198}));
stringstates[300] = @"194 multiplicative_expression: multiplicative_expression '*' . unary_expression ";
    AddState(300,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,301,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[301] = @"194 multiplicative_expression: multiplicative_expression '*' unary_expression .		['*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(301,new State(-194));
stringstates[302] = @"195 multiplicative_expression: multiplicative_expression '/' . unary_expression ";
    AddState(302,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,303,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[303] = @"195 multiplicative_expression: multiplicative_expression '/' unary_expression .		['*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(303,new State(-195));
stringstates[304] = @"196 multiplicative_expression: multiplicative_expression '%' . unary_expression ";
    AddState(304,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,305,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[305] = @"196 multiplicative_expression: multiplicative_expression '%' unary_expression .		['*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(305,new State(-196));
stringstates[306] = @"193 multiplicative_expression: unary_expression .		['*', '/', '%', '+', '-', LTLT, GTGT, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(306,new State(-193));
stringstates[307] = @"199 additive_expression: additive_expression '-' . multiplicative_expression ";
    AddState(307,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-147,308,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[308] = @"199 additive_expression: additive_expression '-' multiplicative_expression .		['+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
194 multiplicative_expression: multiplicative_expression . '*' unary_expression 
195 multiplicative_expression: multiplicative_expression . '/' unary_expression 
196 multiplicative_expression: multiplicative_expression . '%' unary_expression ";
    AddState(308,new State(new int[]{42,300,47,302,37,304,43,-199,45,-199,252,-199,248,-199,60,-199,62,-199,256,-199,257,-199,172,-199,137,-199,254,-199,255,-199,38,-199,94,-199,124,-199,258,-199,259,-199,63,-199,246,-199,59,-199,44,-199,93,-199,41,-199,125,-199,58,-199,221,-199,222,-199,213,-199,223,-199,220,-199,218,-199,227,-199,228,-199,224,-199,219,-199,225,-199,226,-199,229,-199}));
stringstates[309] = @"197 additive_expression: multiplicative_expression .		['+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
194 multiplicative_expression: multiplicative_expression . '*' unary_expression 
195 multiplicative_expression: multiplicative_expression . '/' unary_expression 
196 multiplicative_expression: multiplicative_expression . '%' unary_expression ";
    AddState(309,new State(new int[]{42,300,47,302,37,304,43,-197,45,-197,252,-197,248,-197,60,-197,62,-197,256,-197,257,-197,172,-197,137,-197,254,-197,255,-197,38,-197,94,-197,124,-197,258,-197,259,-197,63,-197,246,-197,59,-197,44,-197,93,-197,41,-197,125,-197,58,-197,221,-197,222,-197,213,-197,223,-197,220,-197,218,-197,227,-197,228,-197,224,-197,219,-197,225,-197,226,-197,229,-197}));
stringstates[310] = @"202 shift_expression: shift_expression GTGT . additive_expression ";
    AddState(310,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-151,311,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[311] = @"202 shift_expression: shift_expression GTGT additive_expression .		[LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
198 additive_expression: additive_expression . '+' multiplicative_expression 
199 additive_expression: additive_expression . '-' multiplicative_expression ";
    AddState(311,new State(new int[]{43,298,45,307,252,-202,248,-202,60,-202,62,-202,256,-202,257,-202,172,-202,137,-202,254,-202,255,-202,38,-202,94,-202,124,-202,258,-202,259,-202,63,-202,246,-202,59,-202,44,-202,93,-202,41,-202,125,-202,58,-202,221,-202,222,-202,213,-202,223,-202,220,-202,218,-202,227,-202,228,-202,224,-202,219,-202,225,-202,226,-202,229,-202}));
stringstates[312] = @"200 shift_expression: additive_expression .		[LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
198 additive_expression: additive_expression . '+' multiplicative_expression 
199 additive_expression: additive_expression . '-' multiplicative_expression ";
    AddState(312,new State(new int[]{43,298,45,307,252,-200,248,-200,60,-200,62,-200,256,-200,257,-200,172,-200,137,-200,254,-200,255,-200,38,-200,94,-200,124,-200,258,-200,259,-200,63,-200,246,-200,59,-200,44,-200,93,-200,41,-200,125,-200,58,-200,221,-200,222,-200,213,-200,223,-200,220,-200,218,-200,227,-200,228,-200,224,-200,219,-200,225,-200,226,-200,229,-200}));
stringstates[313] = @"205 relational_expression: relational_expression '>' . shift_expression ";
    AddState(313,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-152,314,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[314] = @"205 relational_expression: relational_expression '>' shift_expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
201 shift_expression: shift_expression . LTLT additive_expression 
202 shift_expression: shift_expression . GTGT additive_expression ";
    AddState(314,new State(new int[]{252,296,248,310,60,-205,62,-205,256,-205,257,-205,172,-205,137,-205,254,-205,255,-205,38,-205,94,-205,124,-205,258,-205,259,-205,63,-205,246,-205,59,-205,44,-205,93,-205,41,-205,125,-205,58,-205,221,-205,222,-205,213,-205,223,-205,220,-205,218,-205,227,-205,228,-205,224,-205,219,-205,225,-205,226,-205,229,-205}));
stringstates[315] = @"206 relational_expression: relational_expression LEQ . shift_expression ";
    AddState(315,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-152,316,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[316] = @"206 relational_expression: relational_expression LEQ shift_expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
201 shift_expression: shift_expression . LTLT additive_expression 
202 shift_expression: shift_expression . GTGT additive_expression ";
    AddState(316,new State(new int[]{252,296,248,310,60,-206,62,-206,256,-206,257,-206,172,-206,137,-206,254,-206,255,-206,38,-206,94,-206,124,-206,258,-206,259,-206,63,-206,246,-206,59,-206,44,-206,93,-206,41,-206,125,-206,58,-206,221,-206,222,-206,213,-206,223,-206,220,-206,218,-206,227,-206,228,-206,224,-206,219,-206,225,-206,226,-206,229,-206}));
stringstates[317] = @"207 relational_expression: relational_expression GEQ . shift_expression ";
    AddState(317,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-152,318,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[318] = @"207 relational_expression: relational_expression GEQ shift_expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
201 shift_expression: shift_expression . LTLT additive_expression 
202 shift_expression: shift_expression . GTGT additive_expression ";
    AddState(318,new State(new int[]{252,296,248,310,60,-207,62,-207,256,-207,257,-207,172,-207,137,-207,254,-207,255,-207,38,-207,94,-207,124,-207,258,-207,259,-207,63,-207,246,-207,59,-207,44,-207,93,-207,41,-207,125,-207,58,-207,221,-207,222,-207,213,-207,223,-207,220,-207,218,-207,227,-207,228,-207,224,-207,219,-207,225,-207,226,-207,229,-207}));
stringstates[319] = @"208 relational_expression: relational_expression IS . type 
209 relational_expression: relational_expression IS . nullable_type expression ':' expression ";
    AddState(319,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,320,-68,321,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-70,183}));
stringstates[320] = @"208 relational_expression: relational_expression IS type .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(320,new State(-208));
stringstates[321] = @"209 relational_expression: relational_expression IS nullable_type . expression ':' expression 
35 non_array_type: nullable_type .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
59 array_type: nullable_type . rank_specifier ";
    AddState(321,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,129,171,60,-35,62,-35,256,-35,257,-35,172,-35,137,-35,254,-35,255,-35,94,-35,124,-35,258,-35,259,-35,63,-35,246,-35,59,-35,44,-35,93,-35,41,-35,125,-35,58,-35,221,-35,222,-35,213,-35,223,-35,220,-35,218,-35,227,-35,228,-35,224,-35,219,-35,225,-35,226,-35,229,-35},new int[]{-94,322,-91,182,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342},new int[]{38,-35,221,-262}));
stringstates[322] = @"209 relational_expression: relational_expression IS nullable_type expression . ':' expression ";
    AddState(322,new State(new int[]{58,323}));
stringstates[323] = @"209 relational_expression: relational_expression IS nullable_type expression ':' . expression ";
    AddState(323,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,324,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[324] = @"209 relational_expression: relational_expression IS nullable_type expression ':' expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(324,new State(-209));
stringstates[325] = @"222 conditional_or_expression: conditional_and_expression .		[OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
221 conditional_and_expression: conditional_and_expression . ANDAND inclusive_or_expression ";
    AddState(325,new State(new int[]{258,284,259,-222,63,-222,246,-222,59,-222,44,-222,93,-222,41,-222,125,-222,58,-222,60,-222,62,-222,256,-222,257,-222,172,-222,137,-222,254,-222,255,-222,38,-222,94,-222,124,-222,221,-222,222,-222,213,-222,223,-222,220,-222,218,-222,227,-222,228,-222,224,-222,219,-222,225,-222,226,-222,229,-222},new int[]{258,-222}));
stringstates[326] = @"220 conditional_and_expression: inclusive_or_expression .		[ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
219 inclusive_or_expression: inclusive_or_expression . '|' exclusive_or_expression ";
    AddState(326,new State(new int[]{124,286,258,-220,259,-220,63,-220,246,-220,59,-220,44,-220,93,-220,41,-220,125,-220,58,-220,60,-220,62,-220,256,-220,257,-220,172,-220,137,-220,254,-220,255,-220,38,-220,94,-220,221,-220,222,-220,213,-220,223,-220,220,-220,218,-220,227,-220,228,-220,224,-220,219,-220,225,-220,226,-220,229,-220},new int[]{124,-220}));
stringstates[327] = @"218 inclusive_or_expression: exclusive_or_expression .		['|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
217 exclusive_or_expression: exclusive_or_expression . '^' and_expression ";
    AddState(327,new State(new int[]{94,288,124,-218,258,-218,259,-218,63,-218,246,-218,59,-218,44,-218,93,-218,41,-218,125,-218,58,-218,60,-218,62,-218,256,-218,257,-218,172,-218,137,-218,254,-218,255,-218,38,-218,221,-218,222,-218,213,-218,223,-218,220,-218,218,-218,227,-218,228,-218,224,-218,219,-218,225,-218,226,-218,229,-218},new int[]{94,-218}));
stringstates[328] = @"216 exclusive_or_expression: and_expression .		['^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
215 and_expression: and_expression . '&' equality_expression ";
    AddState(328,new State(new int[]{38,290,94,-216,124,-216,258,-216,259,-216,63,-216,246,-216,59,-216,44,-216,93,-216,41,-216,125,-216,58,-216,60,-216,62,-216,256,-216,257,-216,172,-216,137,-216,254,-216,255,-216,221,-216,222,-216,213,-216,223,-216,220,-216,218,-216,227,-216,228,-216,224,-216,219,-216,225,-216,226,-216,229,-216},new int[]{38,-216}));
stringstates[329] = @"214 and_expression: equality_expression .		['&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
212 equality_expression: equality_expression . EQEQ relational_expression 
213 equality_expression: equality_expression . NOTEQ relational_expression ";
    AddState(329,new State(new int[]{254,292,255,330,38,-214,94,-214,124,-214,258,-214,259,-214,63,-214,246,-214,59,-214,44,-214,93,-214,41,-214,125,-214,58,-214,60,-214,62,-214,256,-214,257,-214,172,-214,137,-214,221,-214,222,-214,213,-214,223,-214,220,-214,218,-214,227,-214,228,-214,224,-214,219,-214,225,-214,226,-214,229,-214},new int[]{254,-214,255,-214}));
stringstates[330] = @"213 equality_expression: equality_expression NOTEQ . relational_expression ";
    AddState(330,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-153,331,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[331] = @"213 equality_expression: equality_expression NOTEQ relational_expression .		[EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
204 relational_expression: relational_expression . '<' shift_expression 
205 relational_expression: relational_expression . '>' shift_expression 
206 relational_expression: relational_expression . LEQ shift_expression 
207 relational_expression: relational_expression . GEQ shift_expression 
208 relational_expression: relational_expression . IS type 
209 relational_expression: relational_expression . IS nullable_type expression ':' expression 
210 relational_expression: relational_expression . AS type ";
    AddState(331,new State(new int[]{60,294,62,313,256,315,257,317,172,319,137,332,254,-213,255,-213,38,-213,94,-213,124,-213,258,-213,259,-213,63,-213,246,-213,59,-213,44,-213,93,-213,41,-213,125,-213,58,-213,221,-213,222,-213,213,-213,223,-213,220,-213,218,-213,227,-213,228,-213,224,-213,219,-213,225,-213,226,-213,229,-213},new int[]{60,-213,62,-213,256,-213,257,-213,172,-213,137,-213}));
stringstates[332] = @"210 relational_expression: relational_expression AS . type ";
    AddState(332,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,333,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[333] = @"210 relational_expression: relational_expression AS type .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(333,new State(-210));
stringstates[334] = @"203 relational_expression: shift_expression .		['<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
201 shift_expression: shift_expression . LTLT additive_expression 
202 shift_expression: shift_expression . GTGT additive_expression ";
    AddState(334,new State(new int[]{252,296,248,310,60,-203,62,-203,256,-203,257,-203,172,-203,137,-203,254,-203,255,-203,38,-203,94,-203,124,-203,258,-203,259,-203,63,-203,246,-203,59,-203,44,-203,93,-203,41,-203,125,-203,58,-203,221,-203,222,-203,213,-203,223,-203,220,-203,218,-203,227,-203,228,-203,224,-203,219,-203,225,-203,226,-203,229,-203}));
stringstates[335] = @"211 equality_expression: relational_expression .		[EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]
204 relational_expression: relational_expression . '<' shift_expression 
205 relational_expression: relational_expression . '>' shift_expression 
206 relational_expression: relational_expression . LEQ shift_expression 
207 relational_expression: relational_expression . GEQ shift_expression 
208 relational_expression: relational_expression . IS type 
209 relational_expression: relational_expression . IS nullable_type expression ':' expression 
210 relational_expression: relational_expression . AS type ";
    AddState(335,new State(new int[]{60,294,62,313,256,315,257,317,172,319,137,332,254,-211,255,-211,38,-211,94,-211,124,-211,258,-211,259,-211,63,-211,246,-211,59,-211,44,-211,93,-211,41,-211,125,-211,58,-211,221,-211,222,-211,213,-211,223,-211,220,-211,218,-211,227,-211,228,-211,224,-211,219,-211,225,-211,226,-211,229,-211},new int[]{60,-211,62,-211,256,-211,257,-211,172,-211,137,-211}));
stringstates[336] = @"243 nonassign_expression: lambda_expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(336,new State(-243));
stringstates[337] = @"247 lambda_expression: impltype_lambda_parameter . LAMBDA lambda_expression_body ";
    AddState(337,new State(new int[]{263,338}));
stringstates[338] = @"247 lambda_expression: impltype_lambda_parameter LAMBDA . lambda_expression_body ";
    AddState(338,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262,123,-313},new int[]{-166,339,-94,340,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-172,403,-212,205}));
stringstates[339] = @"247 lambda_expression: impltype_lambda_parameter LAMBDA lambda_expression_body .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(339,new State(-247));
stringstates[340] = @"258 lambda_expression_body: expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(340,new State(-258));
stringstates[341] = @"244 nonassign_expression: query_expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(341,new State(-244));
stringstates[342] = @"260 query_expression: start_query . from_clause query_body end_query ";
    AddState(342,new State(new int[]{221,356},new int[]{-174,343}));
stringstates[343] = @"260 query_expression: start_query from_clause . query_body end_query ";
    AddState(343,new State(new int[]{221,356,222,362,213,367,223,371,220,384,218,-265,227,-265},new int[]{-175,344,-177,346,-180,353,-181,394,-174,355,-182,361,-183,366,-184,370,-185,382,-186,383}));
stringstates[344] = @"260 query_expression: start_query from_clause query_body . end_query ";
    AddState(344,new State(-263,new int[]{-176,345}));
stringstates[345] = @"260 query_expression: start_query from_clause query_body end_query .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(345,new State(-260));
stringstates[346] = @"264 query_body: query_body_clauses_opt . select_or_group_clause query_continuation_opt ";
    AddState(346,new State(new int[]{218,396,227,399},new int[]{-178,347,-192,395,-193,398}));
stringstates[347] = @"264 query_body: query_body_clauses_opt select_or_group_clause . query_continuation_opt ";
    AddState(347,new State(new int[]{219,350,59,-291,44,-291,93,-291,41,-291,125,-291,58,-291,60,-291,62,-291,256,-291,257,-291,172,-291,137,-291,254,-291,255,-291,38,-291,94,-291,124,-291,258,-291,259,-291,63,-291,246,-291,221,-291,222,-291,213,-291,223,-291,220,-291,218,-291,227,-291,228,-291,224,-291,225,-291,226,-291,229,-291},new int[]{-179,348,-194,349},new int[]{219,-291}));
stringstates[348] = @"264 query_body: query_body_clauses_opt select_or_group_clause query_continuation_opt .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(348,new State(-264));
stringstates[349] = @"292 query_continuation_opt: query_continuation .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(349,new State(-292));
stringstates[350] = @"293 query_continuation: INTO . IDENTIFIER query_body ";
    AddState(350,new State(new int[]{130,351}));
stringstates[351] = @"293 query_continuation: INTO IDENTIFIER . query_body ";
    AddState(351,new State(new int[]{221,356,222,362,213,367,223,371,220,384,218,-265,227,-265},new int[]{-175,352,-177,346,-180,353,-181,394,-174,355,-182,361,-183,366,-184,370,-185,382,-186,383}));
stringstates[352] = @"293 query_continuation: INTO IDENTIFIER query_body .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(352,new State(-293));
stringstates[353] = @"266 query_body_clauses_opt: query_body_clauses .		[SELECT, GROUP, ]
268 query_body_clauses: query_body_clauses . query_body_clause ";
    AddState(353,new State(new int[]{221,356,222,362,213,367,223,371,220,384,218,-266,227,-266},new int[]{-181,354,-174,355,-182,361,-183,366,-184,370,-185,382,-186,383}));
stringstates[354] = @"268 query_body_clauses: query_body_clauses query_body_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(354,new State(-268));
stringstates[355] = @"269 query_body_clause: from_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(355,new State(-269));
stringstates[356] = @"261 from_clause: FROM . type_opt IDENTIFIER IN expression ";
    AddState(356,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-67,357,-59,166,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183},new int[]{130,-16}));
stringstates[357] = @"261 from_clause: FROM type_opt . IDENTIFIER IN expression ";
    AddState(357,new State(new int[]{130,358}));
stringstates[358] = @"261 from_clause: FROM type_opt IDENTIFIER . IN expression ";
    AddState(358,new State(new int[]{168,359}));
stringstates[359] = @"261 from_clause: FROM type_opt IDENTIFIER IN . expression ";
    AddState(359,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,360,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[360] = @"261 from_clause: FROM type_opt IDENTIFIER IN expression .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(360,new State(-261));
stringstates[361] = @"270 query_body_clause: let_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(361,new State(-270));
stringstates[362] = @"275 let_clause: LET . IDENTIFIER '=' expression ";
    AddState(362,new State(new int[]{130,363}));
stringstates[363] = @"275 let_clause: LET IDENTIFIER . '=' expression ";
    AddState(363,new State(new int[]{61,364}));
stringstates[364] = @"275 let_clause: LET IDENTIFIER '=' . expression ";
    AddState(364,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,365,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[365] = @"275 let_clause: LET IDENTIFIER '=' expression .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(365,new State(-275));
stringstates[366] = @"271 query_body_clause: where_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(366,new State(-271));
stringstates[367] = @"276 where_clause: WHERE . boolean_expression ";
    AddState(367,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-187,368,-94,369,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[368] = @"276 where_clause: WHERE boolean_expression .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(368,new State(-276));
stringstates[369] = @"295 boolean_expression: expression .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ')', ';', ]";
    AddState(369,new State(-295));
stringstates[370] = @"272 query_body_clause: join_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(370,new State(-272));
stringstates[371] = @"277 join_clause: JOIN . type_opt IDENTIFIER IN expression ON expression EQUALS expression 
278 join_into_clause: JOIN . type_opt IDENTIFIER IN expression ON expression EQUALS expression INTO IDENTIFIER ";
    AddState(371,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-67,372,-59,166,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183},new int[]{130,-16}));
stringstates[372] = @"277 join_clause: JOIN type_opt . IDENTIFIER IN expression ON expression EQUALS expression 
278 join_into_clause: JOIN type_opt . IDENTIFIER IN expression ON expression EQUALS expression INTO IDENTIFIER ";
    AddState(372,new State(new int[]{130,373}));
stringstates[373] = @"277 join_clause: JOIN type_opt IDENTIFIER . IN expression ON expression EQUALS expression 
278 join_into_clause: JOIN type_opt IDENTIFIER . IN expression ON expression EQUALS expression INTO IDENTIFIER ";
    AddState(373,new State(new int[]{168,374}));
stringstates[374] = @"277 join_clause: JOIN type_opt IDENTIFIER IN . expression ON expression EQUALS expression 
278 join_into_clause: JOIN type_opt IDENTIFIER IN . expression ON expression EQUALS expression INTO IDENTIFIER ";
    AddState(374,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,375,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[375] = @"277 join_clause: JOIN type_opt IDENTIFIER IN expression . ON expression EQUALS expression 
278 join_into_clause: JOIN type_opt IDENTIFIER IN expression . ON expression EQUALS expression INTO IDENTIFIER ";
    AddState(375,new State(new int[]{228,376}));
stringstates[376] = @"277 join_clause: JOIN type_opt IDENTIFIER IN expression ON . expression EQUALS expression 
278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON . expression EQUALS expression INTO IDENTIFIER ";
    AddState(376,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,377,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[377] = @"277 join_clause: JOIN type_opt IDENTIFIER IN expression ON expression . EQUALS expression 
278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON expression . EQUALS expression INTO IDENTIFIER ";
    AddState(377,new State(new int[]{224,378}));
stringstates[378] = @"277 join_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS . expression 
278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS . expression INTO IDENTIFIER ";
    AddState(378,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,379,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[379] = @"277 join_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]
278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression . INTO IDENTIFIER ";
    AddState(379,new State(new int[]{219,380,221,-277,222,-277,213,-277,223,-277,220,-277,218,-277,227,-277}));
stringstates[380] = @"278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression INTO . IDENTIFIER ";
    AddState(380,new State(new int[]{130,381}));
stringstates[381] = @"278 join_into_clause: JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression INTO IDENTIFIER .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(381,new State(-278));
stringstates[382] = @"273 query_body_clause: join_into_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(382,new State(-273));
stringstates[383] = @"274 query_body_clause: orderby_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(383,new State(-274));
stringstates[384] = @"279 orderby_clause: ORDERBY . orderings ";
    AddState(384,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-188,385,-189,393,-94,388,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[385] = @"279 orderby_clause: ORDERBY orderings .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]
281 orderings: orderings . ',' ordering ";
    AddState(385,new State(new int[]{44,386,221,-279,222,-279,213,-279,223,-279,220,-279,218,-279,227,-279}));
stringstates[386] = @"281 orderings: orderings ',' . ordering ";
    AddState(386,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-189,387,-94,388,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[387] = @"281 orderings: orderings ',' ordering .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(387,new State(-281));
stringstates[388] = @"282 ordering: expression . ordering_direction_opt ";
    AddState(388,new State(new int[]{225,391,226,392,44,-283,221,-283,222,-283,213,-283,223,-283,220,-283,218,-283,227,-283},new int[]{-190,389,-191,390}));
stringstates[389] = @"282 ordering: expression ordering_direction_opt .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(389,new State(-282));
stringstates[390] = @"284 ordering_direction_opt: ordering_direction .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(390,new State(-284));
stringstates[391] = @"285 ordering_direction: ASCENDING .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(391,new State(-285));
stringstates[392] = @"286 ordering_direction: DESCENDING .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(392,new State(-286));
stringstates[393] = @"280 orderings: ordering .		[',', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(393,new State(-280));
stringstates[394] = @"267 query_body_clauses: query_body_clause .		[FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ]";
    AddState(394,new State(-267));
stringstates[395] = @"287 select_or_group_clause: select_clause .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(395,new State(-287));
stringstates[396] = @"289 select_clause: SELECT . expression ";
    AddState(396,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,397,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[397] = @"289 select_clause: SELECT expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(397,new State(-289));
stringstates[398] = @"288 select_or_group_clause: group_clause .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(398,new State(-288));
stringstates[399] = @"290 group_clause: GROUP . expression BY expression ";
    AddState(399,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,400,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[400] = @"290 group_clause: GROUP expression . BY expression ";
    AddState(400,new State(new int[]{229,401}));
stringstates[401] = @"290 group_clause: GROUP expression BY . expression ";
    AddState(401,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,402,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[402] = @"290 group_clause: GROUP expression BY expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(402,new State(-290));
stringstates[403] = @"259 lambda_expression_body: block .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(403,new State(-259));
stringstates[404] = @"226 conditional_expression: conditional_or_expression '?' . expression ':' expression ";
    AddState(404,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,405,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[405] = @"226 conditional_expression: conditional_or_expression '?' expression . ':' expression ";
    AddState(405,new State(new int[]{58,406}));
stringstates[406] = @"226 conditional_expression: conditional_or_expression '?' expression ':' . expression ";
    AddState(406,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,407,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[407] = @"226 conditional_expression: conditional_or_expression '?' expression ':' expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(407,new State(-226));
stringstates[408] = @"227 conditional_expression: conditional_or_expression QQ . expression ";
    AddState(408,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,409,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[409] = @"227 conditional_expression: conditional_or_expression QQ expression .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(409,new State(-227));
stringstates[410] = @"330 variable_initializer: array_initializer .		[',', '}', ';', ')', ]";
    AddState(410,new State(-330));
stringstates[411] = @"331 variable_initializer: stackalloc_initializer .		[',', '}', ';', ')', ]";
    AddState(411,new State(-331));
stringstates[412] = @"332 stackalloc_initializer: STACKALLOC . type '[' expression ']' ";
    AddState(412,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,413,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[413] = @"332 stackalloc_initializer: STACKALLOC type . '[' expression ']' ";
    AddState(413,new State(new int[]{91,414}));
stringstates[414] = @"332 stackalloc_initializer: STACKALLOC type '[' . expression ']' ";
    AddState(414,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,415,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[415] = @"332 stackalloc_initializer: STACKALLOC type '[' expression . ']' ";
    AddState(415,new State(new int[]{93,416}));
stringstates[416] = @"332 stackalloc_initializer: STACKALLOC type '[' expression ']' .		[',', '}', ';', ')', ]";
    AddState(416,new State(-332));
stringstates[417] = @"325 variable_declarators: variable_declarator .		[',', ';', ')', ]";
    AddState(417,new State(-325));
stringstates[418] = @"36 simple_type: primitive_type . nullable_opt 
101 member_access: primitive_type . '.' IDENTIFIER ";
    AddState(418,new State(new int[]{46,115,63,174,129,-27,130,-27},new int[]{-89,173}));
stringstates[419] = @"37 simple_type: class_type .		[RANK_SPECIFIER, IDENTIFIER, ]
102 member_access: class_type . '.' IDENTIFIER ";
    AddState(419,new State(new int[]{46,134,129,-37,130,-37}));
stringstates[420] = @"14 type_name: qualified_identifier .		['?', IDENTIFIER, ]
61 array_type: qualified_identifier . rank_specifier 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
109 element_access: qualified_identifier . '[' expression_list ']' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]";
    AddState(420,new State(new int[]{40,421,91,141,129,171,63,-14,130,-14,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159},new int[]{-91,179}));
stringstates[421] = @"105 invocation_expression: qualified_identifier '(' . argument_list_opt ')' ";
    AddState(421,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,41,-106,221,-262},new int[]{-118,422,-95,78,-96,424,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[422] = @"105 invocation_expression: qualified_identifier '(' argument_list_opt . ')' ";
    AddState(422,new State(new int[]{41,423}));
stringstates[423] = @"105 invocation_expression: qualified_identifier '(' argument_list_opt ')' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(423,new State(-105));
stringstates[424] = @"66 argument_list: argument .		[',', ')', ]";
    AddState(424,new State(-66));
stringstates[425] = @"69 argument: REF . variable_reference ";
    AddState(425,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-93,426,-94,427,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[426] = @"69 argument: REF variable_reference .		[',', ')', ]";
    AddState(426,new State(-69));
stringstates[427] = @"65 variable_reference: expression .		[',', ')', ]";
    AddState(427,new State(-65));
stringstates[428] = @"70 argument: OUT . variable_reference ";
    AddState(428,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-93,429,-94,427,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[429] = @"70 argument: OUT variable_reference .		[',', ')', ]";
    AddState(429,new State(-70));
stringstates[430] = @"324 local_variable_declaration: FROM . variable_declarators ";
    AddState(430,new State(new int[]{130,223},new int[]{-76,431,-31,417}));
stringstates[431] = @"324 local_variable_declaration: FROM variable_declarators .		[';', ')', ]
326 variable_declarators: variable_declarators . ',' variable_declarator ";
    AddState(431,new State(new int[]{44,221,59,-324,41,-324}));
stringstates[432] = @"322 declaration_statement: local_constant_declaration . ';' ";
    AddState(432,new State(new int[]{59,433}));
stringstates[433] = @"322 declaration_statement: local_constant_declaration ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(433,new State(-322));
stringstates[434] = @"333 local_constant_declaration: CONST . type constant_declarators ";
    AddState(434,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,435,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[435] = @"333 local_constant_declaration: CONST type . constant_declarators ";
    AddState(435,new State(new int[]{130,41},new int[]{-77,436,-32,437}));
stringstates[436] = @"333 local_constant_declaration: CONST type constant_declarators .		[';', ]
335 constant_declarators: constant_declarators . ',' constant_declarator ";
    AddState(436,new State(new int[]{44,39,59,-333}));
stringstates[437] = @"334 constant_declarators: constant_declarator .		[';', ',', ]";
    AddState(437,new State(-334));
stringstates[438] = @"298 statement: embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(438,new State(-298));
stringstates[439] = @"299 embedded_statement: block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(439,new State(-299));
stringstates[440] = @"300 embedded_statement: empty_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(440,new State(-300));
stringstates[441] = @"319 empty_statement: ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(441,new State(-319));
stringstates[442] = @"301 embedded_statement: expression_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(442,new State(-301));
stringstates[443] = @"337 expression_statement: statement_expression . ';' ";
    AddState(443,new State(new int[]{59,444}));
stringstates[444] = @"337 expression_statement: statement_expression ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(444,new State(-337));
stringstates[445] = @"338 statement_expression: invocation_expression .		[';', ',', ')', ]
77 primary_expression_no_parenthesis: invocation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]";
    AddState(445,new State(new int[]{59,-338,44,-338,41,-338,60,-77,40,-77,46,-77,91,-77,260,-77,261,-77,262,-77,61,-77,241,-77,242,-77,243,-77,244,-77,245,-77,249,-77,250,-77,251,-77,253,-77,247,-77}));
stringstates[446] = @"104 invocation_expression: primary_expression_no_parenthesis . type_list_opt '(' argument_list_opt ')' 
72 primary_expression: primary_expression_no_parenthesis .		['.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]";
    AddState(446,new State(new int[]{60,158,46,-72,91,-72,260,-72,261,-72,262,-72,61,-72,241,-72,242,-72,243,-72,244,-72,245,-72,249,-72,250,-72,251,-72,253,-72,247,-72,40,-18},new int[]{-7,74}));
stringstates[447] = @"100 member_access: primary_expression . '.' IDENTIFIER 
108 element_access: primary_expression . '[' expression_list ']' 
158 postfix_expression: primary_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]";
    AddState(447,new State(new int[]{46,56,91,58,260,-158,261,-158,262,-158,61,-158,241,-158,242,-158,243,-158,244,-158,245,-158,249,-158,250,-158,251,-158,253,-158,247,-158}));
stringstates[448] = @"122 new_expression: object_creation_expression .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]
339 statement_expression: object_creation_expression .		[';', ',', ')', ]";
    AddState(448,new State(new int[]{60,-122,40,-122,46,-122,91,-122,260,-122,261,-122,262,-122,61,-122,241,-122,242,-122,243,-122,244,-122,245,-122,249,-122,250,-122,251,-122,253,-122,247,-122,59,-339,44,-339,41,-339}));
stringstates[449] = @"153 checked_expression: CHECKED . '(' expression ')' 
407 checked_statement: CHECKED . block ";
    AddState(449,new State(new int[]{40,248,123,-313},new int[]{-172,450,-212,205}));
stringstates[450] = @"407 checked_statement: CHECKED block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(450,new State(-407));
stringstates[451] = @"154 unchecked_expression: UNCHECKED . '(' expression ')' 
408 unchecked_statement: UNCHECKED . block ";
    AddState(451,new State(new int[]{40,253,123,-313},new int[]{-172,452,-212,205}));
stringstates[452] = @"408 unchecked_statement: UNCHECKED block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(452,new State(-408));
stringstates[453] = @"340 statement_expression: assignment .		[';', ',', ')', ]";
    AddState(453,new State(-340));
stringstates[454] = @"228 assignment: unary_expression . assignment_operator expression ";
    AddState(454,new State(new int[]{61,455,241,456,242,457,243,458,244,459,245,460,249,461,250,462,251,463,253,464,247,465},new int[]{-162,47}));
stringstates[455] = @"229 assignment_operator: '=' .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(455,new State(-229));
stringstates[456] = @"230 assignment_operator: PLUSEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(456,new State(-230));
stringstates[457] = @"231 assignment_operator: MINUSEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(457,new State(-231));
stringstates[458] = @"232 assignment_operator: STAREQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(458,new State(-232));
stringstates[459] = @"233 assignment_operator: DIVEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(459,new State(-233));
stringstates[460] = @"234 assignment_operator: MODEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(460,new State(-234));
stringstates[461] = @"235 assignment_operator: XOREQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(461,new State(-235));
stringstates[462] = @"236 assignment_operator: ANDEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(462,new State(-236));
stringstates[463] = @"237 assignment_operator: OREQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(463,new State(-237));
stringstates[464] = @"238 assignment_operator: LTLTEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(464,new State(-238));
stringstates[465] = @"239 assignment_operator: GTGTEQ .		['(', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, error, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', FROM, ]";
    AddState(465,new State(-239));
stringstates[466] = @"160 postfix_expression: post_increment_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]
341 statement_expression: post_increment_expression .		[';', ',', ')', ]";
    AddState(466,new State(new int[]{260,-160,261,-160,262,-160,61,-160,241,-160,242,-160,243,-160,244,-160,245,-160,249,-160,250,-160,251,-160,253,-160,247,-160,59,-341,44,-341,41,-341}));
stringstates[467] = @"161 postfix_expression: post_decrement_expression .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]
342 statement_expression: post_decrement_expression .		[';', ',', ')', ]";
    AddState(467,new State(new int[]{260,-161,261,-161,262,-161,61,-161,241,-161,242,-161,243,-161,244,-161,245,-161,249,-161,250,-161,251,-161,253,-161,247,-161,59,-342,44,-342,41,-342}));
stringstates[468] = @"173 unary_expression: pre_increment_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]
343 statement_expression: pre_increment_expression .		[';', ',', ')', ]";
    AddState(468,new State(new int[]{61,-173,241,-173,242,-173,243,-173,244,-173,245,-173,249,-173,250,-173,251,-173,253,-173,247,-173,59,-343,44,-343,41,-343}));
stringstates[469] = @"174 unary_expression: pre_decrement_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]
344 statement_expression: pre_decrement_expression .		[';', ',', ')', ]";
    AddState(469,new State(new int[]{61,-174,241,-174,242,-174,243,-174,244,-174,245,-174,249,-174,250,-174,251,-174,253,-174,247,-174,59,-344,44,-344,41,-344}));
stringstates[470] = @"302 embedded_statement: selection_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(470,new State(-302));
stringstates[471] = @"345 selection_statement: if_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(471,new State(-345));
stringstates[472] = @"347 if_statement: IF . '(' boolean_expression ')' embedded_statement 
348 if_statement: IF . '(' boolean_expression ')' embedded_statement ELSE embedded_statement ";
    AddState(472,new State(new int[]{40,473}));
stringstates[473] = @"347 if_statement: IF '(' . boolean_expression ')' embedded_statement 
348 if_statement: IF '(' . boolean_expression ')' embedded_statement ELSE embedded_statement ";
    AddState(473,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-187,474,-94,369,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[474] = @"347 if_statement: IF '(' boolean_expression . ')' embedded_statement 
348 if_statement: IF '(' boolean_expression . ')' embedded_statement ELSE embedded_statement ";
    AddState(474,new State(new int[]{41,475}));
stringstates[475] = @"347 if_statement: IF '(' boolean_expression ')' . embedded_statement 
348 if_statement: IF '(' boolean_expression ')' . embedded_statement ELSE embedded_statement ";
    AddState(475,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,476,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[476] = @"347 if_statement: IF '(' boolean_expression ')' embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]
348 if_statement: IF '(' boolean_expression ')' embedded_statement . ELSE embedded_statement ";
    AddState(476,new State(new int[]{154,477,130,-347,189,-347,141,-347,191,-347,207,-347,169,-347,203,-347,174,-347,204,-347,144,-347,162,-347,153,-347,149,-347,139,-347,178,-347,195,-347,221,-347,147,-347,59,-347,200,-347,159,-347,131,-347,132,-347,133,-347,134,-347,177,-347,135,-347,176,-347,40,-347,127,-347,198,-347,138,-347,151,-347,150,-347,202,-347,192,-347,145,-347,205,-347,33,-347,126,-347,43,-347,45,-347,42,-347,260,-347,261,-347,38,-347,166,-347,197,-347,212,-347,152,-347,163,-347,164,-347,140,-347,148,-347,165,-347,188,-347,199,-347,201,-347,173,-347,208,-347,206,-347,161,-347,123,-347,125,-347,142,-347},new int[]{154,-347}));
stringstates[477] = @"348 if_statement: IF '(' boolean_expression ')' embedded_statement ELSE . embedded_statement ";
    AddState(477,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,478,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[478] = @"348 if_statement: IF '(' boolean_expression ')' embedded_statement ELSE embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(478,new State(-348));
stringstates[479] = @"105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
109 element_access: qualified_identifier . '[' expression_list ']' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, ]";
    AddState(479,new State(new int[]{40,421,91,141,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159}));
stringstates[480] = @"346 selection_statement: switch_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(480,new State(-346));
stringstates[481] = @"349 switch_statement: SWITCH . '(' expression ')' switch_block ";
    AddState(481,new State(new int[]{40,482}));
stringstates[482] = @"349 switch_statement: SWITCH '(' . expression ')' switch_block ";
    AddState(482,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,483,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[483] = @"349 switch_statement: SWITCH '(' expression . ')' switch_block ";
    AddState(483,new State(new int[]{41,484}));
stringstates[484] = @"349 switch_statement: SWITCH '(' expression ')' . switch_block ";
    AddState(484,new State(new int[]{123,486},new int[]{-223,485}));
stringstates[485] = @"349 switch_statement: SWITCH '(' expression ')' switch_block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(485,new State(-349));
stringstates[486] = @"350 switch_block: '{' . switch_sections_opt '}' ";
    AddState(486,new State(new int[]{142,624,150,628,125,-351},new int[]{-224,487,-225,489,-226,629,-227,491,-228,627}));
stringstates[487] = @"350 switch_block: '{' switch_sections_opt . '}' ";
    AddState(487,new State(new int[]{125,488}));
stringstates[488] = @"350 switch_block: '{' switch_sections_opt '}' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(488,new State(-350));
stringstates[489] = @"352 switch_sections_opt: switch_sections .		['}', ]
354 switch_sections: switch_sections . switch_section ";
    AddState(489,new State(new int[]{142,624,150,628,125,-352},new int[]{-226,490,-227,491,-228,627}));
stringstates[490] = @"354 switch_sections: switch_sections switch_section .		[CASE, DEFAULT, '}', ]";
    AddState(490,new State(-354));
stringstates[491] = @"355 switch_section: switch_labels . statement_list 
357 switch_labels: switch_labels . switch_label ";
    AddState(491,new State(new int[]{130,213,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,221,430,147,434,59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,622,202,235,192,242,145,449,205,451,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,142,624,123,-313},new int[]{-215,492,-228,620,-196,621,-197,212,-198,216,-216,217,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-217,432,-199,438,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[492] = @"355 switch_section: switch_labels statement_list .		[CASE, DEFAULT, '}', ]
318 statement_list: statement_list . statement ";
    AddState(492,new State(new int[]{130,213,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,221,430,147,434,59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,142,-355,125,-355,123,-313},new int[]{-196,211,-197,212,-198,216,-216,217,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-217,432,-199,438,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593},new int[]{150,-355}));
stringstates[493] = @"303 embedded_statement: iteration_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(493,new State(-303));
stringstates[494] = @"360 iteration_statement: while_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(494,new State(-360));
stringstates[495] = @"365 while_statement: WHILE . '(' boolean_expression ')' embedded_statement ";
    AddState(495,new State(new int[]{40,496}));
stringstates[496] = @"365 while_statement: WHILE '(' . boolean_expression ')' embedded_statement ";
    AddState(496,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-187,497,-94,369,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[497] = @"365 while_statement: WHILE '(' boolean_expression . ')' embedded_statement ";
    AddState(497,new State(new int[]{41,498}));
stringstates[498] = @"365 while_statement: WHILE '(' boolean_expression ')' . embedded_statement ";
    AddState(498,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,499,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[499] = @"365 while_statement: WHILE '(' boolean_expression ')' embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(499,new State(-365));
stringstates[500] = @"361 iteration_statement: do_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(500,new State(-361));
stringstates[501] = @"366 do_statement: DO . embedded_statement WHILE '(' boolean_expression ')' ';' ";
    AddState(501,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,502,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[502] = @"366 do_statement: DO embedded_statement . WHILE '(' boolean_expression ')' ';' ";
    AddState(502,new State(new int[]{212,503}));
stringstates[503] = @"366 do_statement: DO embedded_statement WHILE . '(' boolean_expression ')' ';' ";
    AddState(503,new State(new int[]{40,504}));
stringstates[504] = @"366 do_statement: DO embedded_statement WHILE '(' . boolean_expression ')' ';' ";
    AddState(504,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-187,505,-94,369,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[505] = @"366 do_statement: DO embedded_statement WHILE '(' boolean_expression . ')' ';' ";
    AddState(505,new State(new int[]{41,506}));
stringstates[506] = @"366 do_statement: DO embedded_statement WHILE '(' boolean_expression ')' . ';' ";
    AddState(506,new State(new int[]{59,507}));
stringstates[507] = @"366 do_statement: DO embedded_statement WHILE '(' boolean_expression ')' ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(507,new State(-366));
stringstates[508] = @"362 iteration_statement: for_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(508,new State(-362));
stringstates[509] = @"368 for_statement: FOR . '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement ";
    AddState(509,new State(new int[]{40,510}));
stringstates[510] = @"368 for_statement: FOR '(' . for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement ";
    AddState(510,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,221,430,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,59,-369},new int[]{-233,511,-237,617,-216,618,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,420,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-240,619,-220,614,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276}));
stringstates[511] = @"368 for_statement: FOR '(' for_initializer_opt . ';' for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement ";
    AddState(511,new State(new int[]{59,512}));
stringstates[512] = @"368 for_statement: FOR '(' for_initializer_opt ';' . for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement ";
    AddState(512,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,59,-371,221,-262},new int[]{-234,513,-238,615,-187,616,-94,369,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[513] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt . ';' for_iterator_opt ')' @2 embedded_statement ";
    AddState(513,new State(new int[]{59,514}));
stringstates[514] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt ';' . for_iterator_opt ')' @2 embedded_statement ";
    AddState(514,new State(new int[]{200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,41,-373},new int[]{-235,515,-239,610,-240,611,-220,614,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276}));
stringstates[515] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt . ')' @2 embedded_statement ";
    AddState(515,new State(new int[]{41,516}));
stringstates[516] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' . @2 embedded_statement ";
    AddState(516,new State(-367,new int[]{-236,517}));
stringstates[517] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' @2 . embedded_statement ";
    AddState(517,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,518,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[518] = @"368 for_statement: FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(518,new State(-368));
stringstates[519] = @"363 iteration_statement: foreach_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(519,new State(-363));
stringstates[520] = @"381 foreach_statement: FOREACH . '(' type IDENTIFIER IN expression ')' embedded_statement ";
    AddState(520,new State(new int[]{40,521}));
stringstates[521] = @"381 foreach_statement: FOREACH '(' . type IDENTIFIER IN expression ')' embedded_statement ";
    AddState(521,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,522,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[522] = @"381 foreach_statement: FOREACH '(' type . IDENTIFIER IN expression ')' embedded_statement ";
    AddState(522,new State(new int[]{130,523}));
stringstates[523] = @"381 foreach_statement: FOREACH '(' type IDENTIFIER . IN expression ')' embedded_statement ";
    AddState(523,new State(new int[]{168,524}));
stringstates[524] = @"381 foreach_statement: FOREACH '(' type IDENTIFIER IN . expression ')' embedded_statement ";
    AddState(524,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,525,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[525] = @"381 foreach_statement: FOREACH '(' type IDENTIFIER IN expression . ')' embedded_statement ";
    AddState(525,new State(new int[]{41,526}));
stringstates[526] = @"381 foreach_statement: FOREACH '(' type IDENTIFIER IN expression ')' . embedded_statement ";
    AddState(526,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,527,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[527] = @"381 foreach_statement: FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(527,new State(-381));
stringstates[528] = @"304 embedded_statement: jump_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(528,new State(-304));
stringstates[529] = @"382 jump_statement: break_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(529,new State(-382));
stringstates[530] = @"387 break_statement: BREAK . ';' ";
    AddState(530,new State(new int[]{59,531}));
stringstates[531] = @"387 break_statement: BREAK ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(531,new State(-387));
stringstates[532] = @"383 jump_statement: continue_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(532,new State(-383));
stringstates[533] = @"388 continue_statement: CONTINUE . ';' ";
    AddState(533,new State(new int[]{59,534}));
stringstates[534] = @"388 continue_statement: CONTINUE ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(534,new State(-388));
stringstates[535] = @"384 jump_statement: goto_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(535,new State(-384));
stringstates[536] = @"389 goto_statement: GOTO . IDENTIFIER ';' 
390 goto_statement: GOTO . CASE constant_expression ';' 
391 goto_statement: GOTO . DEFAULT ';' ";
    AddState(536,new State(new int[]{130,537,142,539,150,542}));
stringstates[537] = @"389 goto_statement: GOTO IDENTIFIER . ';' ";
    AddState(537,new State(new int[]{59,538}));
stringstates[538] = @"389 goto_statement: GOTO IDENTIFIER ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(538,new State(-389));
stringstates[539] = @"390 goto_statement: GOTO CASE . constant_expression ';' ";
    AddState(539,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-195,540,-94,44,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[540] = @"390 goto_statement: GOTO CASE constant_expression . ';' ";
    AddState(540,new State(new int[]{59,541}));
stringstates[541] = @"390 goto_statement: GOTO CASE constant_expression ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(541,new State(-390));
stringstates[542] = @"391 goto_statement: GOTO DEFAULT . ';' ";
    AddState(542,new State(new int[]{59,543}));
stringstates[543] = @"391 goto_statement: GOTO DEFAULT ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(543,new State(-391));
stringstates[544] = @"385 jump_statement: return_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(544,new State(-385));
stringstates[545] = @"392 return_statement: RETURN . expression_opt ';' ";
    AddState(545,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,59,-393,221,-262},new int[]{-246,546,-94,548,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[546] = @"392 return_statement: RETURN expression_opt . ';' ";
    AddState(546,new State(new int[]{59,547}));
stringstates[547] = @"392 return_statement: RETURN expression_opt ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(547,new State(-392));
stringstates[548] = @"394 expression_opt: expression .		[';', ]";
    AddState(548,new State(-394));
stringstates[549] = @"386 jump_statement: throw_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(549,new State(-386));
stringstates[550] = @"395 throw_statement: THROW . expression_opt ';' ";
    AddState(550,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,59,-393,221,-262},new int[]{-246,551,-94,548,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[551] = @"395 throw_statement: THROW expression_opt . ';' ";
    AddState(551,new State(new int[]{59,552}));
stringstates[552] = @"395 throw_statement: THROW expression_opt ';' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(552,new State(-395));
stringstates[553] = @"305 embedded_statement: try_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(553,new State(-305));
stringstates[554] = @"396 try_statement: TRY . block catch_clauses 
397 try_statement: TRY . block finally_clause 
398 try_statement: TRY . block catch_clauses finally_clause ";
    AddState(554,new State(-313,new int[]{-172,555,-212,205}));
stringstates[555] = @"396 try_statement: TRY block . catch_clauses 
397 try_statement: TRY block . finally_clause 
398 try_statement: TRY block . catch_clauses finally_clause ";
    AddState(555,new State(new int[]{143,561,160,559},new int[]{-247,556,-248,574,-249,575}));
stringstates[556] = @"396 try_statement: TRY block catch_clauses .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]
398 try_statement: TRY block catch_clauses . finally_clause 
400 catch_clauses: catch_clauses . catch_clause ";
    AddState(556,new State(new int[]{160,559,143,561,130,-396,189,-396,141,-396,191,-396,207,-396,169,-396,203,-396,174,-396,204,-396,144,-396,162,-396,153,-396,149,-396,139,-396,178,-396,195,-396,221,-396,147,-396,59,-396,200,-396,159,-396,131,-396,132,-396,133,-396,134,-396,177,-396,135,-396,176,-396,40,-396,127,-396,198,-396,138,-396,151,-396,150,-396,202,-396,192,-396,145,-396,205,-396,33,-396,126,-396,43,-396,45,-396,42,-396,260,-396,261,-396,38,-396,166,-396,197,-396,212,-396,152,-396,163,-396,164,-396,140,-396,148,-396,165,-396,188,-396,199,-396,201,-396,173,-396,208,-396,206,-396,161,-396,123,-396,125,-396,142,-396,154,-396},new int[]{-248,557,-249,558}));
stringstates[557] = @"398 try_statement: TRY block catch_clauses finally_clause .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(557,new State(-398));
stringstates[558] = @"400 catch_clauses: catch_clauses catch_clause .		[FINALLY, CATCH, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(558,new State(-400));
stringstates[559] = @"406 finally_clause: FINALLY . block ";
    AddState(559,new State(-313,new int[]{-172,560,-212,205}));
stringstates[560] = @"406 finally_clause: FINALLY block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(560,new State(-406));
stringstates[561] = @"401 catch_clause: CATCH . '(' class_type identifier_opt ')' block 
402 catch_clause: CATCH . '(' type_name identifier_opt ')' block 
403 catch_clause: CATCH . block ";
    AddState(561,new State(new int[]{40,562,123,-313},new int[]{-172,573,-212,205}));
stringstates[562] = @"401 catch_clause: CATCH '(' . class_type identifier_opt ')' block 
402 catch_clause: CATCH '(' . type_name identifier_opt ')' block ";
    AddState(562,new State(new int[]{178,136,195,137,130,157},new int[]{-64,563,-71,568,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[563] = @"401 catch_clause: CATCH '(' class_type . identifier_opt ')' block ";
    AddState(563,new State(new int[]{130,567,41,-404},new int[]{-250,564}));
stringstates[564] = @"401 catch_clause: CATCH '(' class_type identifier_opt . ')' block ";
    AddState(564,new State(new int[]{41,565}));
stringstates[565] = @"401 catch_clause: CATCH '(' class_type identifier_opt ')' . block ";
    AddState(565,new State(-313,new int[]{-172,566,-212,205}));
stringstates[566] = @"401 catch_clause: CATCH '(' class_type identifier_opt ')' block .		[FINALLY, CATCH, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(566,new State(-401));
stringstates[567] = @"405 identifier_opt: IDENTIFIER .		[')', ]";
    AddState(567,new State(-405));
stringstates[568] = @"402 catch_clause: CATCH '(' type_name . identifier_opt ')' block ";
    AddState(568,new State(new int[]{130,567,41,-404},new int[]{-250,569}));
stringstates[569] = @"402 catch_clause: CATCH '(' type_name identifier_opt . ')' block ";
    AddState(569,new State(new int[]{41,570}));
stringstates[570] = @"402 catch_clause: CATCH '(' type_name identifier_opt ')' . block ";
    AddState(570,new State(-313,new int[]{-172,571,-212,205}));
stringstates[571] = @"402 catch_clause: CATCH '(' type_name identifier_opt ')' block .		[FINALLY, CATCH, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(571,new State(-402));
stringstates[572] = @"14 type_name: qualified_identifier .		[IDENTIFIER, ')', '(', ']', ',', WHERE, '{', ';', ]";
    AddState(572,new State(-14));
stringstates[573] = @"403 catch_clause: CATCH block .		[FINALLY, CATCH, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(573,new State(-403));
stringstates[574] = @"397 try_statement: TRY block finally_clause .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(574,new State(-397));
stringstates[575] = @"399 catch_clauses: catch_clause .		[FINALLY, CATCH, IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(575,new State(-399));
stringstates[576] = @"306 embedded_statement: checked_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(576,new State(-306));
stringstates[577] = @"307 embedded_statement: unchecked_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(577,new State(-307));
stringstates[578] = @"308 embedded_statement: lock_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(578,new State(-308));
stringstates[579] = @"409 lock_statement: LOCK . '(' expression ')' embedded_statement ";
    AddState(579,new State(new int[]{40,580}));
stringstates[580] = @"409 lock_statement: LOCK '(' . expression ')' embedded_statement ";
    AddState(580,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,581,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[581] = @"409 lock_statement: LOCK '(' expression . ')' embedded_statement ";
    AddState(581,new State(new int[]{41,582}));
stringstates[582] = @"409 lock_statement: LOCK '(' expression ')' . embedded_statement ";
    AddState(582,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,583,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[583] = @"409 lock_statement: LOCK '(' expression ')' embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(583,new State(-409));
stringstates[584] = @"309 embedded_statement: using_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(584,new State(-309));
stringstates[585] = @"410 using_statement: USING . '(' resource_acquisition ')' embedded_statement ";
    AddState(585,new State(new int[]{40,586}));
stringstates[586] = @"410 using_statement: USING '(' . resource_acquisition ')' embedded_statement ";
    AddState(586,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,221,430,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-251,587,-216,607,-59,219,-61,167,-72,168,-62,169,-63,418,-65,117,-69,118,-66,128,-64,419,-71,176,-33,608,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-94,609,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-102,138,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342},new int[]{221,-262}));
stringstates[587] = @"410 using_statement: USING '(' resource_acquisition . ')' embedded_statement ";
    AddState(587,new State(new int[]{41,588}));
stringstates[588] = @"410 using_statement: USING '(' resource_acquisition ')' . embedded_statement ";
    AddState(588,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,589,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[589] = @"410 using_statement: USING '(' resource_acquisition ')' embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(589,new State(-410));
stringstates[590] = @"310 embedded_statement: unsafe_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(590,new State(-310));
stringstates[591] = @"364 unsafe_statement: UNSAFE . block ";
    AddState(591,new State(-313,new int[]{-172,592,-212,205}));
stringstates[592] = @"364 unsafe_statement: UNSAFE block .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(592,new State(-364));
stringstates[593] = @"311 embedded_statement: fixed_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(593,new State(-311));
stringstates[594] = @"414 fixed_statement: FIXED . '(' type fixed_pointer_declarators ')' @3 embedded_statement ";
    AddState(594,new State(new int[]{40,595}));
stringstates[595] = @"414 fixed_statement: FIXED '(' . type fixed_pointer_declarators ')' @3 embedded_statement ";
    AddState(595,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,596,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[596] = @"414 fixed_statement: FIXED '(' type . fixed_pointer_declarators ')' @3 embedded_statement ";
    AddState(596,new State(new int[]{130,603},new int[]{-252,597,-254,606}));
stringstates[597] = @"414 fixed_statement: FIXED '(' type fixed_pointer_declarators . ')' @3 embedded_statement 
416 fixed_pointer_declarators: fixed_pointer_declarators . ',' fixed_pointer_declarator ";
    AddState(597,new State(new int[]{41,598,44,601}));
stringstates[598] = @"414 fixed_statement: FIXED '(' type fixed_pointer_declarators ')' . @3 embedded_statement ";
    AddState(598,new State(-413,new int[]{-253,599}));
stringstates[599] = @"414 fixed_statement: FIXED '(' type fixed_pointer_declarators ')' @3 . embedded_statement ";
    AddState(599,new State(new int[]{59,441,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,449,205,451,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,166,472,197,481,212,495,152,501,163,509,164,520,140,530,148,533,165,536,188,545,199,550,201,554,173,579,208,585,206,591,161,594,123,-313},new int[]{-199,600,-172,439,-212,205,-200,440,-201,442,-220,443,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276,-202,470,-221,471,-222,480,-203,493,-229,494,-230,500,-231,508,-232,519,-204,528,-241,529,-242,532,-243,535,-244,544,-245,549,-205,553,-206,576,-207,577,-208,578,-209,584,-210,590,-211,593}));
stringstates[600] = @"414 fixed_statement: FIXED '(' type fixed_pointer_declarators ')' @3 embedded_statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ELSE, ]";
    AddState(600,new State(-414));
stringstates[601] = @"416 fixed_pointer_declarators: fixed_pointer_declarators ',' . fixed_pointer_declarator ";
    AddState(601,new State(new int[]{130,603},new int[]{-254,602}));
stringstates[602] = @"416 fixed_pointer_declarators: fixed_pointer_declarators ',' fixed_pointer_declarator .		[')', ',', ]";
    AddState(602,new State(-416));
stringstates[603] = @"417 fixed_pointer_declarator: IDENTIFIER . '=' expression ";
    AddState(603,new State(new int[]{61,604}));
stringstates[604] = @"417 fixed_pointer_declarator: IDENTIFIER '=' . expression ";
    AddState(604,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,605,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[605] = @"417 fixed_pointer_declarator: IDENTIFIER '=' expression .		[')', ',', ]";
    AddState(605,new State(-417));
stringstates[606] = @"415 fixed_pointer_declarators: fixed_pointer_declarator .		[')', ',', ]";
    AddState(606,new State(-415));
stringstates[607] = @"411 resource_acquisition: local_variable_declaration .		[')', ]";
    AddState(607,new State(-411));
stringstates[608] = @"14 type_name: qualified_identifier .		['?', IDENTIFIER, ]
61 array_type: qualified_identifier . rank_specifier 
109 element_access: qualified_identifier . '[' expression_list ']' 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ')', ]";
    AddState(608,new State(new int[]{91,141,40,421,129,171,63,-14,130,-14,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159,42,-159,47,-159,37,-159,43,-159,45,-159,252,-159,248,-159,60,-159,62,-159,256,-159,257,-159,172,-159,137,-159,254,-159,255,-159,38,-159,94,-159,124,-159,258,-159,259,-159,246,-159,41,-159},new int[]{-91,179},new int[]{63,-159}));
stringstates[609] = @"412 resource_acquisition: expression .		[')', ]";
    AddState(609,new State(-412));
stringstates[610] = @"374 for_iterator_opt: for_iterator .		[')', ]";
    AddState(610,new State(-374));
stringstates[611] = @"378 for_iterator: statement_expression_list .		[')', ]
380 statement_expression_list: statement_expression_list . ',' statement_expression ";
    AddState(611,new State(new int[]{44,612,41,-378}));
stringstates[612] = @"380 statement_expression_list: statement_expression_list ',' . statement_expression ";
    AddState(612,new State(new int[]{200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,40,68,130,157,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-220,613,-102,445,-99,446,-73,82,-75,83,-74,91,-100,94,-101,112,-97,447,-98,63,-33,479,-82,145,-81,146,-84,154,-37,180,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,448,-109,229,-110,234,-111,241,-112,246,-113,251,-63,114,-65,117,-69,118,-66,128,-64,133,-161,453,-142,454,-143,49,-122,50,-121,466,-123,467,-140,258,-144,263,-145,468,-146,469,-141,276}));
stringstates[613] = @"380 statement_expression_list: statement_expression_list ',' statement_expression .		[',', ';', ')', ]";
    AddState(613,new State(-380));
stringstates[614] = @"379 statement_expression_list: statement_expression .		[',', ';', ')', ]";
    AddState(614,new State(-379));
stringstates[615] = @"372 for_condition_opt: for_condition .		[';', ]";
    AddState(615,new State(-372));
stringstates[616] = @"377 for_condition: boolean_expression .		[';', ]";
    AddState(616,new State(-377));
stringstates[617] = @"370 for_initializer_opt: for_initializer .		[';', ]";
    AddState(617,new State(-370));
stringstates[618] = @"375 for_initializer: local_variable_declaration .		[';', ]";
    AddState(618,new State(-375));
stringstates[619] = @"376 for_initializer: statement_expression_list .		[';', ]
380 statement_expression_list: statement_expression_list . ',' statement_expression ";
    AddState(619,new State(new int[]{44,612,59,-376}));
stringstates[620] = @"357 switch_labels: switch_labels switch_label .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, CASE, '{', ]";
    AddState(620,new State(-357));
stringstates[621] = @"317 statement_list: statement .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, '{', '}', CASE, ]";
    AddState(621,new State(-317));
stringstates[622] = @"103 default_expression: DEFAULT . '(' type ')' 
359 switch_label: DEFAULT . ':' ";
    AddState(622,new State(new int[]{40,231,58,623}));
stringstates[623] = @"359 switch_label: DEFAULT ':' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, CASE, '{', ]";
    AddState(623,new State(-359));
stringstates[624] = @"358 switch_label: CASE . constant_expression ':' ";
    AddState(624,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-195,625,-94,44,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[625] = @"358 switch_label: CASE constant_expression . ':' ";
    AddState(625,new State(new int[]{58,626}));
stringstates[626] = @"358 switch_label: CASE constant_expression ':' .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, CASE, '{', ]";
    AddState(626,new State(-358));
stringstates[627] = @"356 switch_labels: switch_label .		[IDENTIFIER, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, FROM, CONST, ';', TRUE, FALSE, INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, STRING_LITERAL, NULL_LITERAL, MLSTRING_LITERAL, NEW, '(', error, THIS, BASE, DELEGATE, DEFAULT, TYPEOF, SIZEOF, CHECKED, UNCHECKED, '!', '~', '+', '-', '*', PLUSPLUS, MINUSMINUS, '&', IF, SWITCH, WHILE, DO, FOR, FOREACH, BREAK, CONTINUE, GOTO, RETURN, THROW, TRY, LOCK, USING, UNSAFE, FIXED, CASE, '{', ]";
    AddState(627,new State(-356));
stringstates[628] = @"359 switch_label: DEFAULT . ':' ";
    AddState(628,new State(new int[]{58,623}));
stringstates[629] = @"353 switch_sections: switch_section .		[CASE, DEFAULT, '}', ]";
    AddState(629,new State(-353));
stringstates[630] = @"527 method_body: ';' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(630,new State(-527));
stringstates[631] = @"520 formal_parameter_list_opt: formal_parameter_list . arglist_opt 
529 formal_parameter_list: formal_parameter_list . ',' formal_parameter ";
    AddState(631,new State(new int[]{44,633,41,-522},new int[]{-276,632}));
stringstates[632] = @"520 formal_parameter_list_opt: formal_parameter_list arglist_opt .		[')', ]";
    AddState(632,new State(-520));
stringstates[633] = @"529 formal_parameter_list: formal_parameter_list ',' . formal_parameter 
523 arglist_opt: ',' . ARGLIST ";
    AddState(633,new State(new int[]{214,635,91,649,198,665,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-53,634,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[634] = @"529 formal_parameter_list: formal_parameter_list ',' formal_parameter .		[',', ')', ']', ]";
    AddState(634,new State(-529));
stringstates[635] = @"523 arglist_opt: ',' ARGLIST .		[')', ]";
    AddState(635,new State(-523));
stringstates[636] = @"530 formal_parameter: fixed_parameter .		[',', ')', ']', ]";
    AddState(636,new State(-530));
stringstates[637] = @"533 fixed_parameter: attributes_opt . parameter_modifier_opt type IDENTIFIER 
537 parameter_array: attributes_opt . PARAMS type IDENTIFIER ";
    AddState(637,new State(new int[]{182,641,187,644,180,645,189,-534,141,-534,191,-534,207,-534,169,-534,203,-534,174,-534,204,-534,144,-534,162,-534,153,-534,149,-534,139,-534,178,-534,195,-534,130,-534},new int[]{-80,638}));
stringstates[638] = @"533 fixed_parameter: attributes_opt parameter_modifier_opt . type IDENTIFIER ";
    AddState(638,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,639,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[639] = @"533 fixed_parameter: attributes_opt parameter_modifier_opt type . IDENTIFIER ";
    AddState(639,new State(new int[]{130,640}));
stringstates[640] = @"533 fixed_parameter: attributes_opt parameter_modifier_opt type IDENTIFIER .		[',', ')', ']', ]";
    AddState(640,new State(-533));
stringstates[641] = @"537 parameter_array: attributes_opt PARAMS . type IDENTIFIER ";
    AddState(641,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,642,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[642] = @"537 parameter_array: attributes_opt PARAMS type . IDENTIFIER ";
    AddState(642,new State(new int[]{130,643}));
stringstates[643] = @"537 parameter_array: attributes_opt PARAMS type IDENTIFIER .		[',', ')', ']', ]";
    AddState(643,new State(-537));
stringstates[644] = @"535 parameter_modifier_opt: REF .		[SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, ]";
    AddState(644,new State(-535));
stringstates[645] = @"536 parameter_modifier_opt: OUT .		[SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, ]";
    AddState(645,new State(-536));
stringstates[646] = @"423 attributes_opt: attributes .		[NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]";
    AddState(646,new State(-423));
stringstates[647] = @"667 attributes: attribute_sections .		[NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]
669 attribute_sections: attribute_sections . attribute_section ";
    AddState(647,new State(new int[]{91,649,175,-667,136,-667,158,-667,171,-667,176,-667,181,-667,183,-667,184,-667,185,-667,186,-667,190,-667,194,-667,206,-667,209,-667,211,-667,146,-667,196,-667,170,-667,155,-667,151,-667,128,-667,147,-667,210,-667,156,-667,126,-667,189,-667,141,-667,191,-667,207,-667,169,-667,203,-667,174,-667,204,-667,144,-667,162,-667,153,-667,149,-667,139,-667,178,-667,195,-667,130,-667,167,-667,157,-667,182,-667,187,-667,180,-667,239,-667,240,-667,216,-667,217,-667},new int[]{-315,648}));
stringstates[648] = @"669 attribute_sections: attribute_sections attribute_section .		['[', NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]";
    AddState(648,new State(-669));
stringstates[649] = @"670 attribute_section: '[' . attribute_list ']' 
671 attribute_section: '[' . attribute_list ',' ']' ";
    AddState(649,new State(new int[]{130,157},new int[]{-316,650,-317,663,-318,655,-71,662,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[650] = @"670 attribute_section: '[' attribute_list . ']' 
671 attribute_section: '[' attribute_list . ',' ']' 
673 attribute_list: attribute_list . ',' attribute ";
    AddState(650,new State(new int[]{93,651,44,652}));
stringstates[651] = @"670 attribute_section: '[' attribute_list ']' .		['[', NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]";
    AddState(651,new State(-670));
stringstates[652] = @"671 attribute_section: '[' attribute_list ',' . ']' 
673 attribute_list: attribute_list ',' . attribute ";
    AddState(652,new State(new int[]{93,653,130,157},new int[]{-317,654,-318,655,-71,662,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[653] = @"671 attribute_section: '[' attribute_list ',' ']' .		['[', NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]";
    AddState(653,new State(-671));
stringstates[654] = @"673 attribute_list: attribute_list ',' attribute .		[']', ',', ]";
    AddState(654,new State(-673));
stringstates[655] = @"674 attribute: attribute_name . attribute_arguments_opt ";
    AddState(655,new State(new int[]{40,658,93,-675,44,-675},new int[]{-319,656,-320,657}));
stringstates[656] = @"674 attribute: attribute_name attribute_arguments_opt .		[']', ',', ]";
    AddState(656,new State(-674));
stringstates[657] = @"676 attribute_arguments_opt: attribute_arguments .		[']', ',', ]";
    AddState(657,new State(-676));
stringstates[658] = @"678 attribute_arguments: '(' . expression_list_opt ')' ";
    AddState(658,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,41,-110,221,-262},new int[]{-120,659,-119,661,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[659] = @"678 attribute_arguments: '(' expression_list_opt . ')' ";
    AddState(659,new State(new int[]{41,660}));
stringstates[660] = @"678 attribute_arguments: '(' expression_list_opt ')' .		[']', ',', ]";
    AddState(660,new State(-678));
stringstates[661] = @"111 expression_list_opt: expression_list .		[')', ]
113 expression_list: expression_list . ',' expression ";
    AddState(661,new State(new int[]{44,61,41,-111}));
stringstates[662] = @"677 attribute_name: type_name .		['(', ']', ',', ]";
    AddState(662,new State(-677));
stringstates[663] = @"672 attribute_list: attribute .		[']', ',', ]";
    AddState(663,new State(-672));
stringstates[664] = @"668 attribute_sections: attribute_section .		['[', NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, PARAMS, REF, OUT, GET, SET, ADD, REMOVE, ]";
    AddState(664,new State(-668));
stringstates[665] = @"531 formal_parameter: THIS . fixed_parameter ";
    AddState(665,new State(new int[]{91,649,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-54,666,-256,667,-258,646,-314,647,-315,664}));
stringstates[666] = @"531 formal_parameter: THIS fixed_parameter .		[',', ')', ']', ]";
    AddState(666,new State(-531));
stringstates[667] = @"533 fixed_parameter: attributes_opt . parameter_modifier_opt type IDENTIFIER ";
    AddState(667,new State(new int[]{187,644,180,645,189,-534,141,-534,191,-534,207,-534,169,-534,203,-534,174,-534,204,-534,144,-534,162,-534,153,-534,149,-534,139,-534,178,-534,195,-534,130,-534},new int[]{-80,638}));
stringstates[668] = @"532 formal_parameter: parameter_array .		[',', ')', ']', ]";
    AddState(668,new State(-532));
stringstates[669] = @"528 formal_parameter_list: formal_parameter .		[',', ')', ']', ]";
    AddState(669,new State(-528));
stringstates[670] = @"521 formal_parameter_list_opt: ARGLIST .		[')', ]";
    AddState(670,new State(-521));
stringstates[671] = @"627 variable_initializer_list: variable_initializer .		[',', '}', ]";
    AddState(671,new State(-627));
stringstates[672] = @"63 rank_specifiers_opt: rank_specifier . rank_specifiers_opt ";
    AddState(672,new State(new int[]{129,171,123,-62,60,-62,40,-62,46,-62,91,-62,260,-62,261,-62,262,-62,61,-62,241,-62,242,-62,243,-62,244,-62,245,-62,249,-62,250,-62,251,-62,253,-62,247,-62,42,-62,47,-62,37,-62,43,-62,45,-62,252,-62,248,-62,62,-62,256,-62,257,-62,172,-62,137,-62,254,-62,255,-62,38,-62,94,-62,124,-62,258,-62,259,-62,63,-62,246,-62,59,-62,44,-62,93,-62,41,-62,125,-62,58,-62,221,-62,222,-62,213,-62,223,-62,220,-62,218,-62,227,-62,228,-62,224,-62,219,-62,225,-62,226,-62,229,-62},new int[]{-92,673,-91,672}));
stringstates[673] = @"63 rank_specifiers_opt: rank_specifier rank_specifiers_opt .		['{', '<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(673,new State(-63));
stringstates[674] = @"147 array_creation_expression: NEW array_type . array_initializer 
58 array_type: array_type . rank_specifier 
30 type: array_type .		['(', '{', '<', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(674,new State(new int[]{123,104,129,171,40,-30,60,-30,46,-30,91,-30,260,-30,261,-30,262,-30,61,-30,241,-30,242,-30,243,-30,244,-30,245,-30,249,-30,250,-30,251,-30,253,-30,247,-30,42,-30,47,-30,37,-30,43,-30,45,-30,252,-30,248,-30,62,-30,256,-30,257,-30,172,-30,137,-30,254,-30,255,-30,38,-30,94,-30,124,-30,258,-30,259,-30,63,-30,246,-30,59,-30,44,-30,93,-30,41,-30,125,-30,58,-30,221,-30,222,-30,213,-30,223,-30,220,-30,218,-30,227,-30,228,-30,224,-30,219,-30,225,-30,226,-30,229,-30},new int[]{-139,675,-91,184},new int[]{123,-30}));
stringstates[675] = @"147 array_creation_expression: NEW array_type array_initializer .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(675,new State(-147));
stringstates[676] = @"148 array_creation_expression: NEW rank_specifier . array_initializer ";
    AddState(676,new State(new int[]{123,104},new int[]{-139,677}));
stringstates[677] = @"148 array_creation_expression: NEW rank_specifier array_initializer .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(677,new State(-148));
stringstates[678] = @"89 anon_object_creation_expression: NEW anon_object_init .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(678,new State(-89));
stringstates[679] = @"123 object_creation_expression: NEW type . '(' argument_list_opt ')' object_col_init_opt 
124 object_creation_expression: NEW type . object_col_init_opt ";
    AddState(679,new State(new int[]{40,680,123,686,60,-126,46,-126,91,-126,260,-126,261,-126,262,-126,61,-126,241,-126,242,-126,243,-126,244,-126,245,-126,249,-126,250,-126,251,-126,253,-126,247,-126,42,-126,47,-126,37,-126,43,-126,45,-126,252,-126,248,-126,62,-126,256,-126,257,-126,172,-126,137,-126,254,-126,255,-126,38,-126,94,-126,124,-126,258,-126,259,-126,63,-126,246,-126,59,-126,44,-126,93,-126,41,-126,125,-126,58,-126,221,-126,222,-126,213,-126,223,-126,220,-126,218,-126,227,-126,228,-126,224,-126,219,-126,225,-126,226,-126,229,-126},new int[]{-126,711,-127,684,-128,685,-129,698},new int[]{40,-126}));
stringstates[680] = @"123 object_creation_expression: NEW type '(' . argument_list_opt ')' object_col_init_opt ";
    AddState(680,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,41,-106,221,-262},new int[]{-118,681,-95,78,-96,424,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[681] = @"123 object_creation_expression: NEW type '(' argument_list_opt . ')' object_col_init_opt ";
    AddState(681,new State(new int[]{41,682}));
stringstates[682] = @"123 object_creation_expression: NEW type '(' argument_list_opt ')' . object_col_init_opt ";
    AddState(682,new State(new int[]{123,686,60,-126,40,-126,46,-126,91,-126,260,-126,261,-126,262,-126,61,-126,241,-126,242,-126,243,-126,244,-126,245,-126,249,-126,250,-126,251,-126,253,-126,247,-126,42,-126,47,-126,37,-126,43,-126,45,-126,252,-126,248,-126,62,-126,256,-126,257,-126,172,-126,137,-126,254,-126,255,-126,38,-126,94,-126,124,-126,258,-126,259,-126,63,-126,246,-126,59,-126,44,-126,93,-126,41,-126,125,-126,58,-126,221,-126,222,-126,213,-126,223,-126,220,-126,218,-126,227,-126,228,-126,224,-126,219,-126,225,-126,226,-126,229,-126},new int[]{-126,683,-127,684,-128,685,-129,698}));
stringstates[683] = @"123 object_creation_expression: NEW type '(' argument_list_opt ')' object_col_init_opt .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(683,new State(-123));
stringstates[684] = @"127 object_col_init_opt: object_col_init .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(684,new State(-127));
stringstates[685] = @"128 object_col_init: object_init .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(685,new State(-128));
stringstates[686] = @"130 object_init: '{' . mem_init_list_opt '}' 
131 object_init: '{' . mem_init_list ',' '}' 
139 col_init: '{' . elem_init_list '}' 
140 col_init: '{' . elem_init_list ',' '}' ";
    AddState(686,new State(new int[]{130,709,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,705,125,-132,221,-262},new int[]{-130,687,-131,689,-134,699,-132,708,-135,710,-136,704,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-163,336,-167,337,-164,341,-173,342}));
stringstates[687] = @"130 object_init: '{' mem_init_list_opt . '}' ";
    AddState(687,new State(new int[]{125,688}));
stringstates[688] = @"130 object_init: '{' mem_init_list_opt '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(688,new State(-130));
stringstates[689] = @"131 object_init: '{' mem_init_list . ',' '}' 
133 mem_init_list_opt: mem_init_list .		['}', ]
135 mem_init_list: mem_init_list . ',' mem_init ";
    AddState(689,new State(new int[]{44,690,125,-133}));
stringstates[690] = @"131 object_init: '{' mem_init_list ',' . '}' 
135 mem_init_list: mem_init_list ',' . mem_init ";
    AddState(690,new State(new int[]{125,691,130,693},new int[]{-132,692}));
stringstates[691] = @"131 object_init: '{' mem_init_list ',' '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(691,new State(-131));
stringstates[692] = @"135 mem_init_list: mem_init_list ',' mem_init .		[',', '}', ]";
    AddState(692,new State(-135));
stringstates[693] = @"136 mem_init: IDENTIFIER . '=' init_value ";
    AddState(693,new State(new int[]{61,694}));
stringstates[694] = @"136 mem_init: IDENTIFIER '=' . init_value ";
    AddState(694,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,686,221,-262},new int[]{-133,695,-94,696,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-127,697,-128,685,-129,698}));
stringstates[695] = @"136 mem_init: IDENTIFIER '=' init_value .		[',', '}', ]";
    AddState(695,new State(-136));
stringstates[696] = @"137 init_value: expression .		[',', '}', ]";
    AddState(696,new State(-137));
stringstates[697] = @"138 init_value: object_col_init .		[',', '}', ]";
    AddState(697,new State(-138));
stringstates[698] = @"129 object_col_init: col_init .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(698,new State(-129));
stringstates[699] = @"139 col_init: '{' elem_init_list . '}' 
140 col_init: '{' elem_init_list . ',' '}' 
142 elem_init_list: elem_init_list . ',' elem_init ";
    AddState(699,new State(new int[]{125,700,44,701}));
stringstates[700] = @"139 col_init: '{' elem_init_list '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(700,new State(-139));
stringstates[701] = @"140 col_init: '{' elem_init_list ',' . '}' 
142 elem_init_list: elem_init_list ',' . elem_init ";
    AddState(701,new State(new int[]{125,702,40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,123,705,221,-262},new int[]{-135,703,-136,704,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-142,306,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-163,336,-167,337,-164,341,-173,342}));
stringstates[702] = @"140 col_init: '{' elem_init_list ',' '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(702,new State(-140));
stringstates[703] = @"142 elem_init_list: elem_init_list ',' elem_init .		['}', ',', ]";
    AddState(703,new State(-142));
stringstates[704] = @"143 elem_init: nonassign_expression .		['}', ',', ]";
    AddState(704,new State(-143));
stringstates[705] = @"144 elem_init: '{' . expression_list '}' ";
    AddState(705,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-119,706,-94,144,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[706] = @"144 elem_init: '{' expression_list . '}' 
113 expression_list: expression_list . ',' expression ";
    AddState(706,new State(new int[]{125,707,44,61}));
stringstates[707] = @"144 elem_init: '{' expression_list '}' .		['}', ',', ]";
    AddState(707,new State(-144));
stringstates[708] = @"134 mem_init_list: mem_init .		[',', '}', ]";
    AddState(708,new State(-134));
stringstates[709] = @"136 mem_init: IDENTIFIER . '=' init_value 
15 member_name: IDENTIFIER . type_list_opt 
225 conditional_expression: IDENTIFIER . '?' expression ':' expression 
257 impltype_lambda_parameter: IDENTIFIER .		[LAMBDA, ]";
    AddState(709,new State(new int[]{61,694,63,150,60,158,263,-257,46,-18,91,-18,40,-18,260,-18,261,-18,262,-18,42,-18,47,-18,37,-18,43,-18,45,-18,252,-18,248,-18,62,-18,256,-18,257,-18,172,-18,137,-18,254,-18,255,-18,38,-18,94,-18,124,-18,258,-18,259,-18,246,-18,125,-18,44,-18},new int[]{-7,149},new int[]{60,-18,63,-18}));
stringstates[710] = @"141 elem_init_list: elem_init .		['}', ',', ]";
    AddState(710,new State(-141));
stringstates[711] = @"124 object_creation_expression: NEW type object_col_init_opt .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(711,new State(-124));
stringstates[712] = @"125 object_creation_expression: NEW error .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(712,new State(-125));
stringstates[713] = @"90 anon_object_init: '{' . mem_dec_list_opt '}' 
91 anon_object_init: '{' . mem_dec_list ',' '}' ";
    AddState(713,new State(new int[]{130,721,40,726,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,125,-92},new int[]{-115,714,-116,716,-117,729,-33,720,-82,145,-81,146,-84,154,-37,180,-101,724,-97,725,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251}));
stringstates[714] = @"90 anon_object_init: '{' mem_dec_list_opt . '}' ";
    AddState(714,new State(new int[]{125,715}));
stringstates[715] = @"90 anon_object_init: '{' mem_dec_list_opt '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(715,new State(-90));
stringstates[716] = @"91 anon_object_init: '{' mem_dec_list . ',' '}' 
93 mem_dec_list_opt: mem_dec_list .		['}', ]
95 mem_dec_list: mem_dec_list . ',' mem_dec ";
    AddState(716,new State(new int[]{44,717,125,-93}));
stringstates[717] = @"91 anon_object_init: '{' mem_dec_list ',' . '}' 
95 mem_dec_list: mem_dec_list ',' . mem_dec ";
    AddState(717,new State(new int[]{125,718,130,721,40,726,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,127,113,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252},new int[]{-117,719,-33,720,-82,145,-81,146,-84,154,-37,180,-101,724,-97,725,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251}));
stringstates[718] = @"91 anon_object_init: '{' mem_dec_list ',' '}' .		['<', '(', '.', '[', PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(718,new State(-91));
stringstates[719] = @"95 mem_dec_list: mem_dec_list ',' mem_dec .		[',', '}', ]";
    AddState(719,new State(-95));
stringstates[720] = @"96 mem_dec: qualified_identifier .		[',', '}', ]
109 element_access: qualified_identifier . '[' expression_list ']' 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' ";
    AddState(720,new State(new int[]{91,141,40,421,44,-96,125,-96}));
stringstates[721] = @"15 member_name: IDENTIFIER . type_list_opt 
98 mem_dec: IDENTIFIER . '=' expression ";
    AddState(721,new State(new int[]{61,722,60,158,46,-18,91,-18,40,-18,44,-18,125,-18},new int[]{-7,149}));
stringstates[722] = @"98 mem_dec: IDENTIFIER '=' . expression ";
    AddState(722,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,723,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[723] = @"98 mem_dec: IDENTIFIER '=' expression .		[',', '}', ]";
    AddState(723,new State(-98));
stringstates[724] = @"97 mem_dec: member_access .		[',', '}', ]
76 primary_expression_no_parenthesis: member_access .		['<', '(', '.', '[', ]";
    AddState(724,new State(new int[]{44,-97,125,-97,60,-76,40,-76,46,-76,91,-76}));
stringstates[725] = @"100 member_access: primary_expression . '.' IDENTIFIER 
108 element_access: primary_expression . '[' expression_list ']' ";
    AddState(725,new State(new int[]{46,56,91,58}));
stringstates[726] = @"99 parenthesized_expression: '(' . expression ')' ";
    AddState(726,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-94,727,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[727] = @"99 parenthesized_expression: '(' expression . ')' ";
    AddState(727,new State(new int[]{41,728}));
stringstates[728] = @"99 parenthesized_expression: '(' expression ')' .		['.', '[', ]";
    AddState(728,new State(-99));
stringstates[729] = @"94 mem_dec_list: mem_dec .		[',', '}', ]";
    AddState(729,new State(-94));
stringstates[730] = @"178 cast_expression: '(' multiplicative_expression . '*' ')' unary_expression 
197 additive_expression: multiplicative_expression .		['+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ')', ]
194 multiplicative_expression: multiplicative_expression . '*' unary_expression 
195 multiplicative_expression: multiplicative_expression . '/' unary_expression 
196 multiplicative_expression: multiplicative_expression . '%' unary_expression ";
    AddState(730,new State(new int[]{42,731,47,302,37,304,43,-197,45,-197,252,-197,248,-197,60,-197,62,-197,256,-197,257,-197,172,-197,137,-197,254,-197,255,-197,38,-197,94,-197,124,-197,258,-197,259,-197,63,-197,246,-197,41,-197}));
stringstates[731] = @"178 cast_expression: '(' multiplicative_expression '*' . ')' unary_expression 
194 multiplicative_expression: multiplicative_expression '*' . unary_expression ";
    AddState(731,new State(new int[]{41,732,40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,301,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[732] = @"178 cast_expression: '(' multiplicative_expression '*' ')' . unary_expression ";
    AddState(732,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,733,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[733] = @"178 cast_expression: '(' multiplicative_expression '*' ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(733,new State(-178));
stringstates[734] = @"179 cast_expression: '(' qualified_identifier . rank_specifier type_quals_opt ')' unary_expression 
180 cast_expression: '(' qualified_identifier . '?' rank_specifier ')' unary_expression 
185 cast_expression: '(' qualified_identifier . '?' ')' unary_expression 
109 element_access: qualified_identifier . '[' expression_list ']' 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ')', ]";
    AddState(734,new State(new int[]{63,744,91,141,40,421,129,171,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159,42,-159,47,-159,37,-159,43,-159,45,-159,252,-159,248,-159,60,-159,62,-159,256,-159,257,-159,172,-159,137,-159,254,-159,255,-159,38,-159,94,-159,124,-159,258,-159,259,-159,246,-159,41,-159},new int[]{-91,735},new int[]{63,-159}));
stringstates[735] = @"179 cast_expression: '(' qualified_identifier rank_specifier . type_quals_opt ')' unary_expression ";
    AddState(735,new State(new int[]{129,171,42,742,41,-187},new int[]{-148,736,-149,739,-150,743,-91,741}));
stringstates[736] = @"179 cast_expression: '(' qualified_identifier rank_specifier type_quals_opt . ')' unary_expression ";
    AddState(736,new State(new int[]{41,737}));
stringstates[737] = @"179 cast_expression: '(' qualified_identifier rank_specifier type_quals_opt ')' . unary_expression ";
    AddState(737,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,738,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[738] = @"179 cast_expression: '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(738,new State(-179));
stringstates[739] = @"188 type_quals_opt: type_quals .		[')', ]
190 type_quals: type_quals . type_qual ";
    AddState(739,new State(new int[]{129,171,42,742,41,-188},new int[]{-150,740,-91,741}));
stringstates[740] = @"190 type_quals: type_quals type_qual .		[RANK_SPECIFIER, '*', ')', ]";
    AddState(740,new State(-190));
stringstates[741] = @"191 type_qual: rank_specifier .		[RANK_SPECIFIER, '*', ')', ]";
    AddState(741,new State(-191));
stringstates[742] = @"192 type_qual: '*' .		[RANK_SPECIFIER, '*', ')', ]";
    AddState(742,new State(-192));
stringstates[743] = @"189 type_quals: type_qual .		[RANK_SPECIFIER, '*', ')', ]";
    AddState(743,new State(-189));
stringstates[744] = @"180 cast_expression: '(' qualified_identifier '?' . rank_specifier ')' unary_expression 
185 cast_expression: '(' qualified_identifier '?' . ')' unary_expression ";
    AddState(744,new State(new int[]{41,748,129,171},new int[]{-91,745}));
stringstates[745] = @"180 cast_expression: '(' qualified_identifier '?' rank_specifier . ')' unary_expression ";
    AddState(745,new State(new int[]{41,746}));
stringstates[746] = @"180 cast_expression: '(' qualified_identifier '?' rank_specifier ')' . unary_expression ";
    AddState(746,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,747,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[747] = @"180 cast_expression: '(' qualified_identifier '?' rank_specifier ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(747,new State(-180));
stringstates[748] = @"185 cast_expression: '(' qualified_identifier '?' ')' . unary_expression ";
    AddState(748,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,749,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[749] = @"185 cast_expression: '(' qualified_identifier '?' ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(749,new State(-185));
stringstates[750] = @"181 cast_expression: '(' primitive_type . type_quals_opt ')' unary_expression 
183 cast_expression: '(' primitive_type . '?' ')' unary_expression 
184 cast_expression: '(' primitive_type . '?' rank_specifier ')' unary_expression 
101 member_access: primitive_type . '.' IDENTIFIER ";
    AddState(750,new State(new int[]{63,754,46,115,129,171,42,742,41,-187},new int[]{-148,751,-149,739,-150,743,-91,741}));
stringstates[751] = @"181 cast_expression: '(' primitive_type type_quals_opt . ')' unary_expression ";
    AddState(751,new State(new int[]{41,752}));
stringstates[752] = @"181 cast_expression: '(' primitive_type type_quals_opt ')' . unary_expression ";
    AddState(752,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,753,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[753] = @"181 cast_expression: '(' primitive_type type_quals_opt ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(753,new State(-181));
stringstates[754] = @"183 cast_expression: '(' primitive_type '?' . ')' unary_expression 
184 cast_expression: '(' primitive_type '?' . rank_specifier ')' unary_expression ";
    AddState(754,new State(new int[]{41,755,129,171},new int[]{-91,757}));
stringstates[755] = @"183 cast_expression: '(' primitive_type '?' ')' . unary_expression ";
    AddState(755,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,756,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[756] = @"183 cast_expression: '(' primitive_type '?' ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(756,new State(-183));
stringstates[757] = @"184 cast_expression: '(' primitive_type '?' rank_specifier . ')' unary_expression ";
    AddState(757,new State(new int[]{41,758}));
stringstates[758] = @"184 cast_expression: '(' primitive_type '?' rank_specifier ')' . unary_expression ";
    AddState(758,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,759,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[759] = @"184 cast_expression: '(' primitive_type '?' rank_specifier ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(759,new State(-184));
stringstates[760] = @"182 cast_expression: '(' class_type . type_quals_opt ')' unary_expression 
102 member_access: class_type . '.' IDENTIFIER ";
    AddState(760,new State(new int[]{46,134,129,171,42,742,41,-187},new int[]{-148,761,-149,739,-150,743,-91,741}));
stringstates[761] = @"182 cast_expression: '(' class_type type_quals_opt . ')' unary_expression ";
    AddState(761,new State(new int[]{41,762}));
stringstates[762] = @"182 cast_expression: '(' class_type type_quals_opt ')' . unary_expression ";
    AddState(762,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,763,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[763] = @"182 cast_expression: '(' class_type type_quals_opt ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(763,new State(-182));
stringstates[764] = @"186 cast_expression: '(' VOID . type_quals_opt ')' unary_expression ";
    AddState(764,new State(new int[]{129,171,42,742,41,-187},new int[]{-148,765,-149,739,-150,743,-91,741}));
stringstates[765] = @"186 cast_expression: '(' VOID type_quals_opt . ')' unary_expression ";
    AddState(765,new State(new int[]{41,766}));
stringstates[766] = @"186 cast_expression: '(' VOID type_quals_opt ')' . unary_expression ";
    AddState(766,new State(new int[]{40,68,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277},new int[]{-142,767,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276}));
stringstates[767] = @"186 cast_expression: '(' VOID type_quals_opt ')' unary_expression .		['=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ';', ',', ']', ')', '}', ':', FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(767,new State(-186));
stringstates[768] = @"176 cast_expression: '(' IDENTIFIER . '?' ')' unary_expression_not_plusminus 
246 lambda_expression: '(' IDENTIFIER . ')' LAMBDA lambda_expression_body 
248 lambda_expression: '(' IDENTIFIER . ',' impltype_lambda_paramlist ')' LAMBDA lambda_expression_body 
15 member_name: IDENTIFIER . type_list_opt 
225 conditional_expression: IDENTIFIER . '?' expression ':' expression 
257 impltype_lambda_parameter: IDENTIFIER .		[LAMBDA, ]";
    AddState(768,new State(new int[]{63,70,41,769,44,772,60,158,263,-257,46,-18,91,-18,40,-18,129,-18,260,-18,261,-18,262,-18,61,-18,241,-18,242,-18,243,-18,244,-18,245,-18,249,-18,250,-18,251,-18,253,-18,247,-18,42,-18,47,-18,37,-18,43,-18,45,-18,252,-18,248,-18,62,-18,256,-18,257,-18,172,-18,137,-18,254,-18,255,-18,38,-18,94,-18,124,-18,258,-18,259,-18,246,-18,130,-18},new int[]{-7,149},new int[]{63,-18,60,-18,41,-18}));
stringstates[769] = @"246 lambda_expression: '(' IDENTIFIER ')' . LAMBDA lambda_expression_body ";
    AddState(769,new State(new int[]{263,770}));
stringstates[770] = @"246 lambda_expression: '(' IDENTIFIER ')' LAMBDA . lambda_expression_body ";
    AddState(770,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262,123,-313},new int[]{-166,771,-94,340,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-172,403,-212,205}));
stringstates[771] = @"246 lambda_expression: '(' IDENTIFIER ')' LAMBDA lambda_expression_body .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(771,new State(-246));
stringstates[772] = @"248 lambda_expression: '(' IDENTIFIER ',' . impltype_lambda_paramlist ')' LAMBDA lambda_expression_body ";
    AddState(772,new State(new int[]{130,779},new int[]{-168,773,-167,780}));
stringstates[773] = @"248 lambda_expression: '(' IDENTIFIER ',' impltype_lambda_paramlist . ')' LAMBDA lambda_expression_body 
255 impltype_lambda_paramlist: impltype_lambda_paramlist . ',' impltype_lambda_parameter ";
    AddState(773,new State(new int[]{41,774,44,777}));
stringstates[774] = @"248 lambda_expression: '(' IDENTIFIER ',' impltype_lambda_paramlist ')' . LAMBDA lambda_expression_body ";
    AddState(774,new State(new int[]{263,775}));
stringstates[775] = @"248 lambda_expression: '(' IDENTIFIER ',' impltype_lambda_paramlist ')' LAMBDA . lambda_expression_body ";
    AddState(775,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262,123,-313},new int[]{-166,776,-94,340,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-172,403,-212,205}));
stringstates[776] = @"248 lambda_expression: '(' IDENTIFIER ',' impltype_lambda_paramlist ')' LAMBDA lambda_expression_body .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(776,new State(-248));
stringstates[777] = @"255 impltype_lambda_paramlist: impltype_lambda_paramlist ',' . impltype_lambda_parameter ";
    AddState(777,new State(new int[]{130,779},new int[]{-167,778}));
stringstates[778] = @"255 impltype_lambda_paramlist: impltype_lambda_paramlist ',' impltype_lambda_parameter .		[')', ',', ]";
    AddState(778,new State(-255));
stringstates[779] = @"257 impltype_lambda_parameter: IDENTIFIER .		[')', ',', ]";
    AddState(779,new State(-257));
stringstates[780] = @"254 impltype_lambda_paramlist: impltype_lambda_parameter .		[')', ',', ]";
    AddState(780,new State(-254));
stringstates[781] = @"179 cast_expression: '(' qualified_identifier . rank_specifier type_quals_opt ')' unary_expression 
180 cast_expression: '(' qualified_identifier . '?' rank_specifier ')' unary_expression 
185 cast_expression: '(' qualified_identifier . '?' ')' unary_expression 
109 element_access: qualified_identifier . '[' expression_list ']' 
105 invocation_expression: qualified_identifier . '(' argument_list_opt ')' 
159 postfix_expression: qualified_identifier .		[PLUSPLUS, MINUSMINUS, ARROW, '=', PLUSEQ, MINUSEQ, STAREQ, DIVEQ, MODEQ, XOREQ, ANDEQ, OREQ, LTLTEQ, GTGTEQ, '*', '/', '%', '+', '-', LTLT, GTGT, '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, ')', ]
14 type_name: qualified_identifier .		['?', IDENTIFIER, ]
61 array_type: qualified_identifier . rank_specifier ";
    AddState(781,new State(new int[]{63,744,91,141,40,421,129,171,260,-159,261,-159,262,-159,61,-159,241,-159,242,-159,243,-159,244,-159,245,-159,249,-159,250,-159,251,-159,253,-159,247,-159,42,-159,47,-159,37,-159,43,-159,45,-159,252,-159,248,-159,60,-159,62,-159,256,-159,257,-159,172,-159,137,-159,254,-159,255,-159,38,-159,94,-159,124,-159,258,-159,259,-159,246,-159,41,-159,130,-14},new int[]{-91,782},new int[]{63,-159}));
stringstates[782] = @"179 cast_expression: '(' qualified_identifier rank_specifier . type_quals_opt ')' unary_expression 
61 array_type: qualified_identifier rank_specifier .		[RANK_SPECIFIER, IDENTIFIER, ]";
    AddState(782,new State(new int[]{129,171,42,742,130,-61,41,-187},new int[]{-148,736,-149,739,-150,743,-91,741},new int[]{129,-61}));
stringstates[783] = @"181 cast_expression: '(' primitive_type . type_quals_opt ')' unary_expression 
183 cast_expression: '(' primitive_type . '?' ')' unary_expression 
184 cast_expression: '(' primitive_type . '?' rank_specifier ')' unary_expression 
101 member_access: primitive_type . '.' IDENTIFIER 
36 simple_type: primitive_type . nullable_opt ";
    AddState(783,new State(new int[]{63,784,46,115,129,171,42,742,41,-187,130,-27},new int[]{-148,751,-89,173,-149,739,-150,743,-91,741},new int[]{129,-27}));
stringstates[784] = @"183 cast_expression: '(' primitive_type '?' . ')' unary_expression 
184 cast_expression: '(' primitive_type '?' . rank_specifier ')' unary_expression 
28 nullable_opt: '?' .		[RANK_SPECIFIER, IDENTIFIER, ]";
    AddState(784,new State(new int[]{41,755,129,171,130,-28},new int[]{-91,757},new int[]{129,-28}));
stringstates[785] = @"182 cast_expression: '(' class_type . type_quals_opt ')' unary_expression 
102 member_access: class_type . '.' IDENTIFIER 
37 simple_type: class_type .		[RANK_SPECIFIER, IDENTIFIER, ]";
    AddState(785,new State(new int[]{46,134,129,171,42,742,130,-37,41,-187},new int[]{-148,761,-149,739,-150,743,-91,741},new int[]{129,-37}));
stringstates[786] = @"245 lambda_expression: '(' lambda_paramlist_opt . ')' LAMBDA lambda_expression_body ";
    AddState(786,new State(new int[]{41,787}));
stringstates[787] = @"245 lambda_expression: '(' lambda_paramlist_opt ')' . LAMBDA lambda_expression_body ";
    AddState(787,new State(new int[]{263,788}));
stringstates[788] = @"245 lambda_expression: '(' lambda_paramlist_opt ')' LAMBDA . lambda_expression_body ";
    AddState(788,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262,123,-313},new int[]{-166,789,-94,340,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342,-172,403,-212,205}));
stringstates[789] = @"245 lambda_expression: '(' lambda_paramlist_opt ')' LAMBDA lambda_expression_body .		[';', ',', ']', ')', '}', ':', '<', '>', LEQ, GEQ, IS, AS, EQEQ, NOTEQ, '&', '^', '|', ANDAND, OROR, '?', QQ, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP, ON, EQUALS, INTO, ASCENDING, DESCENDING, BY, ]";
    AddState(789,new State(-245));
stringstates[790] = @"250 lambda_paramlist_opt: lambda_paramlist .		[')', ]";
    AddState(790,new State(-250));
stringstates[791] = @"251 lambda_paramlist: expltype_lambda_paramlist .		[')', ]
253 expltype_lambda_paramlist: expltype_lambda_paramlist . ',' expltype_lambda_parameter ";
    AddState(791,new State(new int[]{44,792,41,-251}));
stringstates[792] = @"253 expltype_lambda_paramlist: expltype_lambda_paramlist ',' . expltype_lambda_parameter ";
    AddState(792,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-171,793,-59,794,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[793] = @"253 expltype_lambda_paramlist: expltype_lambda_paramlist ',' expltype_lambda_parameter .		[',', ')', ]";
    AddState(793,new State(-253));
stringstates[794] = @"256 expltype_lambda_parameter: type . IDENTIFIER ";
    AddState(794,new State(new int[]{130,795}));
stringstates[795] = @"256 expltype_lambda_parameter: type IDENTIFIER .		[',', ')', ]";
    AddState(795,new State(-256));
stringstates[796] = @"252 expltype_lambda_paramlist: expltype_lambda_parameter .		[',', ')', ]";
    AddState(796,new State(-252));
stringstates[797] = @"515 field_declaration: attributes_opt modifiers_opt type . variable_declarators ';' 
517 method_header: attributes_opt modifiers_opt type . qualified_identifier '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt modifiers_opt type . qualified_identifier '{' accessor_declarations '}' 
562 indexer_declarator: type . THIS '[' formal_parameter_list ']' 
563 indexer_declarator: type . qualified_this '[' formal_parameter_list ']' 
568 overloadable_operator_declarator: type . OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ')' 
569 overloadable_operator_declarator: type . OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(797,new State(new int[]{198,851,179,860,130,894},new int[]{-76,798,-33,800,-293,856,-31,417,-82,145,-81,146,-84,895,-37,180}));
stringstates[798] = @"515 field_declaration: attributes_opt modifiers_opt type variable_declarators . ';' 
326 variable_declarators: variable_declarators . ',' variable_declarator ";
    AddState(798,new State(new int[]{59,799,44,221}));
stringstates[799] = @"515 field_declaration: attributes_opt modifiers_opt type variable_declarators ';' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(799,new State(-515));
stringstates[800] = @"517 method_header: attributes_opt modifiers_opt type qualified_identifier . '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt modifiers_opt type qualified_identifier . '{' accessor_declarations '}' ";
    AddState(800,new State(new int[]{40,801,123,804}));
stringstates[801] = @"517 method_header: attributes_opt modifiers_opt type qualified_identifier '(' . formal_parameter_list_opt ')' ";
    AddState(801,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,802,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[802] = @"517 method_header: attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt . ')' ";
    AddState(802,new State(new int[]{41,803}));
stringstates[803] = @"517 method_header: attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' .		[WHERE, ';', '{', ]";
    AddState(803,new State(-517));
stringstates[804] = @"538 property_declaration: attributes_opt modifiers_opt type qualified_identifier '{' . accessor_declarations '}' ";
    AddState(804,new State(-541,new int[]{-277,805,-278,807}));
stringstates[805] = @"538 property_declaration: attributes_opt modifiers_opt type qualified_identifier '{' accessor_declarations . '}' ";
    AddState(805,new State(new int[]{125,806}));
stringstates[806] = @"538 property_declaration: attributes_opt modifiers_opt type qualified_identifier '{' accessor_declarations '}' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(806,new State(-538));
stringstates[807] = @"539 accessor_declarations: inproperty . get_accessor_declaration set_accessor_declaration_opt outproperty 
540 accessor_declarations: inproperty . set_accessor_declaration get_accessor_declaration_opt outproperty ";
    AddState(807,new State(new int[]{91,649,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,239,-422,240,-422},new int[]{-279,808,-282,839,-256,849,-258,646,-314,647,-315,664}));
stringstates[808] = @"539 accessor_declarations: inproperty get_accessor_declaration . set_accessor_declaration_opt outproperty ";
    AddState(808,new State(new int[]{91,649,125,-545,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,240,-422},new int[]{-280,809,-282,811,-256,812,-258,646,-314,647,-315,664}));
stringstates[809] = @"539 accessor_declarations: inproperty get_accessor_declaration set_accessor_declaration_opt . outproperty ";
    AddState(809,new State(-542,new int[]{-281,810}));
stringstates[810] = @"539 accessor_declarations: inproperty get_accessor_declaration set_accessor_declaration_opt outproperty .		['}', ]";
    AddState(810,new State(-539));
stringstates[811] = @"546 set_accessor_declaration_opt: set_accessor_declaration .		['}', ]";
    AddState(811,new State(-546));
stringstates[812] = @"550 set_accessor_declaration: attributes_opt . modifiers_opt SET outproperty inset accessor_body outset inproperty ";
    AddState(812,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,240,-458},new int[]{-263,813,-264,822,-265,838}));
stringstates[813] = @"550 set_accessor_declaration: attributes_opt modifiers_opt . SET outproperty inset accessor_body outset inproperty ";
    AddState(813,new State(new int[]{240,814}));
stringstates[814] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET . outproperty inset accessor_body outset inproperty ";
    AddState(814,new State(-542,new int[]{-281,815}));
stringstates[815] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET outproperty . inset accessor_body outset inproperty ";
    AddState(815,new State(-543,new int[]{-284,816}));
stringstates[816] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET outproperty inset . accessor_body outset inproperty ";
    AddState(816,new State(new int[]{59,821,123,-313},new int[]{-286,817,-172,820,-212,205}));
stringstates[817] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET outproperty inset accessor_body . outset inproperty ";
    AddState(817,new State(-544,new int[]{-285,818}));
stringstates[818] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET outproperty inset accessor_body outset . inproperty ";
    AddState(818,new State(-541,new int[]{-278,819}));
stringstates[819] = @"550 set_accessor_declaration: attributes_opt modifiers_opt SET outproperty inset accessor_body outset inproperty .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, GET, '}', ]";
    AddState(819,new State(-550));
stringstates[820] = @"551 accessor_body: block .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, GET, '}', SET, ]";
    AddState(820,new State(-551));
stringstates[821] = @"552 accessor_body: ';' .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, GET, '}', SET, ]";
    AddState(821,new State(-552));
stringstates[822] = @"459 modifiers_opt: modifiers .		[CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]
461 modifiers: modifiers . modifier ";
    AddState(822,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,146,-459,196,-459,170,-459,155,-459,151,-459,147,-459,210,-459,156,-459,126,-459,189,-459,141,-459,191,-459,207,-459,169,-459,203,-459,174,-459,204,-459,144,-459,162,-459,153,-459,149,-459,139,-459,178,-459,195,-459,130,-459,167,-459,157,-459,240,-459,239,-459},new int[]{-265,823}));
stringstates[823] = @"461 modifiers: modifiers modifier .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(823,new State(-461));
stringstates[824] = @"462 modifier: ABSTRACT .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(824,new State(-462));
stringstates[825] = @"463 modifier: EXTERN .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(825,new State(-463));
stringstates[826] = @"464 modifier: INTERNAL .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(826,new State(-464));
stringstates[827] = @"465 modifier: NEW .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(827,new State(-465));
stringstates[828] = @"466 modifier: OVERRIDE .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(828,new State(-466));
stringstates[829] = @"467 modifier: PRIVATE .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(829,new State(-467));
stringstates[830] = @"468 modifier: PROTECTED .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(830,new State(-468));
stringstates[831] = @"469 modifier: PUBLIC .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(831,new State(-469));
stringstates[832] = @"470 modifier: READONLY .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(832,new State(-470));
stringstates[833] = @"471 modifier: SEALED .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(833,new State(-471));
stringstates[834] = @"472 modifier: STATIC .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(834,new State(-472));
stringstates[835] = @"473 modifier: UNSAFE .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(835,new State(-473));
stringstates[836] = @"474 modifier: VIRTUAL .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(836,new State(-474));
stringstates[837] = @"475 modifier: VOLATILE .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(837,new State(-475));
stringstates[838] = @"460 modifiers: modifier .		[ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, SET, GET, ]";
    AddState(838,new State(-460));
stringstates[839] = @"540 accessor_declarations: inproperty set_accessor_declaration . get_accessor_declaration_opt outproperty ";
    AddState(839,new State(new int[]{91,649,125,-547,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,239,-422},new int[]{-283,840,-279,842,-256,843,-258,646,-314,647,-315,664}));
stringstates[840] = @"540 accessor_declarations: inproperty set_accessor_declaration get_accessor_declaration_opt . outproperty ";
    AddState(840,new State(-542,new int[]{-281,841}));
stringstates[841] = @"540 accessor_declarations: inproperty set_accessor_declaration get_accessor_declaration_opt outproperty .		['}', ]";
    AddState(841,new State(-540));
stringstates[842] = @"548 get_accessor_declaration_opt: get_accessor_declaration .		['}', ]";
    AddState(842,new State(-548));
stringstates[843] = @"549 get_accessor_declaration: attributes_opt . modifiers_opt GET outproperty accessor_body inproperty ";
    AddState(843,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,239,-458},new int[]{-263,844,-264,822,-265,838}));
stringstates[844] = @"549 get_accessor_declaration: attributes_opt modifiers_opt . GET outproperty accessor_body inproperty ";
    AddState(844,new State(new int[]{239,845}));
stringstates[845] = @"549 get_accessor_declaration: attributes_opt modifiers_opt GET . outproperty accessor_body inproperty ";
    AddState(845,new State(-542,new int[]{-281,846}));
stringstates[846] = @"549 get_accessor_declaration: attributes_opt modifiers_opt GET outproperty . accessor_body inproperty ";
    AddState(846,new State(new int[]{59,821,123,-313},new int[]{-286,847,-172,820,-212,205}));
stringstates[847] = @"549 get_accessor_declaration: attributes_opt modifiers_opt GET outproperty accessor_body . inproperty ";
    AddState(847,new State(-541,new int[]{-278,848}));
stringstates[848] = @"549 get_accessor_declaration: attributes_opt modifiers_opt GET outproperty accessor_body inproperty .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, SET, '}', ]";
    AddState(848,new State(-549));
stringstates[849] = @"549 get_accessor_declaration: attributes_opt . modifiers_opt GET outproperty accessor_body inproperty 
550 set_accessor_declaration: attributes_opt . modifiers_opt SET outproperty inset accessor_body outset inproperty ";
    AddState(849,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,239,-458,240,-458},new int[]{-263,850,-264,822,-265,838}));
stringstates[850] = @"549 get_accessor_declaration: attributes_opt modifiers_opt . GET outproperty accessor_body inproperty 
550 set_accessor_declaration: attributes_opt modifiers_opt . SET outproperty inset accessor_body outset inproperty ";
    AddState(850,new State(new int[]{239,845,240,814}));
stringstates[851] = @"562 indexer_declarator: type THIS . '[' formal_parameter_list ']' ";
    AddState(851,new State(new int[]{91,852}));
stringstates[852] = @"562 indexer_declarator: type THIS '[' . formal_parameter_list ']' ";
    AddState(852,new State(new int[]{91,649,198,665,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-14,853,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[853] = @"562 indexer_declarator: type THIS '[' formal_parameter_list . ']' 
529 formal_parameter_list: formal_parameter_list . ',' formal_parameter ";
    AddState(853,new State(new int[]{93,854,44,855}));
stringstates[854] = @"562 indexer_declarator: type THIS '[' formal_parameter_list ']' .		['{', ]";
    AddState(854,new State(-562));
stringstates[855] = @"529 formal_parameter_list: formal_parameter_list ',' . formal_parameter ";
    AddState(855,new State(new int[]{91,649,198,665,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-53,634,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[856] = @"563 indexer_declarator: type qualified_this . '[' formal_parameter_list ']' ";
    AddState(856,new State(new int[]{91,857}));
stringstates[857] = @"563 indexer_declarator: type qualified_this '[' . formal_parameter_list ']' ";
    AddState(857,new State(new int[]{91,649,198,665,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-14,858,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[858] = @"563 indexer_declarator: type qualified_this '[' formal_parameter_list . ']' 
529 formal_parameter_list: formal_parameter_list . ',' formal_parameter ";
    AddState(858,new State(new int[]{93,859,44,855}));
stringstates[859] = @"563 indexer_declarator: type qualified_this '[' formal_parameter_list ']' .		['{', ]";
    AddState(859,new State(-563));
stringstates[860] = @"568 overloadable_operator_declarator: type OPERATOR . overloadable_operator '(' attributes_opt type IDENTIFIER ')' 
569 overloadable_operator_declarator: type OPERATOR . overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(860,new State(new int[]{43,872,45,873,33,874,126,875,260,876,261,877,200,878,159,879,42,880,47,881,37,882,38,883,124,884,94,885,252,886,248,887,254,888,255,889,62,890,60,891,257,892,256,893},new int[]{-298,861}));
stringstates[861] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator . '(' attributes_opt type IDENTIFIER ')' 
569 overloadable_operator_declarator: type OPERATOR overloadable_operator . '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(861,new State(new int[]{40,862}));
stringstates[862] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' . attributes_opt type IDENTIFIER ')' 
569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' . attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(862,new State(new int[]{91,649,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-256,863,-258,646,-314,647,-315,664}));
stringstates[863] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt . type IDENTIFIER ')' 
569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt . type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(863,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,864,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[864] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type . IDENTIFIER ')' 
569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type . IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    AddState(864,new State(new int[]{130,865}));
stringstates[865] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER . ')' 
569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER . ',' attributes_opt type IDENTIFIER ')' ";
    AddState(865,new State(new int[]{41,866,44,867}));
stringstates[866] = @"568 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ')' .		[';', '{', ]";
    AddState(866,new State(-568));
stringstates[867] = @"569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' . attributes_opt type IDENTIFIER ')' ";
    AddState(867,new State(new int[]{91,649,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-256,868,-258,646,-314,647,-315,664}));
stringstates[868] = @"569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt . type IDENTIFIER ')' ";
    AddState(868,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,869,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[869] = @"569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type . IDENTIFIER ')' ";
    AddState(869,new State(new int[]{130,870}));
stringstates[870] = @"569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER . ')' ";
    AddState(870,new State(new int[]{41,871}));
stringstates[871] = @"569 overloadable_operator_declarator: type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' .		[';', '{', ]";
    AddState(871,new State(-569));
stringstates[872] = @"570 overloadable_operator: '+' .		['(', ]";
    AddState(872,new State(-570));
stringstates[873] = @"571 overloadable_operator: '-' .		['(', ]";
    AddState(873,new State(-571));
stringstates[874] = @"572 overloadable_operator: '!' .		['(', ]";
    AddState(874,new State(-572));
stringstates[875] = @"573 overloadable_operator: '~' .		['(', ]";
    AddState(875,new State(-573));
stringstates[876] = @"574 overloadable_operator: PLUSPLUS .		['(', ]";
    AddState(876,new State(-574));
stringstates[877] = @"575 overloadable_operator: MINUSMINUS .		['(', ]";
    AddState(877,new State(-575));
stringstates[878] = @"576 overloadable_operator: TRUE .		['(', ]";
    AddState(878,new State(-576));
stringstates[879] = @"577 overloadable_operator: FALSE .		['(', ]";
    AddState(879,new State(-577));
stringstates[880] = @"578 overloadable_operator: '*' .		['(', ]";
    AddState(880,new State(-578));
stringstates[881] = @"579 overloadable_operator: '/' .		['(', ]";
    AddState(881,new State(-579));
stringstates[882] = @"580 overloadable_operator: '%' .		['(', ]";
    AddState(882,new State(-580));
stringstates[883] = @"581 overloadable_operator: '&' .		['(', ]";
    AddState(883,new State(-581));
stringstates[884] = @"582 overloadable_operator: '|' .		['(', ]";
    AddState(884,new State(-582));
stringstates[885] = @"583 overloadable_operator: '^' .		['(', ]";
    AddState(885,new State(-583));
stringstates[886] = @"584 overloadable_operator: LTLT .		['(', ]";
    AddState(886,new State(-584));
stringstates[887] = @"585 overloadable_operator: GTGT .		['(', ]";
    AddState(887,new State(-585));
stringstates[888] = @"586 overloadable_operator: EQEQ .		['(', ]";
    AddState(888,new State(-586));
stringstates[889] = @"587 overloadable_operator: NOTEQ .		['(', ]";
    AddState(889,new State(-587));
stringstates[890] = @"588 overloadable_operator: '>' .		['(', ]";
    AddState(890,new State(-588));
stringstates[891] = @"589 overloadable_operator: '<' .		['(', ]";
    AddState(891,new State(-589));
stringstates[892] = @"590 overloadable_operator: GEQ .		['(', ]";
    AddState(892,new State(-590));
stringstates[893] = @"591 overloadable_operator: LEQ .		['(', ]";
    AddState(893,new State(-591));
stringstates[894] = @"327 variable_declarator: IDENTIFIER .		[';', ',', ]
328 variable_declarator: IDENTIFIER . '=' variable_initializer 
15 member_name: IDENTIFIER . type_list_opt ";
    AddState(894,new State(new int[]{61,224,60,158,59,-327,44,-327,46,-18,40,-18,123,-18},new int[]{-7,149}));
stringstates[895] = @"437 gen_qualified_identifier: gen_qualifier . member_name 
435 long_qualified_identifier: gen_qualifier . member_name '.' 
564 qualified_this: gen_qualifier . THIS ";
    AddState(895,new State(new int[]{198,896,130,157},new int[]{-81,155}));
stringstates[896] = @"564 qualified_this: gen_qualifier THIS .		['[', ]";
    AddState(896,new State(-564));
stringstates[897] = @"518 method_header: attributes_opt modifiers_opt VOID . qualified_identifier '(' formal_parameter_list_opt ')' ";
    AddState(897,new State(new int[]{130,157},new int[]{-33,898,-82,145,-81,146,-84,154,-37,180}));
stringstates[898] = @"518 method_header: attributes_opt modifiers_opt VOID qualified_identifier . '(' formal_parameter_list_opt ')' ";
    AddState(898,new State(new int[]{40,899}));
stringstates[899] = @"518 method_header: attributes_opt modifiers_opt VOID qualified_identifier '(' . formal_parameter_list_opt ')' ";
    AddState(899,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,900,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[900] = @"518 method_header: attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt . ')' ";
    AddState(900,new State(new int[]{41,901}));
stringstates[901] = @"518 method_header: attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' .		[WHERE, ';', '{', ]";
    AddState(901,new State(-518));
stringstates[902] = @"553 event_declaration: attributes_opt modifiers_opt EVENT . type variable_declarators ';' 
554 event_declaration: attributes_opt modifiers_opt EVENT . type qualified_identifier '{' event_accessor_declarations '}' ";
    AddState(902,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,903,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[903] = @"553 event_declaration: attributes_opt modifiers_opt EVENT type . variable_declarators ';' 
554 event_declaration: attributes_opt modifiers_opt EVENT type . qualified_identifier '{' event_accessor_declarations '}' ";
    AddState(903,new State(new int[]{130,894},new int[]{-76,904,-33,906,-31,417,-82,145,-81,146,-84,154,-37,180}));
stringstates[904] = @"553 event_declaration: attributes_opt modifiers_opt EVENT type variable_declarators . ';' 
326 variable_declarators: variable_declarators . ',' variable_declarator ";
    AddState(904,new State(new int[]{59,905,44,221}));
stringstates[905] = @"553 event_declaration: attributes_opt modifiers_opt EVENT type variable_declarators ';' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(905,new State(-553));
stringstates[906] = @"554 event_declaration: attributes_opt modifiers_opt EVENT type qualified_identifier . '{' event_accessor_declarations '}' ";
    AddState(906,new State(new int[]{123,907}));
stringstates[907] = @"554 event_declaration: attributes_opt modifiers_opt EVENT type qualified_identifier '{' . event_accessor_declarations '}' ";
    AddState(907,new State(-555,new int[]{-287,908,-288,910}));
stringstates[908] = @"554 event_declaration: attributes_opt modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations . '}' ";
    AddState(908,new State(new int[]{125,909}));
stringstates[909] = @"554 event_declaration: attributes_opt modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations '}' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(909,new State(-554));
stringstates[910] = @"557 event_accessor_declarations: event_start . event_add_accessor_declaration event_remove_accessor_declaration event_end 
558 event_accessor_declarations: event_start . event_remove_accessor_declaration event_add_accessor_declaration event_end ";
    AddState(910,new State(new int[]{91,649,216,-422,217,-422},new int[]{-290,911,-291,917,-256,923,-258,646,-314,647,-315,664}));
stringstates[911] = @"557 event_accessor_declarations: event_start event_add_accessor_declaration . event_remove_accessor_declaration event_end ";
    AddState(911,new State(new int[]{91,649,217,-422},new int[]{-291,912,-256,914,-258,646,-314,647,-315,664}));
stringstates[912] = @"557 event_accessor_declarations: event_start event_add_accessor_declaration event_remove_accessor_declaration . event_end ";
    AddState(912,new State(-556,new int[]{-289,913}));
stringstates[913] = @"557 event_accessor_declarations: event_start event_add_accessor_declaration event_remove_accessor_declaration event_end .		['}', ]";
    AddState(913,new State(-557));
stringstates[914] = @"560 event_remove_accessor_declaration: attributes_opt . REMOVE block ";
    AddState(914,new State(new int[]{217,915}));
stringstates[915] = @"560 event_remove_accessor_declaration: attributes_opt REMOVE . block ";
    AddState(915,new State(-313,new int[]{-172,916,-212,205}));
stringstates[916] = @"560 event_remove_accessor_declaration: attributes_opt REMOVE block .		['[', ADD, '}', ]";
    AddState(916,new State(-560));
stringstates[917] = @"558 event_accessor_declarations: event_start event_remove_accessor_declaration . event_add_accessor_declaration event_end ";
    AddState(917,new State(new int[]{91,649,216,-422},new int[]{-290,918,-256,920,-258,646,-314,647,-315,664}));
stringstates[918] = @"558 event_accessor_declarations: event_start event_remove_accessor_declaration event_add_accessor_declaration . event_end ";
    AddState(918,new State(-556,new int[]{-289,919}));
stringstates[919] = @"558 event_accessor_declarations: event_start event_remove_accessor_declaration event_add_accessor_declaration event_end .		['}', ]";
    AddState(919,new State(-558));
stringstates[920] = @"559 event_add_accessor_declaration: attributes_opt . ADD block ";
    AddState(920,new State(new int[]{216,921}));
stringstates[921] = @"559 event_add_accessor_declaration: attributes_opt ADD . block ";
    AddState(921,new State(-313,new int[]{-172,922,-212,205}));
stringstates[922] = @"559 event_add_accessor_declaration: attributes_opt ADD block .		['[', REMOVE, '}', ]";
    AddState(922,new State(-559));
stringstates[923] = @"559 event_add_accessor_declaration: attributes_opt . ADD block 
560 event_remove_accessor_declaration: attributes_opt . REMOVE block ";
    AddState(923,new State(new int[]{216,921,217,915}));
stringstates[924] = @"561 indexer_declaration: attributes_opt modifiers_opt indexer_declarator . '{' accessor_declarations '}' ";
    AddState(924,new State(new int[]{123,925}));
stringstates[925] = @"561 indexer_declaration: attributes_opt modifiers_opt indexer_declarator '{' . accessor_declarations '}' ";
    AddState(925,new State(-541,new int[]{-277,926,-278,807}));
stringstates[926] = @"561 indexer_declaration: attributes_opt modifiers_opt indexer_declarator '{' accessor_declarations . '}' ";
    AddState(926,new State(new int[]{125,927}));
stringstates[927] = @"561 indexer_declaration: attributes_opt modifiers_opt indexer_declarator '{' accessor_declarations '}' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(927,new State(-561));
stringstates[928] = @"565 operator_declaration: attributes_opt modifiers_opt operator_declarator . operator_body ";
    AddState(928,new State(new int[]{59,931,123,-313},new int[]{-295,929,-172,930,-212,205}));
stringstates[929] = @"565 operator_declaration: attributes_opt modifiers_opt operator_declarator operator_body .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(929,new State(-565));
stringstates[930] = @"601 operator_body: block .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(930,new State(-601));
stringstates[931] = @"602 operator_body: ';' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(931,new State(-602));
stringstates[932] = @"594 constructor_declaration: attributes_opt modifiers_opt constructor_declarator . constructor_body ";
    AddState(932,new State(new int[]{59,935,123,-313},new int[]{-299,933,-172,934,-212,205}));
stringstates[933] = @"594 constructor_declaration: attributes_opt modifiers_opt constructor_declarator constructor_body .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(933,new State(-594));
stringstates[934] = @"603 constructor_body: block .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(934,new State(-603));
stringstates[935] = @"604 constructor_body: ';' .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(935,new State(-604));
stringstates[936] = @"600 destructor_declaration: attributes_opt modifiers_opt '~' . IDENTIFIER '(' ')' block ";
    AddState(936,new State(new int[]{130,937}));
stringstates[937] = @"600 destructor_declaration: attributes_opt modifiers_opt '~' IDENTIFIER . '(' ')' block ";
    AddState(937,new State(new int[]{40,938}));
stringstates[938] = @"600 destructor_declaration: attributes_opt modifiers_opt '~' IDENTIFIER '(' . ')' block ";
    AddState(938,new State(new int[]{41,939}));
stringstates[939] = @"600 destructor_declaration: attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' . block ";
    AddState(939,new State(-313,new int[]{-172,940,-212,205}));
stringstates[940] = @"600 destructor_declaration: attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(940,new State(-600));
stringstates[941] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT . IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt ";
    AddState(941,new State(new int[]{130,942}));
stringstates[942] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER . type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt ";
    AddState(942,new State(new int[]{60,1047,58,-23,213,-23,123,-23},new int[]{-79,943}));
stringstates[943] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt . in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt ";
    AddState(943,new State(-476,new int[]{-266,944}));
stringstates[944] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause . struct_interfaces_opt gen_clause_opt struct_body comma_opt ";
    AddState(944,new State(new int[]{58,1134,213,-606,123,-606},new int[]{-302,945,-303,1133}));
stringstates[945] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt . gen_clause_opt struct_body comma_opt ";
    AddState(945,new State(new int[]{213,983,123,-479},new int[]{-269,946,-267,981,-268,998}));
stringstates[946] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt . struct_body comma_opt ";
    AddState(946,new State(new int[]{123,949},new int[]{-11,947}));
stringstates[947] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body . comma_opt ";
    AddState(947,new State(new int[]{59,9,91,-427,127,-427,175,-427,136,-427,158,-427,171,-427,176,-427,181,-427,183,-427,184,-427,185,-427,186,-427,190,-427,194,-427,206,-427,209,-427,211,-427,146,-427,196,-427,170,-427,155,-427,151,-427,128,-427,125,-427,147,-427,210,-427,156,-427,126,-427,189,-427,141,-427,191,-427,207,-427,169,-427,203,-427,174,-427,204,-427,144,-427,162,-427,153,-427,149,-427,139,-427,178,-427,195,-427,130,-427,167,-427,157,-427},new int[]{-259,948}));
stringstates[948] = @"605 struct_declaration: attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(948,new State(-605));
stringstates[949] = @"609 struct_body: '{' . struct_member_declarations_opt '}' ";
    AddState(949,new State(new int[]{91,649,125,-610,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,147,-422,210,-422,156,-422,146,-422,196,-422,170,-422,155,-422,151,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422,167,-422,157,-422},new int[]{-15,950,-16,952,-27,1132,-21,954,-256,955,-258,646,-314,647,-315,664,-22,1115,-45,1116,-56,1117,-46,1121,-48,1122,-49,1123,-50,1124,-51,1125,-43,1126,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[950] = @"609 struct_body: '{' struct_member_declarations_opt . '}' ";
    AddState(950,new State(new int[]{125,951}));
stringstates[951] = @"609 struct_body: '{' struct_member_declarations_opt '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(951,new State(-609));
stringstates[952] = @"611 struct_member_declarations_opt: struct_member_declarations .		['}', ]
613 struct_member_declarations: struct_member_declarations . struct_member_declaration ";
    AddState(952,new State(new int[]{91,649,125,-611,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,147,-422,210,-422,156,-422,146,-422,196,-422,170,-422,155,-422,151,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422,167,-422,157,-422},new int[]{-27,953,-21,954,-256,955,-258,646,-314,647,-315,664,-22,1115,-45,1116,-56,1117,-46,1121,-48,1122,-49,1123,-50,1124,-51,1125,-43,1126,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));
stringstates[953] = @"613 struct_member_declarations: struct_member_declarations struct_member_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(953,new State(-613));
stringstates[954] = @"614 struct_member_declaration: constant_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(954,new State(-614));
stringstates[955] = @"514 constant_declaration: attributes_opt . modifiers_opt CONST type constant_declarators ';' 
515 field_declaration: attributes_opt . modifiers_opt type variable_declarators ';' 
517 method_header: attributes_opt . modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' 
518 method_header: attributes_opt . modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt . modifiers_opt type qualified_identifier '{' accessor_declarations '}' 
553 event_declaration: attributes_opt . modifiers_opt EVENT type variable_declarators ';' 
554 event_declaration: attributes_opt . modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations '}' 
561 indexer_declaration: attributes_opt . modifiers_opt indexer_declarator '{' accessor_declarations '}' 
565 operator_declaration: attributes_opt . modifiers_opt operator_declarator operator_body 
594 constructor_declaration: attributes_opt . modifiers_opt constructor_declarator constructor_body 
490 class_declaration: attributes_opt . modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt . modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt . modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt . modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt . modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(955,new State(new int[]{136,824,158,825,171,826,176,827,181,828,183,829,184,830,185,831,186,832,190,833,194,834,206,835,209,836,211,837,147,-458,210,-458,156,-458,146,-458,196,-458,170,-458,155,-458,151,-458,189,-458,141,-458,191,-458,207,-458,169,-458,203,-458,174,-458,204,-458,144,-458,162,-458,153,-458,149,-458,139,-458,178,-458,195,-458,130,-458,167,-458,157,-458},new int[]{-263,956,-264,822,-265,838}));
stringstates[956] = @"514 constant_declaration: attributes_opt modifiers_opt . CONST type constant_declarators ';' 
515 field_declaration: attributes_opt modifiers_opt . type variable_declarators ';' 
517 method_header: attributes_opt modifiers_opt . type qualified_identifier '(' formal_parameter_list_opt ')' 
518 method_header: attributes_opt modifiers_opt . VOID qualified_identifier '(' formal_parameter_list_opt ')' 
538 property_declaration: attributes_opt modifiers_opt . type qualified_identifier '{' accessor_declarations '}' 
553 event_declaration: attributes_opt modifiers_opt . EVENT type variable_declarators ';' 
554 event_declaration: attributes_opt modifiers_opt . EVENT type qualified_identifier '{' event_accessor_declarations '}' 
561 indexer_declaration: attributes_opt modifiers_opt . indexer_declarator '{' accessor_declarations '}' 
565 operator_declaration: attributes_opt modifiers_opt . operator_declarator operator_body 
594 constructor_declaration: attributes_opt modifiers_opt . constructor_declarator constructor_body 
490 class_declaration: attributes_opt modifiers_opt . CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
605 struct_declaration: attributes_opt modifiers_opt . STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
629 interface_declaration: attributes_opt modifiers_opt . INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
654 enum_declaration: attributes_opt modifiers_opt . ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
666 delegate_declaration: attributes_opt modifiers_opt . DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(956,new State(new int[]{147,35,210,897,156,902,146,19,196,941,170,957,155,1053,151,1073,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,1084,167,1101,157,1108},new int[]{-59,797,-292,924,-294,928,-30,932,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183,-296,1099,-297,1100}));
stringstates[957] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE . IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt ";
    AddState(957,new State(new int[]{130,958}));
stringstates[958] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER . type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt ";
    AddState(958,new State(new int[]{60,1047,58,-23,213,-23,123,-23},new int[]{-79,959}));
stringstates[959] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt . in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt ";
    AddState(959,new State(-476,new int[]{-266,960}));
stringstates[960] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause . interface_base_opt gen_clause_opt interface_body comma_opt ";
    AddState(960,new State(new int[]{58,1042,213,-630,123,-630},new int[]{-306,961,-307,1041}));
stringstates[961] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt . gen_clause_opt interface_body comma_opt ";
    AddState(961,new State(new int[]{213,983,123,-479},new int[]{-269,962,-267,981,-268,998}));
stringstates[962] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt . interface_body comma_opt ";
    AddState(962,new State(new int[]{123,965},new int[]{-5,963}));
stringstates[963] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body . comma_opt ";
    AddState(963,new State(new int[]{59,9,91,-427,127,-427,175,-427,136,-427,158,-427,171,-427,176,-427,181,-427,183,-427,184,-427,185,-427,186,-427,190,-427,194,-427,206,-427,209,-427,211,-427,146,-427,196,-427,170,-427,155,-427,151,-427,128,-427,125,-427,147,-427,210,-427,156,-427,126,-427,189,-427,141,-427,191,-427,207,-427,169,-427,203,-427,174,-427,204,-427,144,-427,162,-427,153,-427,149,-427,139,-427,178,-427,195,-427,130,-427,167,-427,157,-427},new int[]{-259,964}));
stringstates[964] = @"629 interface_declaration: attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(964,new State(-629));
stringstates[965] = @"633 interface_body: '{' . interface_member_declarations_opt '}' ";
    AddState(965,new State(new int[]{91,649,125,-634,176,-422,210,-422,156,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-12,966,-17,968,-28,1040,-57,970,-256,971,-258,646,-314,647,-315,664,-58,1037,-308,1038,-23,1039}));
stringstates[966] = @"633 interface_body: '{' interface_member_declarations_opt . '}' ";
    AddState(966,new State(new int[]{125,967}));
stringstates[967] = @"633 interface_body: '{' interface_member_declarations_opt '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(967,new State(-633));
stringstates[968] = @"635 interface_member_declarations_opt: interface_member_declarations .		['}', ]
637 interface_member_declarations: interface_member_declarations . interface_member_declaration ";
    AddState(968,new State(new int[]{91,649,125,-635,176,-422,210,-422,156,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-28,969,-57,970,-256,971,-258,646,-314,647,-315,664,-58,1037,-308,1038,-23,1039}));
stringstates[969] = @"637 interface_member_declarations: interface_member_declarations interface_member_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(969,new State(-637));
stringstates[970] = @"638 interface_member_declaration: interface_method_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(970,new State(-638));
stringstates[971] = @"642 interface_method_declaration: attributes_opt . new_opt type member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
643 interface_method_declaration: attributes_opt . new_opt VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
646 interface_property_declaration: attributes_opt . new_opt type member_name '{' interface_accessors '}' 
652 interface_event_declaration: attributes_opt . new_opt EVENT type member_name interface_empty_body 
647 interface_indexer_declaration: attributes_opt . new_opt type THIS '[' formal_parameter_list ']' '{' interface_accessors '}' ";
    AddState(971,new State(new int[]{176,1036,210,-644,156,-644,189,-644,141,-644,191,-644,207,-644,169,-644,203,-644,174,-644,204,-644,144,-644,162,-644,153,-644,149,-644,139,-644,178,-644,195,-644,130,-644},new int[]{-309,972}));
stringstates[972] = @"642 interface_method_declaration: attributes_opt new_opt . type member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
643 interface_method_declaration: attributes_opt new_opt . VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
646 interface_property_declaration: attributes_opt new_opt . type member_name '{' interface_accessors '}' 
652 interface_event_declaration: attributes_opt new_opt . EVENT type member_name interface_empty_body 
647 interface_indexer_declaration: attributes_opt new_opt . type THIS '[' formal_parameter_list ']' '{' interface_accessors '}' ";
    AddState(972,new State(new int[]{210,1025,156,1032,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,973,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[973] = @"642 interface_method_declaration: attributes_opt new_opt type . member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
646 interface_property_declaration: attributes_opt new_opt type . member_name '{' interface_accessors '}' 
647 interface_indexer_declaration: attributes_opt new_opt type . THIS '[' formal_parameter_list ']' '{' interface_accessors '}' ";
    AddState(973,new State(new int[]{198,1018,130,157},new int[]{-81,974}));
stringstates[974] = @"642 interface_method_declaration: attributes_opt new_opt type member_name . '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
646 interface_property_declaration: attributes_opt new_opt type member_name . '{' interface_accessors '}' ";
    AddState(974,new State(new int[]{40,975,123,999}));
stringstates[975] = @"642 interface_method_declaration: attributes_opt new_opt type member_name '(' . formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    AddState(975,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,976,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[976] = @"642 interface_method_declaration: attributes_opt new_opt type member_name '(' formal_parameter_list_opt . ')' gen_clause_opt interface_empty_body ";
    AddState(976,new State(new int[]{41,977}));
stringstates[977] = @"642 interface_method_declaration: attributes_opt new_opt type member_name '(' formal_parameter_list_opt ')' . gen_clause_opt interface_empty_body ";
    AddState(977,new State(new int[]{213,983,59,-479},new int[]{-269,978,-267,981,-268,998}));
stringstates[978] = @"642 interface_method_declaration: attributes_opt new_opt type member_name '(' formal_parameter_list_opt ')' gen_clause_opt . interface_empty_body ";
    AddState(978,new State(new int[]{59,980},new int[]{-310,979}));
stringstates[979] = @"642 interface_method_declaration: attributes_opt new_opt type member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(979,new State(-642));
stringstates[980] = @"653 interface_empty_body: ';' .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', SET, GET, ]";
    AddState(980,new State(-653));
stringstates[981] = @"480 gen_clause_opt: gen_clause_list .		['{', ';', ]
478 gen_clause_list: gen_clause_list . gen_clause ";
    AddState(981,new State(new int[]{213,983,123,-480,59,-480},new int[]{-268,982}));
stringstates[982] = @"478 gen_clause_list: gen_clause_list gen_clause .		[WHERE, '{', ';', ]";
    AddState(982,new State(-478));
stringstates[983] = @"481 gen_clause: WHERE . IDENTIFIER gen_class_base ";
    AddState(983,new State(new int[]{130,984}));
stringstates[984] = @"481 gen_clause: WHERE IDENTIFIER . gen_class_base ";
    AddState(984,new State(new int[]{58,986},new int[]{-270,985}));
stringstates[985] = @"481 gen_clause: WHERE IDENTIFIER gen_class_base .		[WHERE, '{', ';', ]";
    AddState(985,new State(-481));
stringstates[986] = @"487 gen_class_base: ':' . gen_type_list ";
    AddState(986,new State(new int[]{196,990,146,991,176,992,178,995,130,157},new int[]{-272,987,-271,997,-71,996,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[987] = @"487 gen_class_base: ':' gen_type_list .		[WHERE, '{', ';', ]
489 gen_type_list: gen_type_list . ',' gen_class_type ";
    AddState(987,new State(new int[]{44,988,213,-487,123,-487,59,-487}));
stringstates[988] = @"489 gen_type_list: gen_type_list ',' . gen_class_type ";
    AddState(988,new State(new int[]{196,990,146,991,176,992,178,995,130,157},new int[]{-271,989,-71,996,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[989] = @"489 gen_type_list: gen_type_list ',' gen_class_type .		[',', WHERE, '{', ';', ]";
    AddState(989,new State(-489));
stringstates[990] = @"482 gen_class_type: STRUCT .		[',', WHERE, '{', ';', ]";
    AddState(990,new State(-482));
stringstates[991] = @"483 gen_class_type: CLASS .		[',', WHERE, '{', ';', ]";
    AddState(991,new State(-483));
stringstates[992] = @"484 gen_class_type: NEW . '(' ')' ";
    AddState(992,new State(new int[]{40,993}));
stringstates[993] = @"484 gen_class_type: NEW '(' . ')' ";
    AddState(993,new State(new int[]{41,994}));
stringstates[994] = @"484 gen_class_type: NEW '(' ')' .		[',', WHERE, '{', ';', ]";
    AddState(994,new State(-484));
stringstates[995] = @"485 gen_class_type: OBJECT .		[',', WHERE, '{', ';', ]";
    AddState(995,new State(-485));
stringstates[996] = @"486 gen_class_type: type_name .		[',', WHERE, '{', ';', ]";
    AddState(996,new State(-486));
stringstates[997] = @"488 gen_type_list: gen_class_type .		[',', WHERE, '{', ';', ]";
    AddState(997,new State(-488));
stringstates[998] = @"477 gen_clause_list: gen_clause .		[WHERE, '{', ';', ]";
    AddState(998,new State(-477));
stringstates[999] = @"646 interface_property_declaration: attributes_opt new_opt type member_name '{' . interface_accessors '}' ";
    AddState(999,new State(-541,new int[]{-311,1000,-278,1002}));
stringstates[1000] = @"646 interface_property_declaration: attributes_opt new_opt type member_name '{' interface_accessors . '}' ";
    AddState(1000,new State(new int[]{125,1001}));
stringstates[1001] = @"646 interface_property_declaration: attributes_opt new_opt type member_name '{' interface_accessors '}' .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1001,new State(-646));
stringstates[1002] = @"648 interface_accessors: inproperty . attributes_opt GET interface_empty_body outproperty 
649 interface_accessors: inproperty . attributes_opt SET interface_empty_body outproperty 
650 interface_accessors: inproperty . attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body outproperty 
651 interface_accessors: inproperty . attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body outproperty ";
    AddState(1002,new State(new int[]{91,649,239,-422,240,-422},new int[]{-256,1003,-258,646,-314,647,-315,664}));
stringstates[1003] = @"648 interface_accessors: inproperty attributes_opt . GET interface_empty_body outproperty 
649 interface_accessors: inproperty attributes_opt . SET interface_empty_body outproperty 
650 interface_accessors: inproperty attributes_opt . GET interface_empty_body attributes_opt SET interface_empty_body outproperty 
651 interface_accessors: inproperty attributes_opt . SET interface_empty_body attributes_opt GET interface_empty_body outproperty ";
    AddState(1003,new State(new int[]{239,1004,240,1011}));
stringstates[1004] = @"648 interface_accessors: inproperty attributes_opt GET . interface_empty_body outproperty 
650 interface_accessors: inproperty attributes_opt GET . interface_empty_body attributes_opt SET interface_empty_body outproperty ";
    AddState(1004,new State(new int[]{59,980},new int[]{-310,1005}));
stringstates[1005] = @"648 interface_accessors: inproperty attributes_opt GET interface_empty_body . outproperty 
650 interface_accessors: inproperty attributes_opt GET interface_empty_body . attributes_opt SET interface_empty_body outproperty ";
    AddState(1005,new State(new int[]{91,649,125,-542,240,-422},new int[]{-281,1006,-256,1007,-258,646,-314,647,-315,664}));
stringstates[1006] = @"648 interface_accessors: inproperty attributes_opt GET interface_empty_body outproperty .		['}', ]";
    AddState(1006,new State(-648));
stringstates[1007] = @"650 interface_accessors: inproperty attributes_opt GET interface_empty_body attributes_opt . SET interface_empty_body outproperty ";
    AddState(1007,new State(new int[]{240,1008}));
stringstates[1008] = @"650 interface_accessors: inproperty attributes_opt GET interface_empty_body attributes_opt SET . interface_empty_body outproperty ";
    AddState(1008,new State(new int[]{59,980},new int[]{-310,1009}));
stringstates[1009] = @"650 interface_accessors: inproperty attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body . outproperty ";
    AddState(1009,new State(-542,new int[]{-281,1010}));
stringstates[1010] = @"650 interface_accessors: inproperty attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body outproperty .		['}', ]";
    AddState(1010,new State(-650));
stringstates[1011] = @"649 interface_accessors: inproperty attributes_opt SET . interface_empty_body outproperty 
651 interface_accessors: inproperty attributes_opt SET . interface_empty_body attributes_opt GET interface_empty_body outproperty ";
    AddState(1011,new State(new int[]{59,980},new int[]{-310,1012}));
stringstates[1012] = @"649 interface_accessors: inproperty attributes_opt SET interface_empty_body . outproperty 
651 interface_accessors: inproperty attributes_opt SET interface_empty_body . attributes_opt GET interface_empty_body outproperty ";
    AddState(1012,new State(new int[]{91,649,125,-542,239,-422},new int[]{-281,1013,-256,1014,-258,646,-314,647,-315,664}));
stringstates[1013] = @"649 interface_accessors: inproperty attributes_opt SET interface_empty_body outproperty .		['}', ]";
    AddState(1013,new State(-649));
stringstates[1014] = @"651 interface_accessors: inproperty attributes_opt SET interface_empty_body attributes_opt . GET interface_empty_body outproperty ";
    AddState(1014,new State(new int[]{239,1015}));
stringstates[1015] = @"651 interface_accessors: inproperty attributes_opt SET interface_empty_body attributes_opt GET . interface_empty_body outproperty ";
    AddState(1015,new State(new int[]{59,980},new int[]{-310,1016}));
stringstates[1016] = @"651 interface_accessors: inproperty attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body . outproperty ";
    AddState(1016,new State(-542,new int[]{-281,1017}));
stringstates[1017] = @"651 interface_accessors: inproperty attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body outproperty .		['}', ]";
    AddState(1017,new State(-651));
stringstates[1018] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS . '[' formal_parameter_list ']' '{' interface_accessors '}' ";
    AddState(1018,new State(new int[]{91,1019}));
stringstates[1019] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' . formal_parameter_list ']' '{' interface_accessors '}' ";
    AddState(1019,new State(new int[]{91,649,198,665,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-14,1020,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[1020] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' formal_parameter_list . ']' '{' interface_accessors '}' 
529 formal_parameter_list: formal_parameter_list . ',' formal_parameter ";
    AddState(1020,new State(new int[]{93,1021,44,855}));
stringstates[1021] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' formal_parameter_list ']' . '{' interface_accessors '}' ";
    AddState(1021,new State(new int[]{123,1022}));
stringstates[1022] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' formal_parameter_list ']' '{' . interface_accessors '}' ";
    AddState(1022,new State(-541,new int[]{-311,1023,-278,1002}));
stringstates[1023] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' formal_parameter_list ']' '{' interface_accessors . '}' ";
    AddState(1023,new State(new int[]{125,1024}));
stringstates[1024] = @"647 interface_indexer_declaration: attributes_opt new_opt type THIS '[' formal_parameter_list ']' '{' interface_accessors '}' .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1024,new State(-647));
stringstates[1025] = @"643 interface_method_declaration: attributes_opt new_opt VOID . member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    AddState(1025,new State(new int[]{130,157},new int[]{-81,1026}));
stringstates[1026] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name . '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    AddState(1026,new State(new int[]{40,1027}));
stringstates[1027] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name '(' . formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    AddState(1027,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,1028,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[1028] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt . ')' gen_clause_opt interface_empty_body ";
    AddState(1028,new State(new int[]{41,1029}));
stringstates[1029] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt ')' . gen_clause_opt interface_empty_body ";
    AddState(1029,new State(new int[]{213,983,59,-479},new int[]{-269,1030,-267,981,-268,998}));
stringstates[1030] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt . interface_empty_body ";
    AddState(1030,new State(new int[]{59,980},new int[]{-310,1031}));
stringstates[1031] = @"643 interface_method_declaration: attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1031,new State(-643));
stringstates[1032] = @"652 interface_event_declaration: attributes_opt new_opt EVENT . type member_name interface_empty_body ";
    AddState(1032,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,1033,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1033] = @"652 interface_event_declaration: attributes_opt new_opt EVENT type . member_name interface_empty_body ";
    AddState(1033,new State(new int[]{130,157},new int[]{-81,1034}));
stringstates[1034] = @"652 interface_event_declaration: attributes_opt new_opt EVENT type member_name . interface_empty_body ";
    AddState(1034,new State(new int[]{59,980},new int[]{-310,1035}));
stringstates[1035] = @"652 interface_event_declaration: attributes_opt new_opt EVENT type member_name interface_empty_body .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1035,new State(-652));
stringstates[1036] = @"645 new_opt: NEW .		[VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, ]";
    AddState(1036,new State(-645));
stringstates[1037] = @"639 interface_member_declaration: interface_property_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1037,new State(-639));
stringstates[1038] = @"640 interface_member_declaration: interface_event_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1038,new State(-640));
stringstates[1039] = @"641 interface_member_declaration: interface_indexer_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1039,new State(-641));
stringstates[1040] = @"636 interface_member_declarations: interface_member_declaration .		['[', NEW, VOID, EVENT, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, '}', ]";
    AddState(1040,new State(-636));
stringstates[1041] = @"631 interface_base_opt: interface_base .		[WHERE, '{', ]";
    AddState(1041,new State(-631));
stringstates[1042] = @"632 interface_base: ':' . interface_type_list ";
    AddState(1042,new State(new int[]{130,157},new int[]{-275,1043,-71,1046,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[1043] = @"632 interface_base: ':' interface_type_list .		[WHERE, '{', ]
497 interface_type_list: interface_type_list . ',' type_name ";
    AddState(1043,new State(new int[]{44,1044,213,-632,123,-632}));
stringstates[1044] = @"497 interface_type_list: interface_type_list ',' . type_name ";
    AddState(1044,new State(new int[]{130,157},new int[]{-71,1045,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[1045] = @"497 interface_type_list: interface_type_list ',' type_name .		[',', WHERE, '{', ]";
    AddState(1045,new State(-497));
stringstates[1046] = @"496 interface_type_list: type_name .		[',', WHERE, '{', ]";
    AddState(1046,new State(-496));
stringstates[1047] = @"24 type_arg_list_opt: '<' . type_arg_list '>' ";
    AddState(1047,new State(new int[]{130,1052},new int[]{-78,1048}));
stringstates[1048] = @"24 type_arg_list_opt: '<' type_arg_list . '>' 
26 type_arg_list: type_arg_list . ',' IDENTIFIER ";
    AddState(1048,new State(new int[]{62,1049,44,1050}));
stringstates[1049] = @"24 type_arg_list_opt: '<' type_arg_list '>' .		[':', WHERE, '{', ]";
    AddState(1049,new State(-24));
stringstates[1050] = @"26 type_arg_list: type_arg_list ',' . IDENTIFIER ";
    AddState(1050,new State(new int[]{130,1051}));
stringstates[1051] = @"26 type_arg_list: type_arg_list ',' IDENTIFIER .		['>', ',', ]";
    AddState(1051,new State(-26));
stringstates[1052] = @"25 type_arg_list: IDENTIFIER .		['>', ',', ]";
    AddState(1052,new State(-25));
stringstates[1053] = @"654 enum_declaration: attributes_opt modifiers_opt ENUM . IDENTIFIER enum_base_opt enum_body comma_opt ";
    AddState(1053,new State(new int[]{130,1054}));
stringstates[1054] = @"654 enum_declaration: attributes_opt modifiers_opt ENUM IDENTIFIER . enum_base_opt enum_body comma_opt ";
    AddState(1054,new State(new int[]{58,1071,123,-655},new int[]{-312,1055,-313,1070}));
stringstates[1055] = @"654 enum_declaration: attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt . enum_body comma_opt ";
    AddState(1055,new State(new int[]{123,1058},new int[]{-18,1056}));
stringstates[1056] = @"654 enum_declaration: attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body . comma_opt ";
    AddState(1056,new State(new int[]{59,9,91,-427,127,-427,175,-427,136,-427,158,-427,171,-427,176,-427,181,-427,183,-427,184,-427,185,-427,186,-427,190,-427,194,-427,206,-427,209,-427,211,-427,146,-427,196,-427,170,-427,155,-427,151,-427,128,-427,125,-427,147,-427,210,-427,156,-427,126,-427,189,-427,141,-427,191,-427,207,-427,169,-427,203,-427,174,-427,204,-427,144,-427,162,-427,153,-427,149,-427,139,-427,178,-427,195,-427,130,-427,167,-427,157,-427},new int[]{-259,1057}));
stringstates[1057] = @"654 enum_declaration: attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1057,new State(-654));
stringstates[1058] = @"658 enum_body: '{' . enum_member_declarations_opt '}' 
659 enum_body: '{' . enum_member_declarations ',' '}' ";
    AddState(1058,new State(new int[]{91,649,125,-660,130,-422},new int[]{-19,1059,-20,1061,-29,1069,-256,1065,-258,646,-314,647,-315,664}));
stringstates[1059] = @"658 enum_body: '{' enum_member_declarations_opt . '}' ";
    AddState(1059,new State(new int[]{125,1060}));
stringstates[1060] = @"658 enum_body: '{' enum_member_declarations_opt '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1060,new State(-658));
stringstates[1061] = @"659 enum_body: '{' enum_member_declarations . ',' '}' 
661 enum_member_declarations_opt: enum_member_declarations .		['}', ]
663 enum_member_declarations: enum_member_declarations . ',' enum_member_declaration ";
    AddState(1061,new State(new int[]{44,1062,125,-661}));
stringstates[1062] = @"659 enum_body: '{' enum_member_declarations ',' . '}' 
663 enum_member_declarations: enum_member_declarations ',' . enum_member_declaration ";
    AddState(1062,new State(new int[]{125,1063,91,649,130,-422},new int[]{-29,1064,-256,1065,-258,646,-314,647,-315,664}));
stringstates[1063] = @"659 enum_body: '{' enum_member_declarations ',' '}' .		[';', '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1063,new State(-659));
stringstates[1064] = @"663 enum_member_declarations: enum_member_declarations ',' enum_member_declaration .		[',', '}', ]";
    AddState(1064,new State(-663));
stringstates[1065] = @"664 enum_member_declaration: attributes_opt . IDENTIFIER 
665 enum_member_declaration: attributes_opt . IDENTIFIER '=' constant_expression ";
    AddState(1065,new State(new int[]{130,1066}));
stringstates[1066] = @"664 enum_member_declaration: attributes_opt IDENTIFIER .		[',', '}', ]
665 enum_member_declaration: attributes_opt IDENTIFIER . '=' constant_expression ";
    AddState(1066,new State(new int[]{61,1067,44,-664,125,-664}));
stringstates[1067] = @"665 enum_member_declaration: attributes_opt IDENTIFIER '=' . constant_expression ";
    AddState(1067,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,221,-262},new int[]{-195,1068,-94,44,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[1068] = @"665 enum_member_declaration: attributes_opt IDENTIFIER '=' constant_expression .		[',', '}', ]";
    AddState(1068,new State(-665));
stringstates[1069] = @"662 enum_member_declarations: enum_member_declaration .		[',', '}', ]";
    AddState(1069,new State(-662));
stringstates[1070] = @"656 enum_base_opt: enum_base .		['{', ]";
    AddState(1070,new State(-656));
stringstates[1071] = @"657 enum_base: ':' . integral_type ";
    AddState(1071,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127},new int[]{-69,1072}));
stringstates[1072] = @"657 enum_base: ':' integral_type .		['{', ]";
    AddState(1072,new State(-657));
stringstates[1073] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE . return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(1073,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157,210,1083},new int[]{-60,1074,-59,1082,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1074] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type . member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(1074,new State(new int[]{130,157},new int[]{-81,1075}));
stringstates[1075] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name . '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(1075,new State(new int[]{40,1076}));
stringstates[1076] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' . formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    AddState(1076,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,1077,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[1077] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt . ')' in_gen_clause gen_clause_opt ';' ";
    AddState(1077,new State(new int[]{41,1078}));
stringstates[1078] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' . in_gen_clause gen_clause_opt ';' ";
    AddState(1078,new State(-476,new int[]{-266,1079}));
stringstates[1079] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause . gen_clause_opt ';' ";
    AddState(1079,new State(new int[]{213,983,59,-479},new int[]{-269,1080,-267,981,-268,998}));
stringstates[1080] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt . ';' ";
    AddState(1080,new State(new int[]{59,1081}));
stringstates[1081] = @"666 delegate_declaration: attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1081,new State(-666));
stringstates[1082] = @"524 return_type: type .		[IDENTIFIER, ]";
    AddState(1082,new State(-524));
stringstates[1083] = @"525 return_type: VOID .		[IDENTIFIER, ]";
    AddState(1083,new State(-525));
stringstates[1084] = @"15 member_name: IDENTIFIER . type_list_opt 
595 constructor_declarator: IDENTIFIER . '(' formal_parameter_list_opt ')' constructor_initializer_opt ";
    AddState(1084,new State(new int[]{40,1085,60,158,46,-18,129,-18,63,-18,198,-18,179,-18,130,-18},new int[]{-7,149}));
stringstates[1085] = @"595 constructor_declarator: IDENTIFIER '(' . formal_parameter_list_opt ')' constructor_initializer_opt ";
    AddState(1085,new State(new int[]{91,649,198,665,214,670,41,-519,182,-422,187,-422,180,-422,189,-422,141,-422,191,-422,207,-422,169,-422,203,-422,174,-422,204,-422,144,-422,162,-422,153,-422,149,-422,139,-422,178,-422,195,-422,130,-422},new int[]{-13,1086,-14,631,-53,669,-54,636,-256,637,-258,646,-314,647,-315,664,-55,668}));
stringstates[1086] = @"595 constructor_declarator: IDENTIFIER '(' formal_parameter_list_opt . ')' constructor_initializer_opt ";
    AddState(1086,new State(new int[]{41,1087}));
stringstates[1087] = @"595 constructor_declarator: IDENTIFIER '(' formal_parameter_list_opt ')' . constructor_initializer_opt ";
    AddState(1087,new State(new int[]{58,1090,59,-596,123,-596},new int[]{-300,1088,-301,1089}));
stringstates[1088] = @"595 constructor_declarator: IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt .		[';', '{', ]";
    AddState(1088,new State(-595));
stringstates[1089] = @"597 constructor_initializer_opt: constructor_initializer .		[';', '{', ]";
    AddState(1089,new State(-597));
stringstates[1090] = @"598 constructor_initializer: ':' . BASE '(' argument_list_opt ')' 
599 constructor_initializer: ':' . THIS '(' argument_list_opt ')' ";
    AddState(1090,new State(new int[]{138,1091,198,1095}));
stringstates[1091] = @"598 constructor_initializer: ':' BASE . '(' argument_list_opt ')' ";
    AddState(1091,new State(new int[]{40,1092}));
stringstates[1092] = @"598 constructor_initializer: ':' BASE '(' . argument_list_opt ')' ";
    AddState(1092,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,41,-106,221,-262},new int[]{-118,1093,-95,78,-96,424,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[1093] = @"598 constructor_initializer: ':' BASE '(' argument_list_opt . ')' ";
    AddState(1093,new State(new int[]{41,1094}));
stringstates[1094] = @"598 constructor_initializer: ':' BASE '(' argument_list_opt ')' .		[';', '{', ]";
    AddState(1094,new State(-598));
stringstates[1095] = @"599 constructor_initializer: ':' THIS . '(' argument_list_opt ')' ";
    AddState(1095,new State(new int[]{40,1096}));
stringstates[1096] = @"599 constructor_initializer: ':' THIS '(' . argument_list_opt ')' ";
    AddState(1096,new State(new int[]{40,64,200,84,159,85,131,86,132,87,133,88,134,89,177,90,135,93,176,95,127,113,189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,148,198,187,138,191,151,198,150,230,202,235,192,242,145,247,205,252,33,259,126,261,43,264,45,266,42,268,260,271,261,274,38,277,187,425,180,428,41,-106,221,-262},new int[]{-118,1097,-95,78,-96,424,-94,81,-161,45,-142,46,-143,49,-122,50,-97,55,-98,63,-99,73,-73,82,-75,83,-74,91,-100,94,-101,112,-63,114,-65,117,-69,118,-66,128,-64,133,-102,138,-103,139,-33,140,-82,145,-81,146,-84,154,-37,180,-104,186,-105,190,-106,197,-107,226,-108,227,-125,228,-109,229,-110,234,-111,241,-112,246,-113,251,-121,256,-123,257,-140,258,-144,263,-145,270,-146,273,-141,276,-136,279,-160,280,-159,281,-158,325,-157,326,-156,327,-155,328,-154,329,-153,335,-152,334,-151,312,-147,309,-163,336,-167,337,-164,341,-173,342}));
stringstates[1097] = @"599 constructor_initializer: ':' THIS '(' argument_list_opt . ')' ";
    AddState(1097,new State(new int[]{41,1098}));
stringstates[1098] = @"599 constructor_initializer: ':' THIS '(' argument_list_opt ')' .		[';', '{', ]";
    AddState(1098,new State(-599));
stringstates[1099] = @"566 operator_declarator: overloadable_operator_declarator .		[';', '{', ]";
    AddState(1099,new State(-566));
stringstates[1100] = @"567 operator_declarator: conversion_operator_declarator .		[';', '{', ]";
    AddState(1100,new State(-567));
stringstates[1101] = @"592 conversion_operator_declarator: IMPLICIT . OPERATOR type '(' type IDENTIFIER ')' ";
    AddState(1101,new State(new int[]{179,1102}));
stringstates[1102] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR . type '(' type IDENTIFIER ')' ";
    AddState(1102,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,1103,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1103] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR type . '(' type IDENTIFIER ')' ";
    AddState(1103,new State(new int[]{40,1104}));
stringstates[1104] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR type '(' . type IDENTIFIER ')' ";
    AddState(1104,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,1105,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1105] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR type '(' type . IDENTIFIER ')' ";
    AddState(1105,new State(new int[]{130,1106}));
stringstates[1106] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR type '(' type IDENTIFIER . ')' ";
    AddState(1106,new State(new int[]{41,1107}));
stringstates[1107] = @"592 conversion_operator_declarator: IMPLICIT OPERATOR type '(' type IDENTIFIER ')' .		[';', '{', ]";
    AddState(1107,new State(-592));
stringstates[1108] = @"593 conversion_operator_declarator: EXPLICIT . OPERATOR type '(' type IDENTIFIER ')' ";
    AddState(1108,new State(new int[]{179,1109}));
stringstates[1109] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR . type '(' type IDENTIFIER ')' ";
    AddState(1109,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,1110,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1110] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR type . '(' type IDENTIFIER ')' ";
    AddState(1110,new State(new int[]{40,1111}));
stringstates[1111] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR type '(' . type IDENTIFIER ')' ";
    AddState(1111,new State(new int[]{189,119,141,120,191,121,207,122,169,123,203,124,174,125,204,126,144,127,162,129,153,130,149,131,139,132,178,136,195,137,130,157},new int[]{-59,1112,-61,167,-72,168,-62,169,-63,172,-65,117,-69,118,-66,128,-64,175,-71,176,-33,178,-82,145,-81,146,-84,154,-37,180,-68,181,-70,183}));
stringstates[1112] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR type '(' type . IDENTIFIER ')' ";
    AddState(1112,new State(new int[]{130,1113}));
stringstates[1113] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR type '(' type IDENTIFIER . ')' ";
    AddState(1113,new State(new int[]{41,1114}));
stringstates[1114] = @"593 conversion_operator_declarator: EXPLICIT OPERATOR type '(' type IDENTIFIER ')' .		[';', '{', ]";
    AddState(1114,new State(-593));
stringstates[1115] = @"615 struct_member_declaration: field_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1115,new State(-615));
stringstates[1116] = @"616 struct_member_declaration: method_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1116,new State(-616));
stringstates[1117] = @"516 method_declaration: method_header . in_gen_clause gen_clause_opt method_body ";
    AddState(1117,new State(-476,new int[]{-266,1118}));
stringstates[1118] = @"516 method_declaration: method_header in_gen_clause . gen_clause_opt method_body ";
    AddState(1118,new State(new int[]{213,983,59,-479,123,-479},new int[]{-269,1119,-267,981,-268,998}));
stringstates[1119] = @"516 method_declaration: method_header in_gen_clause gen_clause_opt . method_body ";
    AddState(1119,new State(new int[]{59,630,123,-313},new int[]{-124,1120,-172,204,-212,205}));
stringstates[1120] = @"516 method_declaration: method_header in_gen_clause gen_clause_opt method_body .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1120,new State(-516));
stringstates[1121] = @"617 struct_member_declaration: property_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1121,new State(-617));
stringstates[1122] = @"618 struct_member_declaration: event_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1122,new State(-618));
stringstates[1123] = @"619 struct_member_declaration: indexer_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1123,new State(-619));
stringstates[1124] = @"620 struct_member_declaration: operator_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1124,new State(-620));
stringstates[1125] = @"621 struct_member_declaration: constructor_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1125,new State(-621));
stringstates[1126] = @"622 struct_member_declaration: type_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1126,new State(-622));
stringstates[1127] = @"453 type_declaration: class_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1127,new State(-453));
stringstates[1128] = @"454 type_declaration: struct_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1128,new State(-454));
stringstates[1129] = @"455 type_declaration: interface_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1129,new State(-455));
stringstates[1130] = @"456 type_declaration: enum_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1130,new State(-456));
stringstates[1131] = @"457 type_declaration: delegate_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', CONST, VOID, EVENT, '~', SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, ]";
    AddState(1131,new State(-457));
stringstates[1132] = @"612 struct_member_declarations: struct_member_declaration .		['[', ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1132,new State(-612));
stringstates[1133] = @"607 struct_interfaces_opt: struct_interfaces .		[WHERE, '{', ]";
    AddState(1133,new State(-607));
stringstates[1134] = @"608 struct_interfaces: ':' . interface_type_list ";
    AddState(1134,new State(new int[]{130,157},new int[]{-275,1135,-71,1046,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[1135] = @"608 struct_interfaces: ':' interface_type_list .		[WHERE, '{', ]
497 interface_type_list: interface_type_list . ',' type_name ";
    AddState(1135,new State(new int[]{44,1044,213,-608,123,-608}));
stringstates[1136] = @"504 class_member_declaration: field_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1136,new State(-504));
stringstates[1137] = @"505 class_member_declaration: method_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1137,new State(-505));
stringstates[1138] = @"506 class_member_declaration: property_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1138,new State(-506));
stringstates[1139] = @"507 class_member_declaration: event_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1139,new State(-507));
stringstates[1140] = @"508 class_member_declaration: indexer_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1140,new State(-508));
stringstates[1141] = @"509 class_member_declaration: operator_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1141,new State(-509));
stringstates[1142] = @"510 class_member_declaration: constructor_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1142,new State(-510));
stringstates[1143] = @"511 class_member_declaration: destructor_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1143,new State(-511));
stringstates[1144] = @"512 class_member_declaration: type_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1144,new State(-512));
stringstates[1145] = @"513 class_member_declaration: error .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1145,new State(-513));
stringstates[1146] = @"501 class_member_declarations: class_member_declaration .		['[', error, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CONST, VOID, EVENT, '~', CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, DECIMAL, BOOL, OBJECT, KW_STRING, IDENTIFIER, IMPLICIT, EXPLICIT, '}', ]";
    AddState(1146,new State(-501));
stringstates[1147] = @"492 class_base_opt: class_base .		[WHERE, '{', ]";
    AddState(1147,new State(-492));
stringstates[1148] = @"493 class_base: ':' . class_type 
494 class_base: ':' . interface_type_list 
495 class_base: ':' . class_type ',' interface_type_list ";
    AddState(1148,new State(new int[]{178,136,195,137,130,157},new int[]{-64,1149,-275,1152,-71,1046,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[1149] = @"493 class_base: ':' class_type .		[WHERE, '{', ]
495 class_base: ':' class_type . ',' interface_type_list ";
    AddState(1149,new State(new int[]{44,1150,213,-493,123,-493}));
stringstates[1150] = @"495 class_base: ':' class_type ',' . interface_type_list ";
    AddState(1150,new State(new int[]{130,157},new int[]{-275,1151,-71,1046,-33,572,-82,145,-81,146,-84,154,-37,180}));
stringstates[1151] = @"495 class_base: ':' class_type ',' interface_type_list .		[WHERE, '{', ]
497 interface_type_list: interface_type_list . ',' type_name ";
    AddState(1151,new State(new int[]{44,1044,213,-495,123,-495}));
stringstates[1152] = @"494 class_base: ':' interface_type_list .		[WHERE, '{', ]
497 interface_type_list: interface_type_list . ',' type_name ";
    AddState(1152,new State(new int[]{44,1044,213,-494,123,-494}));
stringstates[1153] = @"451 namespace_member_declaration: type_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1153,new State(-451));
stringstates[1154] = @"452 namespace_member_declaration: error .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1154,new State(-452));
stringstates[1155] = @"448 namespace_member_declarations: namespace_member_declaration .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1155,new State(-448));
stringstates[1156] = @"421 using_directives_opt: using_directives .		['[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]
442 using_directives: using_directives . using_directive ";
    AddState(1156,new State(new int[]{208,1159,91,-421,127,-421,175,-421,136,-421,158,-421,171,-421,176,-421,181,-421,183,-421,184,-421,185,-421,186,-421,190,-421,194,-421,206,-421,209,-421,211,-421,146,-421,196,-421,170,-421,155,-421,151,-421,128,-421,125,-421},new int[]{-260,1157,-261,1158,-262,1168}));
stringstates[1157] = @"442 using_directives: using_directives using_directive .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1157,new State(-442));
stringstates[1158] = @"443 using_directive: using_alias_directive .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1158,new State(-443));
stringstates[1159] = @"445 using_alias_directive: USING . IDENTIFIER '=' qualified_identifier ';' 
446 using_namespace_directive: USING . namespace_name ';' 
447 using_namespace_directive: USING . error ";
    AddState(1159,new State(new int[]{130,1160,127,1166},new int[]{-35,1164,-33,1167,-82,145,-81,146,-84,154,-37,180}));
stringstates[1160] = @"445 using_alias_directive: USING IDENTIFIER . '=' qualified_identifier ';' 
15 member_name: IDENTIFIER . type_list_opt ";
    AddState(1160,new State(new int[]{61,1161,60,158,46,-18,59,-18},new int[]{-7,149}));
stringstates[1161] = @"445 using_alias_directive: USING IDENTIFIER '=' . qualified_identifier ';' ";
    AddState(1161,new State(new int[]{130,157},new int[]{-33,1162,-82,145,-81,146,-84,154,-37,180}));
stringstates[1162] = @"445 using_alias_directive: USING IDENTIFIER '=' qualified_identifier . ';' ";
    AddState(1162,new State(new int[]{59,1163}));
stringstates[1163] = @"445 using_alias_directive: USING IDENTIFIER '=' qualified_identifier ';' .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1163,new State(-445));
stringstates[1164] = @"446 using_namespace_directive: USING namespace_name . ';' ";
    AddState(1164,new State(new int[]{59,1165}));
stringstates[1165] = @"446 using_namespace_directive: USING namespace_name ';' .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1165,new State(-446));
stringstates[1166] = @"447 using_namespace_directive: USING error .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1166,new State(-447));
stringstates[1167] = @"13 namespace_name: qualified_identifier .		[';', ]";
    AddState(1167,new State(-13));
stringstates[1168] = @"444 using_directive: using_namespace_directive .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1168,new State(-444));
stringstates[1169] = @"441 using_directives: using_directive .		[USING, '[', error, NAMESPACE, ABSTRACT, EXTERN, INTERNAL, NEW, OVERRIDE, PRIVATE, PROTECTED, PUBLIC, READONLY, SEALED, STATIC, UNSAFE, VIRTUAL, VOLATILE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, EOF, '}', ]";
    AddState(1169,new State(-441));
stringstates[1170] = @"419 compilation_unit: using_directives_opt namespace_member_declarations .		[EOF, ]
449 namespace_member_declarations: namespace_member_declarations . namespace_member_declaration ";
    AddState(1170,new State(new int[]{91,649,127,1154,128,-419,175,-422,136,-422,158,-422,171,-422,176,-422,181,-422,183,-422,184,-422,185,-422,186,-422,190,-422,194,-422,206,-422,209,-422,211,-422,146,-422,196,-422,170,-422,155,-422,151,-422},new int[]{-26,15,-25,16,-256,17,-258,646,-314,647,-315,664,-43,1153,-38,1127,-39,1128,-40,1129,-41,1130,-42,1131}));

    rules=new Rule[679];
stringrules[1] = @"$accept -> compilation_unit EOF ";
    rules[1]=new Rule(-88, new int[]{-1,128});
stringrules[2] = @"literal -> boolean_literal ";
    rules[2]=new Rule(-73, new int[]{-75});
stringrules[3] = @"literal -> INTEGER_LITERAL ";
    rules[3]=new Rule(-73, new int[]{131});
stringrules[4] = @"literal -> REAL_LITERAL ";
    rules[4]=new Rule(-73, new int[]{132});
stringrules[5] = @"literal -> CHARACTER_LITERAL ";
    rules[5]=new Rule(-73, new int[]{133});
stringrules[6] = @"literal -> STRING_LITERAL ";
    rules[6]=new Rule(-73, new int[]{134});
stringrules[7] = @"literal -> NULL_LITERAL ";
    rules[7]=new Rule(-73, new int[]{177});
stringrules[8] = @"literal -> mllit ";
    rules[8]=new Rule(-73, new int[]{-74});
stringrules[9] = @"mllit -> MLSTRING_LITERAL ";
    rules[9]=new Rule(-74, new int[]{135});
stringrules[10] = @"mllit -> mllit MLSTRING_LITERAL ";
    rules[10]=new Rule(-74, new int[]{-74,135});
stringrules[11] = @"boolean_literal -> TRUE ";
    rules[11]=new Rule(-75, new int[]{200});
stringrules[12] = @"boolean_literal -> FALSE ";
    rules[12]=new Rule(-75, new int[]{159});
stringrules[13] = @"namespace_name -> qualified_identifier ";
    rules[13]=new Rule(-35, new int[]{-33});
stringrules[14] = @"type_name -> qualified_identifier ";
    rules[14]=new Rule(-71, new int[]{-33});
stringrules[15] = @"member_name -> IDENTIFIER type_list_opt ";
    rules[15]=new Rule(-81, new int[]{130,-7});
stringrules[16] = @"type_opt -> ";
    rules[16]=new Rule(-67, new int[]{});
stringrules[17] = @"type_opt -> type ";
    rules[17]=new Rule(-67, new int[]{-59});
stringrules[18] = @"type_list_opt -> ";
    rules[18]=new Rule(-7, new int[]{});
stringrules[19] = @"type_list_opt -> '<' type_list '>' ";
    rules[19]=new Rule(-7, new int[]{60,-6,62});
stringrules[20] = @"type_list_opt -> '<' type_list '<' type_list GTGT ";
    rules[20]=new Rule(-7, new int[]{60,-6,60,-6,248});
stringrules[21] = @"type_list -> type_opt ";
    rules[21]=new Rule(-6, new int[]{-67});
stringrules[22] = @"type_list -> type_list ',' type_opt ";
    rules[22]=new Rule(-6, new int[]{-6,44,-67});
stringrules[23] = @"type_arg_list_opt -> ";
    rules[23]=new Rule(-79, new int[]{});
stringrules[24] = @"type_arg_list_opt -> '<' type_arg_list '>' ";
    rules[24]=new Rule(-79, new int[]{60,-78,62});
stringrules[25] = @"type_arg_list -> IDENTIFIER ";
    rules[25]=new Rule(-78, new int[]{130});
stringrules[26] = @"type_arg_list -> type_arg_list ',' IDENTIFIER ";
    rules[26]=new Rule(-78, new int[]{-78,44,130});
stringrules[27] = @"nullable_opt -> ";
    rules[27]=new Rule(-89, new int[]{});
stringrules[28] = @"nullable_opt -> '?' ";
    rules[28]=new Rule(-89, new int[]{63});
stringrules[29] = @"type -> non_array_type ";
    rules[29]=new Rule(-59, new int[]{-61});
stringrules[30] = @"type -> array_type ";
    rules[30]=new Rule(-59, new int[]{-70});
stringrules[31] = @"nullable_type -> type_name '?' ";
    rules[31]=new Rule(-68, new int[]{-71,63});
stringrules[32] = @"non_null_type -> simple_type ";
    rules[32]=new Rule(-72, new int[]{-62});
stringrules[33] = @"non_null_type -> type_name ";
    rules[33]=new Rule(-72, new int[]{-71});
stringrules[34] = @"non_array_type -> non_null_type ";
    rules[34]=new Rule(-61, new int[]{-72});
stringrules[35] = @"non_array_type -> nullable_type ";
    rules[35]=new Rule(-61, new int[]{-68});
stringrules[36] = @"simple_type -> primitive_type nullable_opt ";
    rules[36]=new Rule(-62, new int[]{-63,-89});
stringrules[37] = @"simple_type -> class_type ";
    rules[37]=new Rule(-62, new int[]{-64});
stringrules[38] = @"primitive_type -> numeric_type ";
    rules[38]=new Rule(-63, new int[]{-65});
stringrules[39] = @"primitive_type -> BOOL ";
    rules[39]=new Rule(-63, new int[]{139});
stringrules[40] = @"numeric_type -> integral_type ";
    rules[40]=new Rule(-65, new int[]{-69});
stringrules[41] = @"numeric_type -> floating_point_type ";
    rules[41]=new Rule(-65, new int[]{-66});
stringrules[42] = @"numeric_type -> DECIMAL ";
    rules[42]=new Rule(-65, new int[]{149});
stringrules[43] = @"integral_type -> SBYTE ";
    rules[43]=new Rule(-69, new int[]{189});
stringrules[44] = @"integral_type -> BYTE ";
    rules[44]=new Rule(-69, new int[]{141});
stringrules[45] = @"integral_type -> SHORT ";
    rules[45]=new Rule(-69, new int[]{191});
stringrules[46] = @"integral_type -> USHORT ";
    rules[46]=new Rule(-69, new int[]{207});
stringrules[47] = @"integral_type -> INT ";
    rules[47]=new Rule(-69, new int[]{169});
stringrules[48] = @"integral_type -> UINT ";
    rules[48]=new Rule(-69, new int[]{203});
stringrules[49] = @"integral_type -> LONG ";
    rules[49]=new Rule(-69, new int[]{174});
stringrules[50] = @"integral_type -> ULONG ";
    rules[50]=new Rule(-69, new int[]{204});
stringrules[51] = @"integral_type -> CHAR ";
    rules[51]=new Rule(-69, new int[]{144});
stringrules[52] = @"floating_point_type -> FLOAT ";
    rules[52]=new Rule(-66, new int[]{162});
stringrules[53] = @"floating_point_type -> DOUBLE ";
    rules[53]=new Rule(-66, new int[]{153});
stringrules[54] = @"class_type -> OBJECT ";
    rules[54]=new Rule(-64, new int[]{178});
stringrules[55] = @"class_type -> KW_STRING ";
    rules[55]=new Rule(-64, new int[]{195});
stringrules[56] = @"pointer_type -> type '*' ";
    rules[56]=new Rule(-90, new int[]{-59,42});
stringrules[57] = @"pointer_type -> VOID '*' ";
    rules[57]=new Rule(-90, new int[]{210,42});
stringrules[58] = @"array_type -> array_type rank_specifier ";
    rules[58]=new Rule(-70, new int[]{-70,-91});
stringrules[59] = @"array_type -> nullable_type rank_specifier ";
    rules[59]=new Rule(-70, new int[]{-68,-91});
stringrules[60] = @"array_type -> simple_type rank_specifier ";
    rules[60]=new Rule(-70, new int[]{-62,-91});
stringrules[61] = @"array_type -> qualified_identifier rank_specifier ";
    rules[61]=new Rule(-70, new int[]{-33,-91});
stringrules[62] = @"rank_specifiers_opt -> ";
    rules[62]=new Rule(-92, new int[]{});
stringrules[63] = @"rank_specifiers_opt -> rank_specifier rank_specifiers_opt ";
    rules[63]=new Rule(-92, new int[]{-91,-92});
stringrules[64] = @"rank_specifier -> RANK_SPECIFIER ";
    rules[64]=new Rule(-91, new int[]{129});
stringrules[65] = @"variable_reference -> expression ";
    rules[65]=new Rule(-93, new int[]{-94});
stringrules[66] = @"argument_list -> argument ";
    rules[66]=new Rule(-95, new int[]{-96});
stringrules[67] = @"argument_list -> argument_list ',' argument ";
    rules[67]=new Rule(-95, new int[]{-95,44,-96});
stringrules[68] = @"argument -> expression ";
    rules[68]=new Rule(-96, new int[]{-94});
stringrules[69] = @"argument -> REF variable_reference ";
    rules[69]=new Rule(-96, new int[]{187,-93});
stringrules[70] = @"argument -> OUT variable_reference ";
    rules[70]=new Rule(-96, new int[]{180,-93});
stringrules[71] = @"primary_expression -> parenthesized_expression ";
    rules[71]=new Rule(-97, new int[]{-98});
stringrules[72] = @"primary_expression -> primary_expression_no_parenthesis ";
    rules[72]=new Rule(-97, new int[]{-99});
stringrules[73] = @"primary_expression -> error ";
    rules[73]=new Rule(-97, new int[]{127});
stringrules[74] = @"primary_expression_no_parenthesis -> literal ";
    rules[74]=new Rule(-99, new int[]{-73});
stringrules[75] = @"primary_expression_no_parenthesis -> array_creation_expression ";
    rules[75]=new Rule(-99, new int[]{-100});
stringrules[76] = @"primary_expression_no_parenthesis -> member_access ";
    rules[76]=new Rule(-99, new int[]{-101});
stringrules[77] = @"primary_expression_no_parenthesis -> invocation_expression ";
    rules[77]=new Rule(-99, new int[]{-102});
stringrules[78] = @"primary_expression_no_parenthesis -> element_access ";
    rules[78]=new Rule(-99, new int[]{-103});
stringrules[79] = @"primary_expression_no_parenthesis -> this_access ";
    rules[79]=new Rule(-99, new int[]{-104});
stringrules[80] = @"primary_expression_no_parenthesis -> base_access ";
    rules[80]=new Rule(-99, new int[]{-105});
stringrules[81] = @"primary_expression_no_parenthesis -> anon_delegate_expression ";
    rules[81]=new Rule(-99, new int[]{-106});
stringrules[82] = @"primary_expression_no_parenthesis -> anon_object_creation_expression ";
    rules[82]=new Rule(-99, new int[]{-107});
stringrules[83] = @"primary_expression_no_parenthesis -> new_expression ";
    rules[83]=new Rule(-99, new int[]{-108});
stringrules[84] = @"primary_expression_no_parenthesis -> default_expression ";
    rules[84]=new Rule(-99, new int[]{-109});
stringrules[85] = @"primary_expression_no_parenthesis -> typeof_expression ";
    rules[85]=new Rule(-99, new int[]{-110});
stringrules[86] = @"primary_expression_no_parenthesis -> sizeof_expression ";
    rules[86]=new Rule(-99, new int[]{-111});
stringrules[87] = @"primary_expression_no_parenthesis -> checked_expression ";
    rules[87]=new Rule(-99, new int[]{-112});
stringrules[88] = @"primary_expression_no_parenthesis -> unchecked_expression ";
    rules[88]=new Rule(-99, new int[]{-113});
stringrules[89] = @"anon_object_creation_expression -> NEW anon_object_init ";
    rules[89]=new Rule(-107, new int[]{176,-114});
stringrules[90] = @"anon_object_init -> '{' mem_dec_list_opt '}' ";
    rules[90]=new Rule(-114, new int[]{123,-115,125});
stringrules[91] = @"anon_object_init -> '{' mem_dec_list ',' '}' ";
    rules[91]=new Rule(-114, new int[]{123,-116,44,125});
stringrules[92] = @"mem_dec_list_opt -> ";
    rules[92]=new Rule(-115, new int[]{});
stringrules[93] = @"mem_dec_list_opt -> mem_dec_list ";
    rules[93]=new Rule(-115, new int[]{-116});
stringrules[94] = @"mem_dec_list -> mem_dec ";
    rules[94]=new Rule(-116, new int[]{-117});
stringrules[95] = @"mem_dec_list -> mem_dec_list ',' mem_dec ";
    rules[95]=new Rule(-116, new int[]{-116,44,-117});
stringrules[96] = @"mem_dec -> qualified_identifier ";
    rules[96]=new Rule(-117, new int[]{-33});
stringrules[97] = @"mem_dec -> member_access ";
    rules[97]=new Rule(-117, new int[]{-101});
stringrules[98] = @"mem_dec -> IDENTIFIER '=' expression ";
    rules[98]=new Rule(-117, new int[]{130,61,-94});
stringrules[99] = @"parenthesized_expression -> '(' expression ')' ";
    rules[99]=new Rule(-98, new int[]{40,-94,41});
stringrules[100] = @"member_access -> primary_expression '.' IDENTIFIER ";
    rules[100]=new Rule(-101, new int[]{-97,46,130});
stringrules[101] = @"member_access -> primitive_type '.' IDENTIFIER ";
    rules[101]=new Rule(-101, new int[]{-63,46,130});
stringrules[102] = @"member_access -> class_type '.' IDENTIFIER ";
    rules[102]=new Rule(-101, new int[]{-64,46,130});
stringrules[103] = @"default_expression -> DEFAULT '(' type ')' ";
    rules[103]=new Rule(-109, new int[]{150,40,-59,41});
stringrules[104] = @"invocation_expression -> primary_expression_no_parenthesis type_list_opt '(' argument_list_opt ')' ";
    rules[104]=new Rule(-102, new int[]{-99,-7,40,-118,41});
stringrules[105] = @"invocation_expression -> qualified_identifier '(' argument_list_opt ')' ";
    rules[105]=new Rule(-102, new int[]{-33,40,-118,41});
stringrules[106] = @"argument_list_opt -> ";
    rules[106]=new Rule(-118, new int[]{});
stringrules[107] = @"argument_list_opt -> argument_list ";
    rules[107]=new Rule(-118, new int[]{-95});
stringrules[108] = @"element_access -> primary_expression '[' expression_list ']' ";
    rules[108]=new Rule(-103, new int[]{-97,91,-119,93});
stringrules[109] = @"element_access -> qualified_identifier '[' expression_list ']' ";
    rules[109]=new Rule(-103, new int[]{-33,91,-119,93});
stringrules[110] = @"expression_list_opt -> ";
    rules[110]=new Rule(-120, new int[]{});
stringrules[111] = @"expression_list_opt -> expression_list ";
    rules[111]=new Rule(-120, new int[]{-119});
stringrules[112] = @"expression_list -> expression ";
    rules[112]=new Rule(-119, new int[]{-94});
stringrules[113] = @"expression_list -> expression_list ',' expression ";
    rules[113]=new Rule(-119, new int[]{-119,44,-94});
stringrules[114] = @"this_access -> THIS ";
    rules[114]=new Rule(-104, new int[]{198});
stringrules[115] = @"this_access -> THIS '.' IDENTIFIER ";
    rules[115]=new Rule(-104, new int[]{198,46,130});
stringrules[116] = @"base_access -> BASE '.' IDENTIFIER ";
    rules[116]=new Rule(-105, new int[]{138,46,130});
stringrules[117] = @"base_access -> BASE '[' expression_list ']' ";
    rules[117]=new Rule(-105, new int[]{138,91,-119,93});
stringrules[118] = @"post_increment_expression -> postfix_expression PLUSPLUS ";
    rules[118]=new Rule(-121, new int[]{-122,260});
stringrules[119] = @"post_decrement_expression -> postfix_expression MINUSMINUS ";
    rules[119]=new Rule(-123, new int[]{-122,261});
stringrules[120] = @"anon_delegate_expression -> DELEGATE method_body ";
    rules[120]=new Rule(-106, new int[]{151,-124});
stringrules[121] = @"anon_delegate_expression -> DELEGATE '(' formal_parameter_list_opt ')' method_body ";
    rules[121]=new Rule(-106, new int[]{151,40,-13,41,-124});
stringrules[122] = @"new_expression -> object_creation_expression ";
    rules[122]=new Rule(-108, new int[]{-125});
stringrules[123] = @"object_creation_expression -> NEW type '(' argument_list_opt ')' object_col_init_opt ";
    rules[123]=new Rule(-125, new int[]{176,-59,40,-118,41,-126});
stringrules[124] = @"object_creation_expression -> NEW type object_col_init_opt ";
    rules[124]=new Rule(-125, new int[]{176,-59,-126});
stringrules[125] = @"object_creation_expression -> NEW error ";
    rules[125]=new Rule(-125, new int[]{176,127});
stringrules[126] = @"object_col_init_opt -> ";
    rules[126]=new Rule(-126, new int[]{});
stringrules[127] = @"object_col_init_opt -> object_col_init ";
    rules[127]=new Rule(-126, new int[]{-127});
stringrules[128] = @"object_col_init -> object_init ";
    rules[128]=new Rule(-127, new int[]{-128});
stringrules[129] = @"object_col_init -> col_init ";
    rules[129]=new Rule(-127, new int[]{-129});
stringrules[130] = @"object_init -> '{' mem_init_list_opt '}' ";
    rules[130]=new Rule(-128, new int[]{123,-130,125});
stringrules[131] = @"object_init -> '{' mem_init_list ',' '}' ";
    rules[131]=new Rule(-128, new int[]{123,-131,44,125});
stringrules[132] = @"mem_init_list_opt -> ";
    rules[132]=new Rule(-130, new int[]{});
stringrules[133] = @"mem_init_list_opt -> mem_init_list ";
    rules[133]=new Rule(-130, new int[]{-131});
stringrules[134] = @"mem_init_list -> mem_init ";
    rules[134]=new Rule(-131, new int[]{-132});
stringrules[135] = @"mem_init_list -> mem_init_list ',' mem_init ";
    rules[135]=new Rule(-131, new int[]{-131,44,-132});
stringrules[136] = @"mem_init -> IDENTIFIER '=' init_value ";
    rules[136]=new Rule(-132, new int[]{130,61,-133});
stringrules[137] = @"init_value -> expression ";
    rules[137]=new Rule(-133, new int[]{-94});
stringrules[138] = @"init_value -> object_col_init ";
    rules[138]=new Rule(-133, new int[]{-127});
stringrules[139] = @"col_init -> '{' elem_init_list '}' ";
    rules[139]=new Rule(-129, new int[]{123,-134,125});
stringrules[140] = @"col_init -> '{' elem_init_list ',' '}' ";
    rules[140]=new Rule(-129, new int[]{123,-134,44,125});
stringrules[141] = @"elem_init_list -> elem_init ";
    rules[141]=new Rule(-134, new int[]{-135});
stringrules[142] = @"elem_init_list -> elem_init_list ',' elem_init ";
    rules[142]=new Rule(-134, new int[]{-134,44,-135});
stringrules[143] = @"elem_init -> nonassign_expression ";
    rules[143]=new Rule(-135, new int[]{-136});
stringrules[144] = @"elem_init -> '{' expression_list '}' ";
    rules[144]=new Rule(-135, new int[]{123,-119,125});
stringrules[145] = @"@1 -> ";
    rules[145]=new Rule(-137, new int[]{});
stringrules[146] = @"array_creation_expression -> NEW non_array_type '[' expression_list ']' @1 rank_specifiers_opt array_initializer_opt ";
    rules[146]=new Rule(-100, new int[]{176,-61,91,-119,93,-137,-92,-138});
stringrules[147] = @"array_creation_expression -> NEW array_type array_initializer ";
    rules[147]=new Rule(-100, new int[]{176,-70,-139});
stringrules[148] = @"array_creation_expression -> NEW rank_specifier array_initializer ";
    rules[148]=new Rule(-100, new int[]{176,-91,-139});
stringrules[149] = @"array_initializer_opt -> ";
    rules[149]=new Rule(-138, new int[]{});
stringrules[150] = @"array_initializer_opt -> array_initializer ";
    rules[150]=new Rule(-138, new int[]{-139});
stringrules[151] = @"typeof_expression -> TYPEOF '(' type ')' ";
    rules[151]=new Rule(-110, new int[]{202,40,-59,41});
stringrules[152] = @"typeof_expression -> TYPEOF '(' VOID ')' ";
    rules[152]=new Rule(-110, new int[]{202,40,210,41});
stringrules[153] = @"checked_expression -> CHECKED '(' expression ')' ";
    rules[153]=new Rule(-112, new int[]{145,40,-94,41});
stringrules[154] = @"unchecked_expression -> UNCHECKED '(' expression ')' ";
    rules[154]=new Rule(-113, new int[]{205,40,-94,41});
stringrules[155] = @"pointer_member_access -> postfix_expression ARROW IDENTIFIER ";
    rules[155]=new Rule(-140, new int[]{-122,262,130});
stringrules[156] = @"addressof_expression -> '&' unary_expression ";
    rules[156]=new Rule(-141, new int[]{38,-142});
stringrules[157] = @"sizeof_expression -> SIZEOF '(' type ')' ";
    rules[157]=new Rule(-111, new int[]{192,40,-59,41});
stringrules[158] = @"postfix_expression -> primary_expression ";
    rules[158]=new Rule(-122, new int[]{-97});
stringrules[159] = @"postfix_expression -> qualified_identifier ";
    rules[159]=new Rule(-122, new int[]{-33});
stringrules[160] = @"postfix_expression -> post_increment_expression ";
    rules[160]=new Rule(-122, new int[]{-121});
stringrules[161] = @"postfix_expression -> post_decrement_expression ";
    rules[161]=new Rule(-122, new int[]{-123});
stringrules[162] = @"postfix_expression -> pointer_member_access ";
    rules[162]=new Rule(-122, new int[]{-140});
stringrules[163] = @"unary_expression_not_plusminus -> postfix_expression ";
    rules[163]=new Rule(-143, new int[]{-122});
stringrules[164] = @"unary_expression_not_plusminus -> '!' unary_expression ";
    rules[164]=new Rule(-143, new int[]{33,-142});
stringrules[165] = @"unary_expression_not_plusminus -> '~' unary_expression ";
    rules[165]=new Rule(-143, new int[]{126,-142});
stringrules[166] = @"unary_expression_not_plusminus -> cast_expression ";
    rules[166]=new Rule(-143, new int[]{-144});
stringrules[167] = @"pre_increment_expression -> PLUSPLUS unary_expression ";
    rules[167]=new Rule(-145, new int[]{260,-142});
stringrules[168] = @"pre_decrement_expression -> MINUSMINUS unary_expression ";
    rules[168]=new Rule(-146, new int[]{261,-142});
stringrules[169] = @"unary_expression -> unary_expression_not_plusminus ";
    rules[169]=new Rule(-142, new int[]{-143});
stringrules[170] = @"unary_expression -> '+' unary_expression ";
    rules[170]=new Rule(-142, new int[]{43,-142});
stringrules[171] = @"unary_expression -> '-' unary_expression ";
    rules[171]=new Rule(-142, new int[]{45,-142});
stringrules[172] = @"unary_expression -> '*' unary_expression ";
    rules[172]=new Rule(-142, new int[]{42,-142});
stringrules[173] = @"unary_expression -> pre_increment_expression ";
    rules[173]=new Rule(-142, new int[]{-145});
stringrules[174] = @"unary_expression -> pre_decrement_expression ";
    rules[174]=new Rule(-142, new int[]{-146});
stringrules[175] = @"unary_expression -> addressof_expression ";
    rules[175]=new Rule(-142, new int[]{-141});
stringrules[176] = @"cast_expression -> '(' IDENTIFIER '?' ')' unary_expression_not_plusminus ";
    rules[176]=new Rule(-144, new int[]{40,130,63,41,-143});
stringrules[177] = @"cast_expression -> '(' expression ')' unary_expression_not_plusminus ";
    rules[177]=new Rule(-144, new int[]{40,-94,41,-143});
stringrules[178] = @"cast_expression -> '(' multiplicative_expression '*' ')' unary_expression ";
    rules[178]=new Rule(-144, new int[]{40,-147,42,41,-142});
stringrules[179] = @"cast_expression -> '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression ";
    rules[179]=new Rule(-144, new int[]{40,-33,-91,-148,41,-142});
stringrules[180] = @"cast_expression -> '(' qualified_identifier '?' rank_specifier ')' unary_expression ";
    rules[180]=new Rule(-144, new int[]{40,-33,63,-91,41,-142});
stringrules[181] = @"cast_expression -> '(' primitive_type type_quals_opt ')' unary_expression ";
    rules[181]=new Rule(-144, new int[]{40,-63,-148,41,-142});
stringrules[182] = @"cast_expression -> '(' class_type type_quals_opt ')' unary_expression ";
    rules[182]=new Rule(-144, new int[]{40,-64,-148,41,-142});
stringrules[183] = @"cast_expression -> '(' primitive_type '?' ')' unary_expression ";
    rules[183]=new Rule(-144, new int[]{40,-63,63,41,-142});
stringrules[184] = @"cast_expression -> '(' primitive_type '?' rank_specifier ')' unary_expression ";
    rules[184]=new Rule(-144, new int[]{40,-63,63,-91,41,-142});
stringrules[185] = @"cast_expression -> '(' qualified_identifier '?' ')' unary_expression ";
    rules[185]=new Rule(-144, new int[]{40,-33,63,41,-142});
stringrules[186] = @"cast_expression -> '(' VOID type_quals_opt ')' unary_expression ";
    rules[186]=new Rule(-144, new int[]{40,210,-148,41,-142});
stringrules[187] = @"type_quals_opt -> ";
    rules[187]=new Rule(-148, new int[]{});
stringrules[188] = @"type_quals_opt -> type_quals ";
    rules[188]=new Rule(-148, new int[]{-149});
stringrules[189] = @"type_quals -> type_qual ";
    rules[189]=new Rule(-149, new int[]{-150});
stringrules[190] = @"type_quals -> type_quals type_qual ";
    rules[190]=new Rule(-149, new int[]{-149,-150});
stringrules[191] = @"type_qual -> rank_specifier ";
    rules[191]=new Rule(-150, new int[]{-91});
stringrules[192] = @"type_qual -> '*' ";
    rules[192]=new Rule(-150, new int[]{42});
stringrules[193] = @"multiplicative_expression -> unary_expression ";
    rules[193]=new Rule(-147, new int[]{-142});
stringrules[194] = @"multiplicative_expression -> multiplicative_expression '*' unary_expression ";
    rules[194]=new Rule(-147, new int[]{-147,42,-142});
stringrules[195] = @"multiplicative_expression -> multiplicative_expression '/' unary_expression ";
    rules[195]=new Rule(-147, new int[]{-147,47,-142});
stringrules[196] = @"multiplicative_expression -> multiplicative_expression '%' unary_expression ";
    rules[196]=new Rule(-147, new int[]{-147,37,-142});
stringrules[197] = @"additive_expression -> multiplicative_expression ";
    rules[197]=new Rule(-151, new int[]{-147});
stringrules[198] = @"additive_expression -> additive_expression '+' multiplicative_expression ";
    rules[198]=new Rule(-151, new int[]{-151,43,-147});
stringrules[199] = @"additive_expression -> additive_expression '-' multiplicative_expression ";
    rules[199]=new Rule(-151, new int[]{-151,45,-147});
stringrules[200] = @"shift_expression -> additive_expression ";
    rules[200]=new Rule(-152, new int[]{-151});
stringrules[201] = @"shift_expression -> shift_expression LTLT additive_expression ";
    rules[201]=new Rule(-152, new int[]{-152,252,-151});
stringrules[202] = @"shift_expression -> shift_expression GTGT additive_expression ";
    rules[202]=new Rule(-152, new int[]{-152,248,-151});
stringrules[203] = @"relational_expression -> shift_expression ";
    rules[203]=new Rule(-153, new int[]{-152});
stringrules[204] = @"relational_expression -> relational_expression '<' shift_expression ";
    rules[204]=new Rule(-153, new int[]{-153,60,-152});
stringrules[205] = @"relational_expression -> relational_expression '>' shift_expression ";
    rules[205]=new Rule(-153, new int[]{-153,62,-152});
stringrules[206] = @"relational_expression -> relational_expression LEQ shift_expression ";
    rules[206]=new Rule(-153, new int[]{-153,256,-152});
stringrules[207] = @"relational_expression -> relational_expression GEQ shift_expression ";
    rules[207]=new Rule(-153, new int[]{-153,257,-152});
stringrules[208] = @"relational_expression -> relational_expression IS type ";
    rules[208]=new Rule(-153, new int[]{-153,172,-59});
stringrules[209] = @"relational_expression -> relational_expression IS nullable_type expression ':' expression ";
    rules[209]=new Rule(-153, new int[]{-153,172,-68,-94,58,-94});
stringrules[210] = @"relational_expression -> relational_expression AS type ";
    rules[210]=new Rule(-153, new int[]{-153,137,-59});
stringrules[211] = @"equality_expression -> relational_expression ";
    rules[211]=new Rule(-154, new int[]{-153});
stringrules[212] = @"equality_expression -> equality_expression EQEQ relational_expression ";
    rules[212]=new Rule(-154, new int[]{-154,254,-153});
stringrules[213] = @"equality_expression -> equality_expression NOTEQ relational_expression ";
    rules[213]=new Rule(-154, new int[]{-154,255,-153});
stringrules[214] = @"and_expression -> equality_expression ";
    rules[214]=new Rule(-155, new int[]{-154});
stringrules[215] = @"and_expression -> and_expression '&' equality_expression ";
    rules[215]=new Rule(-155, new int[]{-155,38,-154});
stringrules[216] = @"exclusive_or_expression -> and_expression ";
    rules[216]=new Rule(-156, new int[]{-155});
stringrules[217] = @"exclusive_or_expression -> exclusive_or_expression '^' and_expression ";
    rules[217]=new Rule(-156, new int[]{-156,94,-155});
stringrules[218] = @"inclusive_or_expression -> exclusive_or_expression ";
    rules[218]=new Rule(-157, new int[]{-156});
stringrules[219] = @"inclusive_or_expression -> inclusive_or_expression '|' exclusive_or_expression ";
    rules[219]=new Rule(-157, new int[]{-157,124,-156});
stringrules[220] = @"conditional_and_expression -> inclusive_or_expression ";
    rules[220]=new Rule(-158, new int[]{-157});
stringrules[221] = @"conditional_and_expression -> conditional_and_expression ANDAND inclusive_or_expression ";
    rules[221]=new Rule(-158, new int[]{-158,258,-157});
stringrules[222] = @"conditional_or_expression -> conditional_and_expression ";
    rules[222]=new Rule(-159, new int[]{-158});
stringrules[223] = @"conditional_or_expression -> conditional_or_expression OROR conditional_and_expression ";
    rules[223]=new Rule(-159, new int[]{-159,259,-158});
stringrules[224] = @"conditional_expression -> conditional_or_expression ";
    rules[224]=new Rule(-160, new int[]{-159});
stringrules[225] = @"conditional_expression -> IDENTIFIER '?' expression ':' expression ";
    rules[225]=new Rule(-160, new int[]{130,63,-94,58,-94});
stringrules[226] = @"conditional_expression -> conditional_or_expression '?' expression ':' expression ";
    rules[226]=new Rule(-160, new int[]{-159,63,-94,58,-94});
stringrules[227] = @"conditional_expression -> conditional_or_expression QQ expression ";
    rules[227]=new Rule(-160, new int[]{-159,246,-94});
stringrules[228] = @"assignment -> unary_expression assignment_operator expression ";
    rules[228]=new Rule(-161, new int[]{-142,-162,-94});
stringrules[229] = @"assignment_operator -> '=' ";
    rules[229]=new Rule(-162, new int[]{61});
stringrules[230] = @"assignment_operator -> PLUSEQ ";
    rules[230]=new Rule(-162, new int[]{241});
stringrules[231] = @"assignment_operator -> MINUSEQ ";
    rules[231]=new Rule(-162, new int[]{242});
stringrules[232] = @"assignment_operator -> STAREQ ";
    rules[232]=new Rule(-162, new int[]{243});
stringrules[233] = @"assignment_operator -> DIVEQ ";
    rules[233]=new Rule(-162, new int[]{244});
stringrules[234] = @"assignment_operator -> MODEQ ";
    rules[234]=new Rule(-162, new int[]{245});
stringrules[235] = @"assignment_operator -> XOREQ ";
    rules[235]=new Rule(-162, new int[]{249});
stringrules[236] = @"assignment_operator -> ANDEQ ";
    rules[236]=new Rule(-162, new int[]{250});
stringrules[237] = @"assignment_operator -> OREQ ";
    rules[237]=new Rule(-162, new int[]{251});
stringrules[238] = @"assignment_operator -> LTLTEQ ";
    rules[238]=new Rule(-162, new int[]{253});
stringrules[239] = @"assignment_operator -> GTGTEQ ";
    rules[239]=new Rule(-162, new int[]{247});
stringrules[240] = @"expression -> assignment ";
    rules[240]=new Rule(-94, new int[]{-161});
stringrules[241] = @"expression -> nonassign_expression ";
    rules[241]=new Rule(-94, new int[]{-136});
stringrules[242] = @"nonassign_expression -> conditional_expression ";
    rules[242]=new Rule(-136, new int[]{-160});
stringrules[243] = @"nonassign_expression -> lambda_expression ";
    rules[243]=new Rule(-136, new int[]{-163});
stringrules[244] = @"nonassign_expression -> query_expression ";
    rules[244]=new Rule(-136, new int[]{-164});
stringrules[245] = @"lambda_expression -> '(' lambda_paramlist_opt ')' LAMBDA lambda_expression_body ";
    rules[245]=new Rule(-163, new int[]{40,-165,41,263,-166});
stringrules[246] = @"lambda_expression -> '(' IDENTIFIER ')' LAMBDA lambda_expression_body ";
    rules[246]=new Rule(-163, new int[]{40,130,41,263,-166});
stringrules[247] = @"lambda_expression -> impltype_lambda_parameter LAMBDA lambda_expression_body ";
    rules[247]=new Rule(-163, new int[]{-167,263,-166});
stringrules[248] = @"lambda_expression -> '(' IDENTIFIER ',' impltype_lambda_paramlist ')' LAMBDA lambda_expression_body ";
    rules[248]=new Rule(-163, new int[]{40,130,44,-168,41,263,-166});
stringrules[249] = @"lambda_paramlist_opt -> ";
    rules[249]=new Rule(-165, new int[]{});
stringrules[250] = @"lambda_paramlist_opt -> lambda_paramlist ";
    rules[250]=new Rule(-165, new int[]{-169});
stringrules[251] = @"lambda_paramlist -> expltype_lambda_paramlist ";
    rules[251]=new Rule(-169, new int[]{-170});
stringrules[252] = @"expltype_lambda_paramlist -> expltype_lambda_parameter ";
    rules[252]=new Rule(-170, new int[]{-171});
stringrules[253] = @"expltype_lambda_paramlist -> expltype_lambda_paramlist ',' expltype_lambda_parameter ";
    rules[253]=new Rule(-170, new int[]{-170,44,-171});
stringrules[254] = @"impltype_lambda_paramlist -> impltype_lambda_parameter ";
    rules[254]=new Rule(-168, new int[]{-167});
stringrules[255] = @"impltype_lambda_paramlist -> impltype_lambda_paramlist ',' impltype_lambda_parameter ";
    rules[255]=new Rule(-168, new int[]{-168,44,-167});
stringrules[256] = @"expltype_lambda_parameter -> type IDENTIFIER ";
    rules[256]=new Rule(-171, new int[]{-59,130});
stringrules[257] = @"impltype_lambda_parameter -> IDENTIFIER ";
    rules[257]=new Rule(-167, new int[]{130});
stringrules[258] = @"lambda_expression_body -> expression ";
    rules[258]=new Rule(-166, new int[]{-94});
stringrules[259] = @"lambda_expression_body -> block ";
    rules[259]=new Rule(-166, new int[]{-172});
stringrules[260] = @"query_expression -> start_query from_clause query_body end_query ";
    rules[260]=new Rule(-164, new int[]{-173,-174,-175,-176});
stringrules[261] = @"from_clause -> FROM type_opt IDENTIFIER IN expression ";
    rules[261]=new Rule(-174, new int[]{221,-67,130,168,-94});
stringrules[262] = @"start_query -> ";
    rules[262]=new Rule(-173, new int[]{});
stringrules[263] = @"end_query -> ";
    rules[263]=new Rule(-176, new int[]{});
stringrules[264] = @"query_body -> query_body_clauses_opt select_or_group_clause query_continuation_opt ";
    rules[264]=new Rule(-175, new int[]{-177,-178,-179});
stringrules[265] = @"query_body_clauses_opt -> ";
    rules[265]=new Rule(-177, new int[]{});
stringrules[266] = @"query_body_clauses_opt -> query_body_clauses ";
    rules[266]=new Rule(-177, new int[]{-180});
stringrules[267] = @"query_body_clauses -> query_body_clause ";
    rules[267]=new Rule(-180, new int[]{-181});
stringrules[268] = @"query_body_clauses -> query_body_clauses query_body_clause ";
    rules[268]=new Rule(-180, new int[]{-180,-181});
stringrules[269] = @"query_body_clause -> from_clause ";
    rules[269]=new Rule(-181, new int[]{-174});
stringrules[270] = @"query_body_clause -> let_clause ";
    rules[270]=new Rule(-181, new int[]{-182});
stringrules[271] = @"query_body_clause -> where_clause ";
    rules[271]=new Rule(-181, new int[]{-183});
stringrules[272] = @"query_body_clause -> join_clause ";
    rules[272]=new Rule(-181, new int[]{-184});
stringrules[273] = @"query_body_clause -> join_into_clause ";
    rules[273]=new Rule(-181, new int[]{-185});
stringrules[274] = @"query_body_clause -> orderby_clause ";
    rules[274]=new Rule(-181, new int[]{-186});
stringrules[275] = @"let_clause -> LET IDENTIFIER '=' expression ";
    rules[275]=new Rule(-182, new int[]{222,130,61,-94});
stringrules[276] = @"where_clause -> WHERE boolean_expression ";
    rules[276]=new Rule(-183, new int[]{213,-187});
stringrules[277] = @"join_clause -> JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression ";
    rules[277]=new Rule(-184, new int[]{223,-67,130,168,-94,228,-94,224,-94});
stringrules[278] = @"join_into_clause -> JOIN type_opt IDENTIFIER IN expression ON expression EQUALS expression INTO IDENTIFIER ";
    rules[278]=new Rule(-185, new int[]{223,-67,130,168,-94,228,-94,224,-94,219,130});
stringrules[279] = @"orderby_clause -> ORDERBY orderings ";
    rules[279]=new Rule(-186, new int[]{220,-188});
stringrules[280] = @"orderings -> ordering ";
    rules[280]=new Rule(-188, new int[]{-189});
stringrules[281] = @"orderings -> orderings ',' ordering ";
    rules[281]=new Rule(-188, new int[]{-188,44,-189});
stringrules[282] = @"ordering -> expression ordering_direction_opt ";
    rules[282]=new Rule(-189, new int[]{-94,-190});
stringrules[283] = @"ordering_direction_opt -> ";
    rules[283]=new Rule(-190, new int[]{});
stringrules[284] = @"ordering_direction_opt -> ordering_direction ";
    rules[284]=new Rule(-190, new int[]{-191});
stringrules[285] = @"ordering_direction -> ASCENDING ";
    rules[285]=new Rule(-191, new int[]{225});
stringrules[286] = @"ordering_direction -> DESCENDING ";
    rules[286]=new Rule(-191, new int[]{226});
stringrules[287] = @"select_or_group_clause -> select_clause ";
    rules[287]=new Rule(-178, new int[]{-192});
stringrules[288] = @"select_or_group_clause -> group_clause ";
    rules[288]=new Rule(-178, new int[]{-193});
stringrules[289] = @"select_clause -> SELECT expression ";
    rules[289]=new Rule(-192, new int[]{218,-94});
stringrules[290] = @"group_clause -> GROUP expression BY expression ";
    rules[290]=new Rule(-193, new int[]{227,-94,229,-94});
stringrules[291] = @"query_continuation_opt -> ";
    rules[291]=new Rule(-179, new int[]{});
stringrules[292] = @"query_continuation_opt -> query_continuation ";
    rules[292]=new Rule(-179, new int[]{-194});
stringrules[293] = @"query_continuation -> INTO IDENTIFIER query_body ";
    rules[293]=new Rule(-194, new int[]{219,130,-175});
stringrules[294] = @"constant_expression -> expression ";
    rules[294]=new Rule(-195, new int[]{-94});
stringrules[295] = @"boolean_expression -> expression ";
    rules[295]=new Rule(-187, new int[]{-94});
stringrules[296] = @"statement -> labeled_statement ";
    rules[296]=new Rule(-196, new int[]{-197});
stringrules[297] = @"statement -> declaration_statement ";
    rules[297]=new Rule(-196, new int[]{-198});
stringrules[298] = @"statement -> embedded_statement ";
    rules[298]=new Rule(-196, new int[]{-199});
stringrules[299] = @"embedded_statement -> block ";
    rules[299]=new Rule(-199, new int[]{-172});
stringrules[300] = @"embedded_statement -> empty_statement ";
    rules[300]=new Rule(-199, new int[]{-200});
stringrules[301] = @"embedded_statement -> expression_statement ";
    rules[301]=new Rule(-199, new int[]{-201});
stringrules[302] = @"embedded_statement -> selection_statement ";
    rules[302]=new Rule(-199, new int[]{-202});
stringrules[303] = @"embedded_statement -> iteration_statement ";
    rules[303]=new Rule(-199, new int[]{-203});
stringrules[304] = @"embedded_statement -> jump_statement ";
    rules[304]=new Rule(-199, new int[]{-204});
stringrules[305] = @"embedded_statement -> try_statement ";
    rules[305]=new Rule(-199, new int[]{-205});
stringrules[306] = @"embedded_statement -> checked_statement ";
    rules[306]=new Rule(-199, new int[]{-206});
stringrules[307] = @"embedded_statement -> unchecked_statement ";
    rules[307]=new Rule(-199, new int[]{-207});
stringrules[308] = @"embedded_statement -> lock_statement ";
    rules[308]=new Rule(-199, new int[]{-208});
stringrules[309] = @"embedded_statement -> using_statement ";
    rules[309]=new Rule(-199, new int[]{-209});
stringrules[310] = @"embedded_statement -> unsafe_statement ";
    rules[310]=new Rule(-199, new int[]{-210});
stringrules[311] = @"embedded_statement -> fixed_statement ";
    rules[311]=new Rule(-199, new int[]{-211});
stringrules[312] = @"block -> block_start '{' statement_list_opt '}' block_end ";
    rules[312]=new Rule(-172, new int[]{-212,123,-213,125,-214});
stringrules[313] = @"block_start -> ";
    rules[313]=new Rule(-212, new int[]{});
stringrules[314] = @"block_end -> ";
    rules[314]=new Rule(-214, new int[]{});
stringrules[315] = @"statement_list_opt -> ";
    rules[315]=new Rule(-213, new int[]{});
stringrules[316] = @"statement_list_opt -> statement_list ";
    rules[316]=new Rule(-213, new int[]{-215});
stringrules[317] = @"statement_list -> statement ";
    rules[317]=new Rule(-215, new int[]{-196});
stringrules[318] = @"statement_list -> statement_list statement ";
    rules[318]=new Rule(-215, new int[]{-215,-196});
stringrules[319] = @"empty_statement -> ';' ";
    rules[319]=new Rule(-200, new int[]{59});
stringrules[320] = @"labeled_statement -> IDENTIFIER ':' statement ";
    rules[320]=new Rule(-197, new int[]{130,58,-196});
stringrules[321] = @"declaration_statement -> local_variable_declaration ';' ";
    rules[321]=new Rule(-198, new int[]{-216,59});
stringrules[322] = @"declaration_statement -> local_constant_declaration ';' ";
    rules[322]=new Rule(-198, new int[]{-217,59});
stringrules[323] = @"local_variable_declaration -> type variable_declarators ";
    rules[323]=new Rule(-216, new int[]{-59,-76});
stringrules[324] = @"local_variable_declaration -> FROM variable_declarators ";
    rules[324]=new Rule(-216, new int[]{221,-76});
stringrules[325] = @"variable_declarators -> variable_declarator ";
    rules[325]=new Rule(-76, new int[]{-31});
stringrules[326] = @"variable_declarators -> variable_declarators ',' variable_declarator ";
    rules[326]=new Rule(-76, new int[]{-76,44,-31});
stringrules[327] = @"variable_declarator -> IDENTIFIER ";
    rules[327]=new Rule(-31, new int[]{130});
stringrules[328] = @"variable_declarator -> IDENTIFIER '=' variable_initializer ";
    rules[328]=new Rule(-31, new int[]{130,61,-218});
stringrules[329] = @"variable_initializer -> expression ";
    rules[329]=new Rule(-218, new int[]{-94});
stringrules[330] = @"variable_initializer -> array_initializer ";
    rules[330]=new Rule(-218, new int[]{-139});
stringrules[331] = @"variable_initializer -> stackalloc_initializer ";
    rules[331]=new Rule(-218, new int[]{-219});
stringrules[332] = @"stackalloc_initializer -> STACKALLOC type '[' expression ']' ";
    rules[332]=new Rule(-219, new int[]{193,-59,91,-94,93});
stringrules[333] = @"local_constant_declaration -> CONST type constant_declarators ";
    rules[333]=new Rule(-217, new int[]{147,-59,-77});
stringrules[334] = @"constant_declarators -> constant_declarator ";
    rules[334]=new Rule(-77, new int[]{-32});
stringrules[335] = @"constant_declarators -> constant_declarators ',' constant_declarator ";
    rules[335]=new Rule(-77, new int[]{-77,44,-32});
stringrules[336] = @"constant_declarator -> IDENTIFIER '=' constant_expression ";
    rules[336]=new Rule(-32, new int[]{130,61,-195});
stringrules[337] = @"expression_statement -> statement_expression ';' ";
    rules[337]=new Rule(-201, new int[]{-220,59});
stringrules[338] = @"statement_expression -> invocation_expression ";
    rules[338]=new Rule(-220, new int[]{-102});
stringrules[339] = @"statement_expression -> object_creation_expression ";
    rules[339]=new Rule(-220, new int[]{-125});
stringrules[340] = @"statement_expression -> assignment ";
    rules[340]=new Rule(-220, new int[]{-161});
stringrules[341] = @"statement_expression -> post_increment_expression ";
    rules[341]=new Rule(-220, new int[]{-121});
stringrules[342] = @"statement_expression -> post_decrement_expression ";
    rules[342]=new Rule(-220, new int[]{-123});
stringrules[343] = @"statement_expression -> pre_increment_expression ";
    rules[343]=new Rule(-220, new int[]{-145});
stringrules[344] = @"statement_expression -> pre_decrement_expression ";
    rules[344]=new Rule(-220, new int[]{-146});
stringrules[345] = @"selection_statement -> if_statement ";
    rules[345]=new Rule(-202, new int[]{-221});
stringrules[346] = @"selection_statement -> switch_statement ";
    rules[346]=new Rule(-202, new int[]{-222});
stringrules[347] = @"if_statement -> IF '(' boolean_expression ')' embedded_statement ";
    rules[347]=new Rule(-221, new int[]{166,40,-187,41,-199});
stringrules[348] = @"if_statement -> IF '(' boolean_expression ')' embedded_statement ELSE embedded_statement ";
    rules[348]=new Rule(-221, new int[]{166,40,-187,41,-199,154,-199});
stringrules[349] = @"switch_statement -> SWITCH '(' expression ')' switch_block ";
    rules[349]=new Rule(-222, new int[]{197,40,-94,41,-223});
stringrules[350] = @"switch_block -> '{' switch_sections_opt '}' ";
    rules[350]=new Rule(-223, new int[]{123,-224,125});
stringrules[351] = @"switch_sections_opt -> ";
    rules[351]=new Rule(-224, new int[]{});
stringrules[352] = @"switch_sections_opt -> switch_sections ";
    rules[352]=new Rule(-224, new int[]{-225});
stringrules[353] = @"switch_sections -> switch_section ";
    rules[353]=new Rule(-225, new int[]{-226});
stringrules[354] = @"switch_sections -> switch_sections switch_section ";
    rules[354]=new Rule(-225, new int[]{-225,-226});
stringrules[355] = @"switch_section -> switch_labels statement_list ";
    rules[355]=new Rule(-226, new int[]{-227,-215});
stringrules[356] = @"switch_labels -> switch_label ";
    rules[356]=new Rule(-227, new int[]{-228});
stringrules[357] = @"switch_labels -> switch_labels switch_label ";
    rules[357]=new Rule(-227, new int[]{-227,-228});
stringrules[358] = @"switch_label -> CASE constant_expression ':' ";
    rules[358]=new Rule(-228, new int[]{142,-195,58});
stringrules[359] = @"switch_label -> DEFAULT ':' ";
    rules[359]=new Rule(-228, new int[]{150,58});
stringrules[360] = @"iteration_statement -> while_statement ";
    rules[360]=new Rule(-203, new int[]{-229});
stringrules[361] = @"iteration_statement -> do_statement ";
    rules[361]=new Rule(-203, new int[]{-230});
stringrules[362] = @"iteration_statement -> for_statement ";
    rules[362]=new Rule(-203, new int[]{-231});
stringrules[363] = @"iteration_statement -> foreach_statement ";
    rules[363]=new Rule(-203, new int[]{-232});
stringrules[364] = @"unsafe_statement -> UNSAFE block ";
    rules[364]=new Rule(-210, new int[]{206,-172});
stringrules[365] = @"while_statement -> WHILE '(' boolean_expression ')' embedded_statement ";
    rules[365]=new Rule(-229, new int[]{212,40,-187,41,-199});
stringrules[366] = @"do_statement -> DO embedded_statement WHILE '(' boolean_expression ')' ';' ";
    rules[366]=new Rule(-230, new int[]{152,-199,212,40,-187,41,59});
stringrules[367] = @"@2 -> ";
    rules[367]=new Rule(-236, new int[]{});
stringrules[368] = @"for_statement -> FOR '(' for_initializer_opt ';' for_condition_opt ';' for_iterator_opt ')' @2 embedded_statement ";
    rules[368]=new Rule(-231, new int[]{163,40,-233,59,-234,59,-235,41,-236,-199});
stringrules[369] = @"for_initializer_opt -> ";
    rules[369]=new Rule(-233, new int[]{});
stringrules[370] = @"for_initializer_opt -> for_initializer ";
    rules[370]=new Rule(-233, new int[]{-237});
stringrules[371] = @"for_condition_opt -> ";
    rules[371]=new Rule(-234, new int[]{});
stringrules[372] = @"for_condition_opt -> for_condition ";
    rules[372]=new Rule(-234, new int[]{-238});
stringrules[373] = @"for_iterator_opt -> ";
    rules[373]=new Rule(-235, new int[]{});
stringrules[374] = @"for_iterator_opt -> for_iterator ";
    rules[374]=new Rule(-235, new int[]{-239});
stringrules[375] = @"for_initializer -> local_variable_declaration ";
    rules[375]=new Rule(-237, new int[]{-216});
stringrules[376] = @"for_initializer -> statement_expression_list ";
    rules[376]=new Rule(-237, new int[]{-240});
stringrules[377] = @"for_condition -> boolean_expression ";
    rules[377]=new Rule(-238, new int[]{-187});
stringrules[378] = @"for_iterator -> statement_expression_list ";
    rules[378]=new Rule(-239, new int[]{-240});
stringrules[379] = @"statement_expression_list -> statement_expression ";
    rules[379]=new Rule(-240, new int[]{-220});
stringrules[380] = @"statement_expression_list -> statement_expression_list ',' statement_expression ";
    rules[380]=new Rule(-240, new int[]{-240,44,-220});
stringrules[381] = @"foreach_statement -> FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement ";
    rules[381]=new Rule(-232, new int[]{164,40,-59,130,168,-94,41,-199});
stringrules[382] = @"jump_statement -> break_statement ";
    rules[382]=new Rule(-204, new int[]{-241});
stringrules[383] = @"jump_statement -> continue_statement ";
    rules[383]=new Rule(-204, new int[]{-242});
stringrules[384] = @"jump_statement -> goto_statement ";
    rules[384]=new Rule(-204, new int[]{-243});
stringrules[385] = @"jump_statement -> return_statement ";
    rules[385]=new Rule(-204, new int[]{-244});
stringrules[386] = @"jump_statement -> throw_statement ";
    rules[386]=new Rule(-204, new int[]{-245});
stringrules[387] = @"break_statement -> BREAK ';' ";
    rules[387]=new Rule(-241, new int[]{140,59});
stringrules[388] = @"continue_statement -> CONTINUE ';' ";
    rules[388]=new Rule(-242, new int[]{148,59});
stringrules[389] = @"goto_statement -> GOTO IDENTIFIER ';' ";
    rules[389]=new Rule(-243, new int[]{165,130,59});
stringrules[390] = @"goto_statement -> GOTO CASE constant_expression ';' ";
    rules[390]=new Rule(-243, new int[]{165,142,-195,59});
stringrules[391] = @"goto_statement -> GOTO DEFAULT ';' ";
    rules[391]=new Rule(-243, new int[]{165,150,59});
stringrules[392] = @"return_statement -> RETURN expression_opt ';' ";
    rules[392]=new Rule(-244, new int[]{188,-246,59});
stringrules[393] = @"expression_opt -> ";
    rules[393]=new Rule(-246, new int[]{});
stringrules[394] = @"expression_opt -> expression ";
    rules[394]=new Rule(-246, new int[]{-94});
stringrules[395] = @"throw_statement -> THROW expression_opt ';' ";
    rules[395]=new Rule(-245, new int[]{199,-246,59});
stringrules[396] = @"try_statement -> TRY block catch_clauses ";
    rules[396]=new Rule(-205, new int[]{201,-172,-247});
stringrules[397] = @"try_statement -> TRY block finally_clause ";
    rules[397]=new Rule(-205, new int[]{201,-172,-248});
stringrules[398] = @"try_statement -> TRY block catch_clauses finally_clause ";
    rules[398]=new Rule(-205, new int[]{201,-172,-247,-248});
stringrules[399] = @"catch_clauses -> catch_clause ";
    rules[399]=new Rule(-247, new int[]{-249});
stringrules[400] = @"catch_clauses -> catch_clauses catch_clause ";
    rules[400]=new Rule(-247, new int[]{-247,-249});
stringrules[401] = @"catch_clause -> CATCH '(' class_type identifier_opt ')' block ";
    rules[401]=new Rule(-249, new int[]{143,40,-64,-250,41,-172});
stringrules[402] = @"catch_clause -> CATCH '(' type_name identifier_opt ')' block ";
    rules[402]=new Rule(-249, new int[]{143,40,-71,-250,41,-172});
stringrules[403] = @"catch_clause -> CATCH block ";
    rules[403]=new Rule(-249, new int[]{143,-172});
stringrules[404] = @"identifier_opt -> ";
    rules[404]=new Rule(-250, new int[]{});
stringrules[405] = @"identifier_opt -> IDENTIFIER ";
    rules[405]=new Rule(-250, new int[]{130});
stringrules[406] = @"finally_clause -> FINALLY block ";
    rules[406]=new Rule(-248, new int[]{160,-172});
stringrules[407] = @"checked_statement -> CHECKED block ";
    rules[407]=new Rule(-206, new int[]{145,-172});
stringrules[408] = @"unchecked_statement -> UNCHECKED block ";
    rules[408]=new Rule(-207, new int[]{205,-172});
stringrules[409] = @"lock_statement -> LOCK '(' expression ')' embedded_statement ";
    rules[409]=new Rule(-208, new int[]{173,40,-94,41,-199});
stringrules[410] = @"using_statement -> USING '(' resource_acquisition ')' embedded_statement ";
    rules[410]=new Rule(-209, new int[]{208,40,-251,41,-199});
stringrules[411] = @"resource_acquisition -> local_variable_declaration ";
    rules[411]=new Rule(-251, new int[]{-216});
stringrules[412] = @"resource_acquisition -> expression ";
    rules[412]=new Rule(-251, new int[]{-94});
stringrules[413] = @"@3 -> ";
    rules[413]=new Rule(-253, new int[]{});
stringrules[414] = @"fixed_statement -> FIXED '(' type fixed_pointer_declarators ')' @3 embedded_statement ";
    rules[414]=new Rule(-211, new int[]{161,40,-59,-252,41,-253,-199});
stringrules[415] = @"fixed_pointer_declarators -> fixed_pointer_declarator ";
    rules[415]=new Rule(-252, new int[]{-254});
stringrules[416] = @"fixed_pointer_declarators -> fixed_pointer_declarators ',' fixed_pointer_declarator ";
    rules[416]=new Rule(-252, new int[]{-252,44,-254});
stringrules[417] = @"fixed_pointer_declarator -> IDENTIFIER '=' expression ";
    rules[417]=new Rule(-254, new int[]{130,61,-94});
stringrules[418] = @"compilation_unit -> using_directives_opt attributes_opt ";
    rules[418]=new Rule(-1, new int[]{-255,-256});
stringrules[419] = @"compilation_unit -> using_directives_opt namespace_member_declarations ";
    rules[419]=new Rule(-1, new int[]{-255,-2});
stringrules[420] = @"using_directives_opt -> ";
    rules[420]=new Rule(-255, new int[]{});
stringrules[421] = @"using_directives_opt -> using_directives ";
    rules[421]=new Rule(-255, new int[]{-257});
stringrules[422] = @"attributes_opt -> ";
    rules[422]=new Rule(-256, new int[]{});
stringrules[423] = @"attributes_opt -> attributes ";
    rules[423]=new Rule(-256, new int[]{-258});
stringrules[424] = @"namespace_member_declarations_opt -> ";
    rules[424]=new Rule(-4, new int[]{});
stringrules[425] = @"namespace_member_declarations_opt -> namespace_member_declarations ";
    rules[425]=new Rule(-4, new int[]{-2});
stringrules[426] = @"namespace_declaration -> attributes_opt NAMESPACE qualified_identifier namespace_body comma_opt ";
    rules[426]=new Rule(-25, new int[]{-256,175,-33,-3,-259});
stringrules[427] = @"comma_opt -> ";
    rules[427]=new Rule(-259, new int[]{});
stringrules[428] = @"comma_opt -> ';' ";
    rules[428]=new Rule(-259, new int[]{59});
stringrules[429] = @"qualified_identifier -> gen_qualified_identifier ";
    rules[429]=new Rule(-33, new int[]{-82});
stringrules[430] = @"qualifier -> norm_qualifier ";
    rules[430]=new Rule(-34, new int[]{-85});
stringrules[431] = @"norm_qualified_identifier -> IDENTIFIER ";
    rules[431]=new Rule(-83, new int[]{130});
stringrules[432] = @"norm_qualified_identifier -> norm_qualifier IDENTIFIER ";
    rules[432]=new Rule(-83, new int[]{-85,130});
stringrules[433] = @"norm_qualifier -> IDENTIFIER '.' ";
    rules[433]=new Rule(-85, new int[]{130,46});
stringrules[434] = @"norm_qualifier -> norm_qualifier IDENTIFIER '.' ";
    rules[434]=new Rule(-85, new int[]{-85,130,46});
stringrules[435] = @"long_qualified_identifier -> gen_qualifier member_name '.' ";
    rules[435]=new Rule(-37, new int[]{-84,-81,46});
stringrules[436] = @"gen_qualified_identifier -> member_name ";
    rules[436]=new Rule(-82, new int[]{-81});
stringrules[437] = @"gen_qualified_identifier -> gen_qualifier member_name ";
    rules[437]=new Rule(-82, new int[]{-84,-81});
stringrules[438] = @"gen_qualifier -> member_name '.' ";
    rules[438]=new Rule(-84, new int[]{-81,46});
stringrules[439] = @"gen_qualifier -> long_qualified_identifier ";
    rules[439]=new Rule(-84, new int[]{-37});
stringrules[440] = @"namespace_body -> '{' using_directives_opt namespace_member_declarations_opt '}' ";
    rules[440]=new Rule(-3, new int[]{123,-255,-4,125});
stringrules[441] = @"using_directives -> using_directive ";
    rules[441]=new Rule(-257, new int[]{-260});
stringrules[442] = @"using_directives -> using_directives using_directive ";
    rules[442]=new Rule(-257, new int[]{-257,-260});
stringrules[443] = @"using_directive -> using_alias_directive ";
    rules[443]=new Rule(-260, new int[]{-261});
stringrules[444] = @"using_directive -> using_namespace_directive ";
    rules[444]=new Rule(-260, new int[]{-262});
stringrules[445] = @"using_alias_directive -> USING IDENTIFIER '=' qualified_identifier ';' ";
    rules[445]=new Rule(-261, new int[]{208,130,61,-33,59});
stringrules[446] = @"using_namespace_directive -> USING namespace_name ';' ";
    rules[446]=new Rule(-262, new int[]{208,-35,59});
stringrules[447] = @"using_namespace_directive -> USING error ";
    rules[447]=new Rule(-262, new int[]{208,127});
stringrules[448] = @"namespace_member_declarations -> namespace_member_declaration ";
    rules[448]=new Rule(-2, new int[]{-26});
stringrules[449] = @"namespace_member_declarations -> namespace_member_declarations namespace_member_declaration ";
    rules[449]=new Rule(-2, new int[]{-2,-26});
stringrules[450] = @"namespace_member_declaration -> namespace_declaration ";
    rules[450]=new Rule(-26, new int[]{-25});
stringrules[451] = @"namespace_member_declaration -> type_declaration ";
    rules[451]=new Rule(-26, new int[]{-43});
stringrules[452] = @"namespace_member_declaration -> error ";
    rules[452]=new Rule(-26, new int[]{127});
stringrules[453] = @"type_declaration -> class_declaration ";
    rules[453]=new Rule(-43, new int[]{-38});
stringrules[454] = @"type_declaration -> struct_declaration ";
    rules[454]=new Rule(-43, new int[]{-39});
stringrules[455] = @"type_declaration -> interface_declaration ";
    rules[455]=new Rule(-43, new int[]{-40});
stringrules[456] = @"type_declaration -> enum_declaration ";
    rules[456]=new Rule(-43, new int[]{-41});
stringrules[457] = @"type_declaration -> delegate_declaration ";
    rules[457]=new Rule(-43, new int[]{-42});
stringrules[458] = @"modifiers_opt -> ";
    rules[458]=new Rule(-263, new int[]{});
stringrules[459] = @"modifiers_opt -> modifiers ";
    rules[459]=new Rule(-263, new int[]{-264});
stringrules[460] = @"modifiers -> modifier ";
    rules[460]=new Rule(-264, new int[]{-265});
stringrules[461] = @"modifiers -> modifiers modifier ";
    rules[461]=new Rule(-264, new int[]{-264,-265});
stringrules[462] = @"modifier -> ABSTRACT ";
    rules[462]=new Rule(-265, new int[]{136});
stringrules[463] = @"modifier -> EXTERN ";
    rules[463]=new Rule(-265, new int[]{158});
stringrules[464] = @"modifier -> INTERNAL ";
    rules[464]=new Rule(-265, new int[]{171});
stringrules[465] = @"modifier -> NEW ";
    rules[465]=new Rule(-265, new int[]{176});
stringrules[466] = @"modifier -> OVERRIDE ";
    rules[466]=new Rule(-265, new int[]{181});
stringrules[467] = @"modifier -> PRIVATE ";
    rules[467]=new Rule(-265, new int[]{183});
stringrules[468] = @"modifier -> PROTECTED ";
    rules[468]=new Rule(-265, new int[]{184});
stringrules[469] = @"modifier -> PUBLIC ";
    rules[469]=new Rule(-265, new int[]{185});
stringrules[470] = @"modifier -> READONLY ";
    rules[470]=new Rule(-265, new int[]{186});
stringrules[471] = @"modifier -> SEALED ";
    rules[471]=new Rule(-265, new int[]{190});
stringrules[472] = @"modifier -> STATIC ";
    rules[472]=new Rule(-265, new int[]{194});
stringrules[473] = @"modifier -> UNSAFE ";
    rules[473]=new Rule(-265, new int[]{206});
stringrules[474] = @"modifier -> VIRTUAL ";
    rules[474]=new Rule(-265, new int[]{209});
stringrules[475] = @"modifier -> VOLATILE ";
    rules[475]=new Rule(-265, new int[]{211});
stringrules[476] = @"in_gen_clause -> ";
    rules[476]=new Rule(-266, new int[]{});
stringrules[477] = @"gen_clause_list -> gen_clause ";
    rules[477]=new Rule(-267, new int[]{-268});
stringrules[478] = @"gen_clause_list -> gen_clause_list gen_clause ";
    rules[478]=new Rule(-267, new int[]{-267,-268});
stringrules[479] = @"gen_clause_opt -> ";
    rules[479]=new Rule(-269, new int[]{});
stringrules[480] = @"gen_clause_opt -> gen_clause_list ";
    rules[480]=new Rule(-269, new int[]{-267});
stringrules[481] = @"gen_clause -> WHERE IDENTIFIER gen_class_base ";
    rules[481]=new Rule(-268, new int[]{213,130,-270});
stringrules[482] = @"gen_class_type -> STRUCT ";
    rules[482]=new Rule(-271, new int[]{196});
stringrules[483] = @"gen_class_type -> CLASS ";
    rules[483]=new Rule(-271, new int[]{146});
stringrules[484] = @"gen_class_type -> NEW '(' ')' ";
    rules[484]=new Rule(-271, new int[]{176,40,41});
stringrules[485] = @"gen_class_type -> OBJECT ";
    rules[485]=new Rule(-271, new int[]{178});
stringrules[486] = @"gen_class_type -> type_name ";
    rules[486]=new Rule(-271, new int[]{-71});
stringrules[487] = @"gen_class_base -> ':' gen_type_list ";
    rules[487]=new Rule(-270, new int[]{58,-272});
stringrules[488] = @"gen_type_list -> gen_class_type ";
    rules[488]=new Rule(-272, new int[]{-271});
stringrules[489] = @"gen_type_list -> gen_type_list ',' gen_class_type ";
    rules[489]=new Rule(-272, new int[]{-272,44,-271});
stringrules[490] = @"class_declaration -> attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt ";
    rules[490]=new Rule(-38, new int[]{-256,-263,146,130,-79,-266,-273,-269,-9,-259});
stringrules[491] = @"class_base_opt -> ";
    rules[491]=new Rule(-273, new int[]{});
stringrules[492] = @"class_base_opt -> class_base ";
    rules[492]=new Rule(-273, new int[]{-274});
stringrules[493] = @"class_base -> ':' class_type ";
    rules[493]=new Rule(-274, new int[]{58,-64});
stringrules[494] = @"class_base -> ':' interface_type_list ";
    rules[494]=new Rule(-274, new int[]{58,-275});
stringrules[495] = @"class_base -> ':' class_type ',' interface_type_list ";
    rules[495]=new Rule(-274, new int[]{58,-64,44,-275});
stringrules[496] = @"interface_type_list -> type_name ";
    rules[496]=new Rule(-275, new int[]{-71});
stringrules[497] = @"interface_type_list -> interface_type_list ',' type_name ";
    rules[497]=new Rule(-275, new int[]{-275,44,-71});
stringrules[498] = @"class_body -> '{' class_member_declarations_opt '}' ";
    rules[498]=new Rule(-9, new int[]{123,-8,125});
stringrules[499] = @"class_member_declarations_opt -> ";
    rules[499]=new Rule(-8, new int[]{});
stringrules[500] = @"class_member_declarations_opt -> class_member_declarations ";
    rules[500]=new Rule(-8, new int[]{-10});
stringrules[501] = @"class_member_declarations -> class_member_declaration ";
    rules[501]=new Rule(-10, new int[]{-44});
stringrules[502] = @"class_member_declarations -> class_member_declarations class_member_declaration ";
    rules[502]=new Rule(-10, new int[]{-10,-44});
stringrules[503] = @"class_member_declaration -> constant_declaration ";
    rules[503]=new Rule(-44, new int[]{-21});
stringrules[504] = @"class_member_declaration -> field_declaration ";
    rules[504]=new Rule(-44, new int[]{-22});
stringrules[505] = @"class_member_declaration -> method_declaration ";
    rules[505]=new Rule(-44, new int[]{-45});
stringrules[506] = @"class_member_declaration -> property_declaration ";
    rules[506]=new Rule(-44, new int[]{-46});
stringrules[507] = @"class_member_declaration -> event_declaration ";
    rules[507]=new Rule(-44, new int[]{-48});
stringrules[508] = @"class_member_declaration -> indexer_declaration ";
    rules[508]=new Rule(-44, new int[]{-49});
stringrules[509] = @"class_member_declaration -> operator_declaration ";
    rules[509]=new Rule(-44, new int[]{-50});
stringrules[510] = @"class_member_declaration -> constructor_declaration ";
    rules[510]=new Rule(-44, new int[]{-51});
stringrules[511] = @"class_member_declaration -> destructor_declaration ";
    rules[511]=new Rule(-44, new int[]{-52});
stringrules[512] = @"class_member_declaration -> type_declaration ";
    rules[512]=new Rule(-44, new int[]{-43});
stringrules[513] = @"class_member_declaration -> error ";
    rules[513]=new Rule(-44, new int[]{127});
stringrules[514] = @"constant_declaration -> attributes_opt modifiers_opt CONST type constant_declarators ';' ";
    rules[514]=new Rule(-21, new int[]{-256,-263,147,-59,-77,59});
stringrules[515] = @"field_declaration -> attributes_opt modifiers_opt type variable_declarators ';' ";
    rules[515]=new Rule(-22, new int[]{-256,-263,-59,-76,59});
stringrules[516] = @"method_declaration -> method_header in_gen_clause gen_clause_opt method_body ";
    rules[516]=new Rule(-45, new int[]{-56,-266,-269,-124});
stringrules[517] = @"method_header -> attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' ";
    rules[517]=new Rule(-56, new int[]{-256,-263,-59,-33,40,-13,41});
stringrules[518] = @"method_header -> attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' ";
    rules[518]=new Rule(-56, new int[]{-256,-263,210,-33,40,-13,41});
stringrules[519] = @"formal_parameter_list_opt -> ";
    rules[519]=new Rule(-13, new int[]{});
stringrules[520] = @"formal_parameter_list_opt -> formal_parameter_list arglist_opt ";
    rules[520]=new Rule(-13, new int[]{-14,-276});
stringrules[521] = @"formal_parameter_list_opt -> ARGLIST ";
    rules[521]=new Rule(-13, new int[]{214});
stringrules[522] = @"arglist_opt -> ";
    rules[522]=new Rule(-276, new int[]{});
stringrules[523] = @"arglist_opt -> ',' ARGLIST ";
    rules[523]=new Rule(-276, new int[]{44,214});
stringrules[524] = @"return_type -> type ";
    rules[524]=new Rule(-60, new int[]{-59});
stringrules[525] = @"return_type -> VOID ";
    rules[525]=new Rule(-60, new int[]{210});
stringrules[526] = @"method_body -> block ";
    rules[526]=new Rule(-124, new int[]{-172});
stringrules[527] = @"method_body -> ';' ";
    rules[527]=new Rule(-124, new int[]{59});
stringrules[528] = @"formal_parameter_list -> formal_parameter ";
    rules[528]=new Rule(-14, new int[]{-53});
stringrules[529] = @"formal_parameter_list -> formal_parameter_list ',' formal_parameter ";
    rules[529]=new Rule(-14, new int[]{-14,44,-53});
stringrules[530] = @"formal_parameter -> fixed_parameter ";
    rules[530]=new Rule(-53, new int[]{-54});
stringrules[531] = @"formal_parameter -> THIS fixed_parameter ";
    rules[531]=new Rule(-53, new int[]{198,-54});
stringrules[532] = @"formal_parameter -> parameter_array ";
    rules[532]=new Rule(-53, new int[]{-55});
stringrules[533] = @"fixed_parameter -> attributes_opt parameter_modifier_opt type IDENTIFIER ";
    rules[533]=new Rule(-54, new int[]{-256,-80,-59,130});
stringrules[534] = @"parameter_modifier_opt -> ";
    rules[534]=new Rule(-80, new int[]{});
stringrules[535] = @"parameter_modifier_opt -> REF ";
    rules[535]=new Rule(-80, new int[]{187});
stringrules[536] = @"parameter_modifier_opt -> OUT ";
    rules[536]=new Rule(-80, new int[]{180});
stringrules[537] = @"parameter_array -> attributes_opt PARAMS type IDENTIFIER ";
    rules[537]=new Rule(-55, new int[]{-256,182,-59,130});
stringrules[538] = @"property_declaration -> attributes_opt modifiers_opt type qualified_identifier '{' accessor_declarations '}' ";
    rules[538]=new Rule(-46, new int[]{-256,-263,-59,-33,123,-277,125});
stringrules[539] = @"accessor_declarations -> inproperty get_accessor_declaration set_accessor_declaration_opt outproperty ";
    rules[539]=new Rule(-277, new int[]{-278,-279,-280,-281});
stringrules[540] = @"accessor_declarations -> inproperty set_accessor_declaration get_accessor_declaration_opt outproperty ";
    rules[540]=new Rule(-277, new int[]{-278,-282,-283,-281});
stringrules[541] = @"inproperty -> ";
    rules[541]=new Rule(-278, new int[]{});
stringrules[542] = @"outproperty -> ";
    rules[542]=new Rule(-281, new int[]{});
stringrules[543] = @"inset -> ";
    rules[543]=new Rule(-284, new int[]{});
stringrules[544] = @"outset -> ";
    rules[544]=new Rule(-285, new int[]{});
stringrules[545] = @"set_accessor_declaration_opt -> ";
    rules[545]=new Rule(-280, new int[]{});
stringrules[546] = @"set_accessor_declaration_opt -> set_accessor_declaration ";
    rules[546]=new Rule(-280, new int[]{-282});
stringrules[547] = @"get_accessor_declaration_opt -> ";
    rules[547]=new Rule(-283, new int[]{});
stringrules[548] = @"get_accessor_declaration_opt -> get_accessor_declaration ";
    rules[548]=new Rule(-283, new int[]{-279});
stringrules[549] = @"get_accessor_declaration -> attributes_opt modifiers_opt GET outproperty accessor_body inproperty ";
    rules[549]=new Rule(-279, new int[]{-256,-263,239,-281,-286,-278});
stringrules[550] = @"set_accessor_declaration -> attributes_opt modifiers_opt SET outproperty inset accessor_body outset inproperty ";
    rules[550]=new Rule(-282, new int[]{-256,-263,240,-281,-284,-286,-285,-278});
stringrules[551] = @"accessor_body -> block ";
    rules[551]=new Rule(-286, new int[]{-172});
stringrules[552] = @"accessor_body -> ';' ";
    rules[552]=new Rule(-286, new int[]{59});
stringrules[553] = @"event_declaration -> attributes_opt modifiers_opt EVENT type variable_declarators ';' ";
    rules[553]=new Rule(-48, new int[]{-256,-263,156,-59,-76,59});
stringrules[554] = @"event_declaration -> attributes_opt modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations '}' ";
    rules[554]=new Rule(-48, new int[]{-256,-263,156,-59,-33,123,-287,125});
stringrules[555] = @"event_start -> ";
    rules[555]=new Rule(-288, new int[]{});
stringrules[556] = @"event_end -> ";
    rules[556]=new Rule(-289, new int[]{});
stringrules[557] = @"event_accessor_declarations -> event_start event_add_accessor_declaration event_remove_accessor_declaration event_end ";
    rules[557]=new Rule(-287, new int[]{-288,-290,-291,-289});
stringrules[558] = @"event_accessor_declarations -> event_start event_remove_accessor_declaration event_add_accessor_declaration event_end ";
    rules[558]=new Rule(-287, new int[]{-288,-291,-290,-289});
stringrules[559] = @"event_add_accessor_declaration -> attributes_opt ADD block ";
    rules[559]=new Rule(-290, new int[]{-256,216,-172});
stringrules[560] = @"event_remove_accessor_declaration -> attributes_opt REMOVE block ";
    rules[560]=new Rule(-291, new int[]{-256,217,-172});
stringrules[561] = @"indexer_declaration -> attributes_opt modifiers_opt indexer_declarator '{' accessor_declarations '}' ";
    rules[561]=new Rule(-49, new int[]{-256,-263,-292,123,-277,125});
stringrules[562] = @"indexer_declarator -> type THIS '[' formal_parameter_list ']' ";
    rules[562]=new Rule(-292, new int[]{-59,198,91,-14,93});
stringrules[563] = @"indexer_declarator -> type qualified_this '[' formal_parameter_list ']' ";
    rules[563]=new Rule(-292, new int[]{-59,-293,91,-14,93});
stringrules[564] = @"qualified_this -> gen_qualifier THIS ";
    rules[564]=new Rule(-293, new int[]{-84,198});
stringrules[565] = @"operator_declaration -> attributes_opt modifiers_opt operator_declarator operator_body ";
    rules[565]=new Rule(-50, new int[]{-256,-263,-294,-295});
stringrules[566] = @"operator_declarator -> overloadable_operator_declarator ";
    rules[566]=new Rule(-294, new int[]{-296});
stringrules[567] = @"operator_declarator -> conversion_operator_declarator ";
    rules[567]=new Rule(-294, new int[]{-297});
stringrules[568] = @"overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ')' ";
    rules[568]=new Rule(-296, new int[]{-59,179,-298,40,-256,-59,130,41});
stringrules[569] = @"overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' ";
    rules[569]=new Rule(-296, new int[]{-59,179,-298,40,-256,-59,130,44,-256,-59,130,41});
stringrules[570] = @"overloadable_operator -> '+' ";
    rules[570]=new Rule(-298, new int[]{43});
stringrules[571] = @"overloadable_operator -> '-' ";
    rules[571]=new Rule(-298, new int[]{45});
stringrules[572] = @"overloadable_operator -> '!' ";
    rules[572]=new Rule(-298, new int[]{33});
stringrules[573] = @"overloadable_operator -> '~' ";
    rules[573]=new Rule(-298, new int[]{126});
stringrules[574] = @"overloadable_operator -> PLUSPLUS ";
    rules[574]=new Rule(-298, new int[]{260});
stringrules[575] = @"overloadable_operator -> MINUSMINUS ";
    rules[575]=new Rule(-298, new int[]{261});
stringrules[576] = @"overloadable_operator -> TRUE ";
    rules[576]=new Rule(-298, new int[]{200});
stringrules[577] = @"overloadable_operator -> FALSE ";
    rules[577]=new Rule(-298, new int[]{159});
stringrules[578] = @"overloadable_operator -> '*' ";
    rules[578]=new Rule(-298, new int[]{42});
stringrules[579] = @"overloadable_operator -> '/' ";
    rules[579]=new Rule(-298, new int[]{47});
stringrules[580] = @"overloadable_operator -> '%' ";
    rules[580]=new Rule(-298, new int[]{37});
stringrules[581] = @"overloadable_operator -> '&' ";
    rules[581]=new Rule(-298, new int[]{38});
stringrules[582] = @"overloadable_operator -> '|' ";
    rules[582]=new Rule(-298, new int[]{124});
stringrules[583] = @"overloadable_operator -> '^' ";
    rules[583]=new Rule(-298, new int[]{94});
stringrules[584] = @"overloadable_operator -> LTLT ";
    rules[584]=new Rule(-298, new int[]{252});
stringrules[585] = @"overloadable_operator -> GTGT ";
    rules[585]=new Rule(-298, new int[]{248});
stringrules[586] = @"overloadable_operator -> EQEQ ";
    rules[586]=new Rule(-298, new int[]{254});
stringrules[587] = @"overloadable_operator -> NOTEQ ";
    rules[587]=new Rule(-298, new int[]{255});
stringrules[588] = @"overloadable_operator -> '>' ";
    rules[588]=new Rule(-298, new int[]{62});
stringrules[589] = @"overloadable_operator -> '<' ";
    rules[589]=new Rule(-298, new int[]{60});
stringrules[590] = @"overloadable_operator -> GEQ ";
    rules[590]=new Rule(-298, new int[]{257});
stringrules[591] = @"overloadable_operator -> LEQ ";
    rules[591]=new Rule(-298, new int[]{256});
stringrules[592] = @"conversion_operator_declarator -> IMPLICIT OPERATOR type '(' type IDENTIFIER ')' ";
    rules[592]=new Rule(-297, new int[]{167,179,-59,40,-59,130,41});
stringrules[593] = @"conversion_operator_declarator -> EXPLICIT OPERATOR type '(' type IDENTIFIER ')' ";
    rules[593]=new Rule(-297, new int[]{157,179,-59,40,-59,130,41});
stringrules[594] = @"constructor_declaration -> attributes_opt modifiers_opt constructor_declarator constructor_body ";
    rules[594]=new Rule(-51, new int[]{-256,-263,-30,-299});
stringrules[595] = @"constructor_declarator -> IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt ";
    rules[595]=new Rule(-30, new int[]{130,40,-13,41,-300});
stringrules[596] = @"constructor_initializer_opt -> ";
    rules[596]=new Rule(-300, new int[]{});
stringrules[597] = @"constructor_initializer_opt -> constructor_initializer ";
    rules[597]=new Rule(-300, new int[]{-301});
stringrules[598] = @"constructor_initializer -> ':' BASE '(' argument_list_opt ')' ";
    rules[598]=new Rule(-301, new int[]{58,138,40,-118,41});
stringrules[599] = @"constructor_initializer -> ':' THIS '(' argument_list_opt ')' ";
    rules[599]=new Rule(-301, new int[]{58,198,40,-118,41});
stringrules[600] = @"destructor_declaration -> attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block ";
    rules[600]=new Rule(-52, new int[]{-256,-263,126,130,40,41,-172});
stringrules[601] = @"operator_body -> block ";
    rules[601]=new Rule(-295, new int[]{-172});
stringrules[602] = @"operator_body -> ';' ";
    rules[602]=new Rule(-295, new int[]{59});
stringrules[603] = @"constructor_body -> block ";
    rules[603]=new Rule(-299, new int[]{-172});
stringrules[604] = @"constructor_body -> ';' ";
    rules[604]=new Rule(-299, new int[]{59});
stringrules[605] = @"struct_declaration -> attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt ";
    rules[605]=new Rule(-39, new int[]{-256,-263,196,130,-79,-266,-302,-269,-11,-259});
stringrules[606] = @"struct_interfaces_opt -> ";
    rules[606]=new Rule(-302, new int[]{});
stringrules[607] = @"struct_interfaces_opt -> struct_interfaces ";
    rules[607]=new Rule(-302, new int[]{-303});
stringrules[608] = @"struct_interfaces -> ':' interface_type_list ";
    rules[608]=new Rule(-303, new int[]{58,-275});
stringrules[609] = @"struct_body -> '{' struct_member_declarations_opt '}' ";
    rules[609]=new Rule(-11, new int[]{123,-15,125});
stringrules[610] = @"struct_member_declarations_opt -> ";
    rules[610]=new Rule(-15, new int[]{});
stringrules[611] = @"struct_member_declarations_opt -> struct_member_declarations ";
    rules[611]=new Rule(-15, new int[]{-16});
stringrules[612] = @"struct_member_declarations -> struct_member_declaration ";
    rules[612]=new Rule(-16, new int[]{-27});
stringrules[613] = @"struct_member_declarations -> struct_member_declarations struct_member_declaration ";
    rules[613]=new Rule(-16, new int[]{-16,-27});
stringrules[614] = @"struct_member_declaration -> constant_declaration ";
    rules[614]=new Rule(-27, new int[]{-21});
stringrules[615] = @"struct_member_declaration -> field_declaration ";
    rules[615]=new Rule(-27, new int[]{-22});
stringrules[616] = @"struct_member_declaration -> method_declaration ";
    rules[616]=new Rule(-27, new int[]{-45});
stringrules[617] = @"struct_member_declaration -> property_declaration ";
    rules[617]=new Rule(-27, new int[]{-46});
stringrules[618] = @"struct_member_declaration -> event_declaration ";
    rules[618]=new Rule(-27, new int[]{-48});
stringrules[619] = @"struct_member_declaration -> indexer_declaration ";
    rules[619]=new Rule(-27, new int[]{-49});
stringrules[620] = @"struct_member_declaration -> operator_declaration ";
    rules[620]=new Rule(-27, new int[]{-50});
stringrules[621] = @"struct_member_declaration -> constructor_declaration ";
    rules[621]=new Rule(-27, new int[]{-51});
stringrules[622] = @"struct_member_declaration -> type_declaration ";
    rules[622]=new Rule(-27, new int[]{-43});
stringrules[623] = @"array_initializer -> '{' variable_initializer_list_opt '}' ";
    rules[623]=new Rule(-139, new int[]{123,-304,125});
stringrules[624] = @"array_initializer -> '{' variable_initializer_list ',' '}' ";
    rules[624]=new Rule(-139, new int[]{123,-305,44,125});
stringrules[625] = @"variable_initializer_list_opt -> ";
    rules[625]=new Rule(-304, new int[]{});
stringrules[626] = @"variable_initializer_list_opt -> variable_initializer_list ";
    rules[626]=new Rule(-304, new int[]{-305});
stringrules[627] = @"variable_initializer_list -> variable_initializer ";
    rules[627]=new Rule(-305, new int[]{-218});
stringrules[628] = @"variable_initializer_list -> variable_initializer_list ',' variable_initializer ";
    rules[628]=new Rule(-305, new int[]{-305,44,-218});
stringrules[629] = @"interface_declaration -> attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt ";
    rules[629]=new Rule(-40, new int[]{-256,-263,170,130,-79,-266,-306,-269,-5,-259});
stringrules[630] = @"interface_base_opt -> ";
    rules[630]=new Rule(-306, new int[]{});
stringrules[631] = @"interface_base_opt -> interface_base ";
    rules[631]=new Rule(-306, new int[]{-307});
stringrules[632] = @"interface_base -> ':' interface_type_list ";
    rules[632]=new Rule(-307, new int[]{58,-275});
stringrules[633] = @"interface_body -> '{' interface_member_declarations_opt '}' ";
    rules[633]=new Rule(-5, new int[]{123,-12,125});
stringrules[634] = @"interface_member_declarations_opt -> ";
    rules[634]=new Rule(-12, new int[]{});
stringrules[635] = @"interface_member_declarations_opt -> interface_member_declarations ";
    rules[635]=new Rule(-12, new int[]{-17});
stringrules[636] = @"interface_member_declarations -> interface_member_declaration ";
    rules[636]=new Rule(-17, new int[]{-28});
stringrules[637] = @"interface_member_declarations -> interface_member_declarations interface_member_declaration ";
    rules[637]=new Rule(-17, new int[]{-17,-28});
stringrules[638] = @"interface_member_declaration -> interface_method_declaration ";
    rules[638]=new Rule(-28, new int[]{-57});
stringrules[639] = @"interface_member_declaration -> interface_property_declaration ";
    rules[639]=new Rule(-28, new int[]{-58});
stringrules[640] = @"interface_member_declaration -> interface_event_declaration ";
    rules[640]=new Rule(-28, new int[]{-308});
stringrules[641] = @"interface_member_declaration -> interface_indexer_declaration ";
    rules[641]=new Rule(-28, new int[]{-23});
stringrules[642] = @"interface_method_declaration -> attributes_opt new_opt type member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    rules[642]=new Rule(-57, new int[]{-256,-309,-59,-81,40,-13,41,-269,-310});
stringrules[643] = @"interface_method_declaration -> attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body ";
    rules[643]=new Rule(-57, new int[]{-256,-309,210,-81,40,-13,41,-269,-310});
stringrules[644] = @"new_opt -> ";
    rules[644]=new Rule(-309, new int[]{});
stringrules[645] = @"new_opt -> NEW ";
    rules[645]=new Rule(-309, new int[]{176});
stringrules[646] = @"interface_property_declaration -> attributes_opt new_opt type member_name '{' interface_accessors '}' ";
    rules[646]=new Rule(-58, new int[]{-256,-309,-59,-81,123,-311,125});
stringrules[647] = @"interface_indexer_declaration -> attributes_opt new_opt type THIS '[' formal_parameter_list ']' '{' interface_accessors '}' ";
    rules[647]=new Rule(-23, new int[]{-256,-309,-59,198,91,-14,93,123,-311,125});
stringrules[648] = @"interface_accessors -> inproperty attributes_opt GET interface_empty_body outproperty ";
    rules[648]=new Rule(-311, new int[]{-278,-256,239,-310,-281});
stringrules[649] = @"interface_accessors -> inproperty attributes_opt SET interface_empty_body outproperty ";
    rules[649]=new Rule(-311, new int[]{-278,-256,240,-310,-281});
stringrules[650] = @"interface_accessors -> inproperty attributes_opt GET interface_empty_body attributes_opt SET interface_empty_body outproperty ";
    rules[650]=new Rule(-311, new int[]{-278,-256,239,-310,-256,240,-310,-281});
stringrules[651] = @"interface_accessors -> inproperty attributes_opt SET interface_empty_body attributes_opt GET interface_empty_body outproperty ";
    rules[651]=new Rule(-311, new int[]{-278,-256,240,-310,-256,239,-310,-281});
stringrules[652] = @"interface_event_declaration -> attributes_opt new_opt EVENT type member_name interface_empty_body ";
    rules[652]=new Rule(-308, new int[]{-256,-309,156,-59,-81,-310});
stringrules[653] = @"interface_empty_body -> ';' ";
    rules[653]=new Rule(-310, new int[]{59});
stringrules[654] = @"enum_declaration -> attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt ";
    rules[654]=new Rule(-41, new int[]{-256,-263,155,130,-312,-18,-259});
stringrules[655] = @"enum_base_opt -> ";
    rules[655]=new Rule(-312, new int[]{});
stringrules[656] = @"enum_base_opt -> enum_base ";
    rules[656]=new Rule(-312, new int[]{-313});
stringrules[657] = @"enum_base -> ':' integral_type ";
    rules[657]=new Rule(-313, new int[]{58,-69});
stringrules[658] = @"enum_body -> '{' enum_member_declarations_opt '}' ";
    rules[658]=new Rule(-18, new int[]{123,-19,125});
stringrules[659] = @"enum_body -> '{' enum_member_declarations ',' '}' ";
    rules[659]=new Rule(-18, new int[]{123,-20,44,125});
stringrules[660] = @"enum_member_declarations_opt -> ";
    rules[660]=new Rule(-19, new int[]{});
stringrules[661] = @"enum_member_declarations_opt -> enum_member_declarations ";
    rules[661]=new Rule(-19, new int[]{-20});
stringrules[662] = @"enum_member_declarations -> enum_member_declaration ";
    rules[662]=new Rule(-20, new int[]{-29});
stringrules[663] = @"enum_member_declarations -> enum_member_declarations ',' enum_member_declaration ";
    rules[663]=new Rule(-20, new int[]{-20,44,-29});
stringrules[664] = @"enum_member_declaration -> attributes_opt IDENTIFIER ";
    rules[664]=new Rule(-29, new int[]{-256,130});
stringrules[665] = @"enum_member_declaration -> attributes_opt IDENTIFIER '=' constant_expression ";
    rules[665]=new Rule(-29, new int[]{-256,130,61,-195});
stringrules[666] = @"delegate_declaration -> attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' ";
    rules[666]=new Rule(-42, new int[]{-256,-263,151,-60,-81,40,-13,41,-266,-269,59});
stringrules[667] = @"attributes -> attribute_sections ";
    rules[667]=new Rule(-258, new int[]{-314});
stringrules[668] = @"attribute_sections -> attribute_section ";
    rules[668]=new Rule(-314, new int[]{-315});
stringrules[669] = @"attribute_sections -> attribute_sections attribute_section ";
    rules[669]=new Rule(-314, new int[]{-314,-315});
stringrules[670] = @"attribute_section -> '[' attribute_list ']' ";
    rules[670]=new Rule(-315, new int[]{91,-316,93});
stringrules[671] = @"attribute_section -> '[' attribute_list ',' ']' ";
    rules[671]=new Rule(-315, new int[]{91,-316,44,93});
stringrules[672] = @"attribute_list -> attribute ";
    rules[672]=new Rule(-316, new int[]{-317});
stringrules[673] = @"attribute_list -> attribute_list ',' attribute ";
    rules[673]=new Rule(-316, new int[]{-316,44,-317});
stringrules[674] = @"attribute -> attribute_name attribute_arguments_opt ";
    rules[674]=new Rule(-317, new int[]{-318,-319});
stringrules[675] = @"attribute_arguments_opt -> ";
    rules[675]=new Rule(-319, new int[]{});
stringrules[676] = @"attribute_arguments_opt -> attribute_arguments ";
    rules[676]=new Rule(-319, new int[]{-320});
stringrules[677] = @"attribute_name -> type_name ";
    rules[677]=new Rule(-318, new int[]{-71});
stringrules[678] = @"attribute_arguments -> '(' expression_list_opt ')' ";
    rules[678]=new Rule(-320, new int[]{40,-120,41});

    nonTerminals = new string[] {"", "compilation_unit", "namespace_member_declarations", 
      "namespace_body", "namespace_member_declarations_opt", "interface_body", 
      "type_list", "type_list_opt", "class_member_declarations_opt", "class_body", 
      "class_member_declarations", "struct_body", "interface_member_declarations_opt", 
      "formal_parameter_list_opt", "formal_parameter_list", "struct_member_declarations_opt", 
      "struct_member_declarations", "interface_member_declarations", "enum_body", 
      "enum_member_declarations_opt", "enum_member_declarations", "constant_declaration", 
      "field_declaration", "interface_indexer_declaration", "identifier_name", 
      "namespace_declaration", "namespace_member_declaration", "struct_member_declaration", 
      "interface_member_declaration", "enum_member_declaration", "constructor_declarator", 
      "variable_declarator", "constant_declarator", "qualified_identifier", "qualifier", 
      "namespace_name", "type_qualified_identifier", "long_qualified_identifier", 
      "class_declaration", "struct_declaration", "interface_declaration", "enum_declaration", 
      "delegate_declaration", "type_declaration", "class_member_declaration", 
      "method_declaration", "property_declaration", "type2", "event_declaration", 
      "indexer_declaration", "operator_declaration", "constructor_declaration", 
      "destructor_declaration", "formal_parameter", "fixed_parameter", "parameter_array", 
      "method_header", "interface_method_declaration", "interface_property_declaration", 
      "type", "return_type", "non_array_type", "simple_type", "primitive_type", 
      "class_type", "numeric_type", "floating_point_type", "type_opt", "nullable_type", 
      "integral_type", "array_type", "type_name", "non_null_type", "literal", 
      "mllit", "boolean_literal", "variable_declarators", "constant_declarators", 
      "type_arg_list", "type_arg_list_opt", "parameter_modifier_opt", "member_name", 
      "gen_qualified_identifier", "norm_qualified_identifier", "gen_qualifier", 
      "norm_qualifier", "member_name2", "gen_qualified_identifier2", "$accept", 
      "nullable_opt", "pointer_type", "rank_specifier", "rank_specifiers_opt", 
      "variable_reference", "expression", "argument_list", "argument", "primary_expression", 
      "parenthesized_expression", "primary_expression_no_parenthesis", "array_creation_expression", 
      "member_access", "invocation_expression", "element_access", "this_access", 
      "base_access", "anon_delegate_expression", "anon_object_creation_expression", 
      "new_expression", "default_expression", "typeof_expression", "sizeof_expression", 
      "checked_expression", "unchecked_expression", "anon_object_init", "mem_dec_list_opt", 
      "mem_dec_list", "mem_dec", "argument_list_opt", "expression_list", "expression_list_opt", 
      "post_increment_expression", "postfix_expression", "post_decrement_expression", 
      "method_body", "object_creation_expression", "object_col_init_opt", "object_col_init", 
      "object_init", "col_init", "mem_init_list_opt", "mem_init_list", "mem_init", 
      "init_value", "elem_init_list", "elem_init", "nonassign_expression", "@1", 
      "array_initializer_opt", "array_initializer", "pointer_member_access", 
      "addressof_expression", "unary_expression", "unary_expression_not_plusminus", 
      "cast_expression", "pre_increment_expression", "pre_decrement_expression", 
      "multiplicative_expression", "type_quals_opt", "type_quals", "type_qual", 
      "additive_expression", "shift_expression", "relational_expression", "equality_expression", 
      "and_expression", "exclusive_or_expression", "inclusive_or_expression", 
      "conditional_and_expression", "conditional_or_expression", "conditional_expression", 
      "assignment", "assignment_operator", "lambda_expression", "query_expression", 
      "lambda_paramlist_opt", "lambda_expression_body", "impltype_lambda_parameter", 
      "impltype_lambda_paramlist", "lambda_paramlist", "expltype_lambda_paramlist", 
      "expltype_lambda_parameter", "block", "start_query", "from_clause", "query_body", 
      "end_query", "query_body_clauses_opt", "select_or_group_clause", "query_continuation_opt", 
      "query_body_clauses", "query_body_clause", "let_clause", "where_clause", 
      "join_clause", "join_into_clause", "orderby_clause", "boolean_expression", 
      "orderings", "ordering", "ordering_direction_opt", "ordering_direction", 
      "select_clause", "group_clause", "query_continuation", "constant_expression", 
      "statement", "labeled_statement", "declaration_statement", "embedded_statement", 
      "empty_statement", "expression_statement", "selection_statement", "iteration_statement", 
      "jump_statement", "try_statement", "checked_statement", "unchecked_statement", 
      "lock_statement", "using_statement", "unsafe_statement", "fixed_statement", 
      "block_start", "statement_list_opt", "block_end", "statement_list", "local_variable_declaration", 
      "local_constant_declaration", "variable_initializer", "stackalloc_initializer", 
      "statement_expression", "if_statement", "switch_statement", "switch_block", 
      "switch_sections_opt", "switch_sections", "switch_section", "switch_labels", 
      "switch_label", "while_statement", "do_statement", "for_statement", "foreach_statement", 
      "for_initializer_opt", "for_condition_opt", "for_iterator_opt", "@2", "for_initializer", 
      "for_condition", "for_iterator", "statement_expression_list", "break_statement", 
      "continue_statement", "goto_statement", "return_statement", "throw_statement", 
      "expression_opt", "catch_clauses", "finally_clause", "catch_clause", "identifier_opt", 
      "resource_acquisition", "fixed_pointer_declarators", "@3", "fixed_pointer_declarator", 
      "using_directives_opt", "attributes_opt", "using_directives", "attributes", 
      "comma_opt", "using_directive", "using_alias_directive", "using_namespace_directive", 
      "modifiers_opt", "modifiers", "modifier", "in_gen_clause", "gen_clause_list", 
      "gen_clause", "gen_clause_opt", "gen_class_base", "gen_class_type", "gen_type_list", 
      "class_base_opt", "class_base", "interface_type_list", "arglist_opt", "accessor_declarations", 
      "inproperty", "get_accessor_declaration", "set_accessor_declaration_opt", 
      "outproperty", "set_accessor_declaration", "get_accessor_declaration_opt", 
      "inset", "outset", "accessor_body", "event_accessor_declarations", "event_start", 
      "event_end", "event_add_accessor_declaration", "event_remove_accessor_declaration", 
      "indexer_declarator", "qualified_this", "operator_declarator", "operator_body", 
      "overloadable_operator_declarator", "conversion_operator_declarator", "overloadable_operator", 
      "constructor_body", "constructor_initializer_opt", "constructor_initializer", 
      "struct_interfaces_opt", "struct_interfaces", "variable_initializer_list_opt", 
      "variable_initializer_list", "interface_base_opt", "interface_base", "interface_event_declaration", 
      "new_opt", "interface_empty_body", "interface_accessors", "enum_base_opt", 
      "enum_base", "attribute_sections", "attribute_section", "attribute_list", 
      "attribute", "attribute_name", "attribute_arguments_opt", "attribute_arguments", 
      };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 3: // literal -> INTEGER_LITERAL 
#line 167 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = 0;/*int.Parse($1);*/ }
#line hidden
        break;
      case 4: // literal -> REAL_LITERAL 
#line 168 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = 0f; /*float.Parse($1);*/ }
#line hidden
        break;
      case 5: // literal -> CHARACTER_LITERAL 
#line 169 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = value_stack.array[value_stack.top-1].text[0]; }
#line hidden
        break;
      case 7: // literal -> NULL_LITERAL 
#line 171 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = null; }
#line hidden
        break;
      case 10: // mllit -> mllit MLSTRING_LITERAL 
#line 177 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = value_stack.array[value_stack.top-2].primval + value_stack.array[value_stack.top-1].text; }
#line hidden
        break;
      case 11: // boolean_literal -> TRUE 
#line 181 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = true; }
#line hidden
        break;
      case 12: // boolean_literal -> FALSE 
#line 182 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.primval = false; }
#line hidden
        break;
      case 14: // type_name -> qualified_identifier 
#line 192 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(value_stack.array[value_stack.top-1].text); if (inblock > 0 && value_stack.array[value_stack.top-1].text == "var") OverrideToken(@value_stack.array[value_stack.top-1].Location, TokenClass.Keyword); else OverrideToken(@value_stack.array[value_stack.top-1].Location, TokenClass.Type); }
#line hidden
        break;
      case 15: // member_name -> IDENTIFIER type_list_opt 
#line 196 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-2].text + (value_stack.array[value_stack.top-1].elemlist == null ? "" : ("<" + CodeElement.Join(value_stack.array[value_stack.top-1].elemlist) + ">")) ; @yyval.Location = @value_stack.array[value_stack.top-2].Location; }
#line hidden
        break;
      case 19: // type_list_opt -> '<' type_list '>' 
#line 206 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);  yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; }
#line hidden
        break;
      case 20: // type_list_opt -> '<' type_list '<' type_list GTGT 
#line 207 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  yyval.elemlist = value_stack.array[value_stack.top-4].elemlist; }
#line hidden
        break;
      case 21: // type_list -> type_opt 
#line 211 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].typeref); }
#line hidden
        break;
      case 22: // type_list -> type_list ',' type_opt 
#line 212 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-3].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].typeref); }
#line hidden
        break;
      case 24: // type_arg_list_opt -> '<' type_arg_list '>' 
#line 217 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);  yyval.list = value_stack.array[value_stack.top-2].list; }
#line hidden
        break;
      case 25: // type_arg_list -> IDENTIFIER 
#line 221 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-1].Location, TokenClass.Type); yyval.list = new ArrayList(); yyval.list.Add(value_stack.array[value_stack.top-1].text); }
#line hidden
        break;
      case 26: // type_arg_list -> type_arg_list ',' IDENTIFIER 
#line 222 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-1].Location, TokenClass.Type); yyval.list = value_stack.array[value_stack.top-3].list; yyval.list.Add(value_stack.array[value_stack.top-1].text); }
#line hidden
        break;
      case 30: // type -> array_type 
#line 235 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(value_stack.array[value_stack.top-1].typeref, true); }
#line hidden
        break;
      case 31: // nullable_type -> type_name '?' 
#line 239 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = value_stack.array[value_stack.top-2].typeref; @yyval.Location = @value_stack.array[value_stack.top-2].Location; }
#line hidden
        break;
      case 36: // simple_type -> primitive_type nullable_opt 
#line 253 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = value_stack.array[value_stack.top-2].typeref; @yyval.Location = @value_stack.array[value_stack.top-2].Location;}
#line hidden
        break;
      case 39: // primitive_type -> BOOL 
#line 259 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(bool)); }
#line hidden
        break;
      case 42: // numeric_type -> DECIMAL 
#line 264 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(decimal)); }
#line hidden
        break;
      case 43: // integral_type -> SBYTE 
#line 267 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(sbyte)); }
#line hidden
        break;
      case 44: // integral_type -> BYTE 
#line 268 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(byte)); }
#line hidden
        break;
      case 45: // integral_type -> SHORT 
#line 269 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(short)); }
#line hidden
        break;
      case 46: // integral_type -> USHORT 
#line 270 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(ushort)); }
#line hidden
        break;
      case 47: // integral_type -> INT 
#line 271 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(int)); }
#line hidden
        break;
      case 48: // integral_type -> UINT 
#line 272 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(uint)); }
#line hidden
        break;
      case 49: // integral_type -> LONG 
#line 273 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(long)); }
#line hidden
        break;
      case 50: // integral_type -> ULONG 
#line 274 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(ulong)); }
#line hidden
        break;
      case 51: // integral_type -> CHAR 
#line 275 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(char)); }
#line hidden
        break;
      case 52: // floating_point_type -> FLOAT 
#line 278 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(float)); }
#line hidden
        break;
      case 53: // floating_point_type -> DOUBLE 
#line 279 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(double)); }
#line hidden
        break;
      case 54: // class_type -> OBJECT 
#line 282 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(object)); }
#line hidden
        break;
      case 55: // class_type -> KW_STRING 
#line 283 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(string)); }
#line hidden
        break;
      case 58: // array_type -> array_type rank_specifier 
#line 290 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = value_stack.array[value_stack.top-2].typeref; @yyval.Location = @value_stack.array[value_stack.top-2].Location;}
#line hidden
        break;
      case 59: // array_type -> nullable_type rank_specifier 
#line 291 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = value_stack.array[value_stack.top-2].typeref; @yyval.Location = @value_stack.array[value_stack.top-2].Location;}
#line hidden
        break;
      case 60: // array_type -> simple_type rank_specifier 
#line 292 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = value_stack.array[value_stack.top-2].typeref; @yyval.Location = @value_stack.array[value_stack.top-2].Location;}
#line hidden
        break;
      case 61: // array_type -> qualified_identifier rank_specifier 
#line 293 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(value_stack.array[value_stack.top-2].text,true); @yyval.Location = @value_stack.array[value_stack.top-2].Location; OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type);}
#line hidden
        break;
      case 90: // anon_object_init -> '{' mem_dec_list_opt '}' 
#line 344 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 91: // anon_object_init -> '{' mem_dec_list ',' '}' 
#line 345 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 99: // parenthesized_expression -> '(' expression ')' 
#line 365 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); yyval = value_stack.array[value_stack.top-2]; @yyval.Location = @value_stack.array[value_stack.top-2].Location;}
#line hidden
        break;
      case 100: // member_access -> primary_expression '.' IDENTIFIER 
#line 368 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ /* instance class members */ }
#line hidden
        break;
      case 101: // member_access -> primitive_type '.' IDENTIFIER 
#line 369 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{   }
#line hidden
        break;
      case 102: // member_access -> class_type '.' IDENTIFIER 
#line 370 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  /* static class members */ }
#line hidden
        break;
      case 103: // default_expression -> DEFAULT '(' type ')' 
#line 374 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 104: // invocation_expression -> primary_expression_no_parenthesis type_list_opt '(' argument_list_opt ')' 
#line 378 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); @yyval.Location = @value_stack.array[value_stack.top-5].Location; /* delegate */}
#line hidden
        break;
      case 105: // invocation_expression -> qualified_identifier '(' argument_list_opt ')' 
#line 379 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); @yyval.Location = @value_stack.array[value_stack.top-4].Location; }
#line hidden
        break;
      case 108: // element_access -> primary_expression '[' expression_list ']' 
#line 386 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 109: // element_access -> qualified_identifier '[' expression_list ']' 
#line 387 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 117: // base_access -> BASE '[' expression_list ']' 
#line 403 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 121: // anon_delegate_expression -> DELEGATE '(' formal_parameter_list_opt ')' method_body 
#line 413 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 123: // object_creation_expression -> NEW type '(' argument_list_opt ')' object_col_init_opt 
#line 419 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-6].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 124: // object_creation_expression -> NEW type object_col_init_opt 
#line 420 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-3].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 125: // object_creation_expression -> NEW error 
#line 421 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-2].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 130: // object_init -> '{' mem_init_list_opt '}' 
#line 435 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 131: // object_init -> '{' mem_init_list ',' '}' 
#line 436 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 139: // col_init -> '{' elem_init_list '}' 
#line 459 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 140: // col_init -> '{' elem_init_list ',' '}' 
#line 460 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 144: // elem_init -> '{' expression_list '}' 
#line 470 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 145: // @1 -> 
#line 474 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); AddAutoComplete(@value_stack.array[value_stack.top-5].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 146: // array_creation_expression -> NEW non_array_type '[' expression_list ']' @1 rank_specifiers_opt array_initializer_opt 
#line 475 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-4].Location); AddAutoComplete(@value_stack.array[value_stack.top-8].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 147: // array_creation_expression -> NEW array_type array_initializer 
#line 476 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  AddAutoComplete(@value_stack.array[value_stack.top-3].Location, typeof(CodeType),typeof(CodeNamespace)); }
#line hidden
        break;
      case 151: // typeof_expression -> TYPEOF '(' type ')' 
#line 484 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); AddAutoComplete(@value_stack.array[value_stack.top-3].Location, typeof(CodeType),typeof(CodeNamespace)); }
#line hidden
        break;
      case 152: // typeof_expression -> TYPEOF '(' VOID ')' 
#line 485 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 153: // checked_expression -> CHECKED '(' expression ')' 
#line 488 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 154: // unchecked_expression -> UNCHECKED '(' expression ')' 
#line 491 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 155: // pointer_member_access -> postfix_expression ARROW IDENTIFIER 
#line 494 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ /* instance class members */ }
#line hidden
        break;
      case 157: // sizeof_expression -> SIZEOF '(' type ')' 
#line 500 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); AddAutoComplete(@value_stack.array[value_stack.top-3].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 176: // cast_expression -> '(' IDENTIFIER '?' ')' unary_expression_not_plusminus 
#line 538 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-4].Location, TokenClass.Type); MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); }
#line hidden
        break;
      case 177: // cast_expression -> '(' expression ')' unary_expression_not_plusminus 
#line 539 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Type); MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location); }
#line hidden
        break;
      case 178: // cast_expression -> '(' multiplicative_expression '*' ')' unary_expression 
#line 540 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 179: // cast_expression -> '(' qualified_identifier rank_specifier type_quals_opt ')' unary_expression 
#line 541 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-5].Location, TokenClass.Type); MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-6].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 180: // cast_expression -> '(' qualified_identifier '?' rank_specifier ')' unary_expression 
#line 542 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-5].Location, TokenClass.Type); MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-6].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 181: // cast_expression -> '(' primitive_type type_quals_opt ')' unary_expression 
#line 543 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-5].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 182: // cast_expression -> '(' class_type type_quals_opt ')' unary_expression 
#line 544 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-5].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 183: // cast_expression -> '(' primitive_type '?' ')' unary_expression 
#line 545 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 184: // cast_expression -> '(' primitive_type '?' rank_specifier ')' unary_expression 
#line 546 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 185: // cast_expression -> '(' qualified_identifier '?' ')' unary_expression 
#line 547 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); OverrideToken(@value_stack.array[value_stack.top-4].Location, TokenClass.Type); }
#line hidden
        break;
      case 186: // cast_expression -> '(' VOID type_quals_opt ')' unary_expression 
#line 548 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 225: // conditional_expression -> IDENTIFIER '?' expression ':' expression 
#line 619 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 226: // conditional_expression -> conditional_or_expression '?' expression ':' expression 
#line 620 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 245: // lambda_expression -> '(' lambda_paramlist_opt ')' LAMBDA lambda_expression_body 
#line 642 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-3].Location);}
#line hidden
        break;
      case 246: // lambda_expression -> '(' IDENTIFIER ')' LAMBDA lambda_expression_body 
#line 643 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-3].Location);}
#line hidden
        break;
      case 248: // lambda_expression -> '(' IDENTIFIER ',' impltype_lambda_paramlist ')' LAMBDA lambda_expression_body 
#line 645 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-7].Location,@value_stack.array[value_stack.top-3].Location);}
#line hidden
        break;
      case 262: // start_query -> 
#line 691 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{inquery++;}
#line hidden
        break;
      case 263: // end_query -> 
#line 695 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{if (inquery > 0) inquery--; }
#line hidden
        break;
      case 312: // block -> block_start '{' statement_list_opt '}' block_end 
#line 811 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,Pin(@value_stack.array[value_stack.top-2].Location));}
#line hidden
        break;
      case 313: // block_start -> 
#line 815 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ inblock++;}
#line hidden
        break;
      case 314: // block_end -> 
#line 819 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ if (inblock > 0) inblock--;}
#line hidden
        break;
      case 320: // labeled_statement -> IDENTIFIER ':' statement 
#line 835 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Other); }
#line hidden
        break;
      case 321: // declaration_statement -> local_variable_declaration ';' 
#line 838 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 322: // declaration_statement -> local_constant_declaration ';' 
#line 839 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 324: // local_variable_declaration -> FROM variable_declarators 
#line 843 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type); }
#line hidden
        break;
      case 325: // variable_declarators -> variable_declarator 
#line 846 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.list = new ArrayList(); yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 326: // variable_declarators -> variable_declarators ',' variable_declarator 
#line 847 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.list = value_stack.array[value_stack.top-3].list;  yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 327: // variable_declarator -> IDENTIFIER 
#line 850 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeField(value_stack.array[value_stack.top-1].text); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location; }
#line hidden
        break;
      case 328: // variable_declarator -> IDENTIFIER '=' variable_initializer 
#line 851 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeField(value_stack.array[value_stack.top-3].text); yyval.elem.Location = @value_stack.array[value_stack.top-3].Location; }
#line hidden
        break;
      case 332: // stackalloc_initializer -> STACKALLOC type '[' expression ']' 
#line 859 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 334: // constant_declarators -> constant_declarator 
#line 865 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.list = new ArrayList(); yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 335: // constant_declarators -> constant_declarators ',' constant_declarator 
#line 866 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.list = value_stack.array[value_stack.top-3].list; yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 336: // constant_declarator -> IDENTIFIER '=' constant_expression 
#line 869 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeField(value_stack.array[value_stack.top-3].text); yyval.elem.Location = @value_stack.array[value_stack.top-3].Location;}
#line hidden
        break;
      case 337: // expression_statement -> statement_expression ';' 
#line 872 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 347: // if_statement -> IF '(' boolean_expression ')' embedded_statement 
#line 888 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 348: // if_statement -> IF '(' boolean_expression ')' embedded_statement ELSE embedded_statement 
#line 890 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-4].Location);}
#line hidden
        break;
      case 349: // switch_statement -> SWITCH '(' expression ')' switch_block 
#line 893 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 350: // switch_block -> '{' switch_sections_opt '}' 
#line 896 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 365: // while_statement -> WHILE '(' boolean_expression ')' embedded_statement 
#line 927 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 366: // do_statement -> DO embedded_statement WHILE '(' boolean_expression ')' ';' 
#line 930 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 367: // @2 -> 
#line 934 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-7].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 381: // foreach_statement -> FOREACH '(' type IDENTIFIER IN expression ')' embedded_statement 
#line 964 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-7].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-7].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 387: // break_statement -> BREAK ';' 
#line 974 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 388: // continue_statement -> CONTINUE ';' 
#line 977 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 389: // goto_statement -> GOTO IDENTIFIER ';' 
#line 980 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Other); Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 390: // goto_statement -> GOTO CASE constant_expression ';' 
#line 981 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 391: // goto_statement -> GOTO DEFAULT ';' 
#line 982 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 392: // return_statement -> RETURN expression_opt ';' 
#line 985 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 395: // throw_statement -> THROW expression_opt ';' 
#line 992 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 401: // catch_clause -> CATCH '(' class_type identifier_opt ')' block 
#line 1004 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-5].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 402: // catch_clause -> CATCH '(' type_name identifier_opt ')' block 
#line 1005 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-2].Location); AddAutoComplete(@value_stack.array[value_stack.top-5].Location, typeof(CodeType), typeof(CodeNamespace));}
#line hidden
        break;
      case 409: // lock_statement -> LOCK '(' expression ')' embedded_statement 
#line 1022 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 410: // using_statement -> USING '(' resource_acquisition ')' embedded_statement 
#line 1025 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 413: // @3 -> 
#line 1032 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);}
#line hidden
        break;
      case 418: // compilation_unit -> using_directives_opt attributes_opt 
#line 1051 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ ; }
#line hidden
        break;
      case 419: // compilation_unit -> using_directives_opt namespace_member_declarations 
#line 1052 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeModel.AddRange(value_stack.array[value_stack.top-1].elemlist); }
#line hidden
        break;
      case 426: // namespace_declaration -> attributes_opt NAMESPACE qualified_identifier namespace_body comma_opt 
#line 1068 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{CodeNamespace ns = new CodeNamespace(value_stack.array[value_stack.top-3].text); 
                                                                     ns.AddRange(value_stack.array[value_stack.top-2].elemlist); yyval.elem = ns; yyval.elem.Location = @value_stack.array[value_stack.top-3].Location;}
#line hidden
        break;
      case 428: // comma_opt -> ';' 
#line 1073 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{Pin(@value_stack.array[value_stack.top-0].Location);}
#line hidden
        break;
      case 432: // norm_qualified_identifier -> norm_qualifier IDENTIFIER 
#line 1087 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-2].text + value_stack.array[value_stack.top-1].text;}
#line hidden
        break;
      case 433: // norm_qualifier -> IDENTIFIER '.' 
#line 1091 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-2].text + "."; }
#line hidden
        break;
      case 434: // norm_qualifier -> norm_qualifier IDENTIFIER '.' 
#line 1092 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-3].text + value_stack.array[value_stack.top-2].text + "."; }
#line hidden
        break;
      case 435: // long_qualified_identifier -> gen_qualifier member_name '.' 
#line 1096 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-3].text + value_stack.array[value_stack.top-2].text + "."; if (value_stack.array[value_stack.top-2].text.EndsWith(">") || IsKnownType(value_stack.array[value_stack.top-2].text)) OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type);  }
#line hidden
        break;
      case 437: // gen_qualified_identifier -> gen_qualifier member_name 
#line 1102 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-2].text + value_stack.array[value_stack.top-1].text;}
#line hidden
        break;
      case 438: // gen_qualifier -> member_name '.' 
#line 1106 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.text = value_stack.array[value_stack.top-2].text + ".";  if (value_stack.array[value_stack.top-2].text.EndsWith(">") || IsKnownType(value_stack.array[value_stack.top-2].text)) OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type); }
#line hidden
        break;
      case 440: // namespace_body -> '{' using_directives_opt namespace_member_declarations_opt '}' 
#line 1111 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist ; { MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}}
#line hidden
        break;
      case 445: // using_alias_directive -> USING IDENTIFIER '=' qualified_identifier ';' 
#line 1125 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{
                                                                      AddAutoComplete(@value_stack.array[value_stack.top-3].Location,typeof(CodeType), typeof(CodeNamespace)); 
                                                                      AddAlias(value_stack.array[value_stack.top-4].text, value_stack.array[value_stack.top-2].text);
                                                                      OverrideToken(@value_stack.array[value_stack.top-4].Location, TokenClass.Type);
                                                                    }
#line hidden
        break;
      case 446: // using_namespace_directive -> USING namespace_name ';' 
#line 1132 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{
                                                                      AddAutoComplete(@value_stack.array[value_stack.top-3].Location, true, typeof(CodeNamespace)); 
                                                                      AddImport(value_stack.array[value_stack.top-2].text);  Pin(@value_stack.array[value_stack.top-1].Location);
                                                                    }
#line hidden
        break;
      case 447: // using_namespace_directive -> USING error 
#line 1136 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-2].Location, true, typeof(CodeNamespace));}
#line hidden
        break;
      case 448: // namespace_member_declarations -> namespace_member_declaration 
#line 1139 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem);}
#line hidden
        break;
      case 449: // namespace_member_declarations -> namespace_member_declarations namespace_member_declaration 
#line 1140 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 450: // namespace_member_declaration -> namespace_declaration 
#line 1143 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].elem; }
#line hidden
        break;
      case 476: // in_gen_clause -> 
#line 1188 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ ingenclause = true; }
#line hidden
        break;
      case 479: // gen_clause_opt -> 
#line 1197 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ ingenclause = false; }
#line hidden
        break;
      case 480: // gen_clause_opt -> gen_clause_list 
#line 1198 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ ingenclause = false; }
#line hidden
        break;
      case 481: // gen_clause -> WHERE IDENTIFIER gen_class_base 
#line 1202 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type); }
#line hidden
        break;
      case 490: // class_declaration -> attributes_opt modifiers_opt CLASS IDENTIFIER type_arg_list_opt in_gen_clause class_base_opt gen_clause_opt class_body comma_opt 
#line 1225 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeRefType ct = new CodeRefType(value_stack.array[value_stack.top-7].text); 
                                                                if (value_stack.array[value_stack.top-6].list != null) ct.GenericArguments = value_stack.array[value_stack.top-6].list.ToArray(typeof(string)) as string[];
                                                                ct.AddRange(value_stack.array[value_stack.top-2].elemlist); yyval.elem = ct; yyval.elem.Location = @value_stack.array[value_stack.top-7].Location;
                                                                OverrideToken(@value_stack.array[value_stack.top-7].Location, TokenClass.Type); }
#line hidden
        break;
      case 493: // class_base -> ':' class_type 
#line 1235 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-2].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 494: // class_base -> ':' interface_type_list 
#line 1236 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-2].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 495: // class_base -> ':' class_type ',' interface_type_list 
#line 1237 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-4].Location, typeof(CodeType), typeof(CodeNamespace)); }
#line hidden
        break;
      case 498: // class_body -> '{' class_member_declarations_opt '}' 
#line 1244 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 499: // class_member_declarations_opt -> 
#line 1247 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(); }
#line hidden
        break;
      case 501: // class_member_declarations -> class_member_declaration 
#line 1251 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 502: // class_member_declarations -> class_member_declarations class_member_declaration 
#line 1252 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 514: // constant_declaration -> attributes_opt modifiers_opt CONST type constant_declarators ';' 
#line 1269 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ 
                                                                CodeElementList cel = new CodeElementList();
                                                                foreach (CodeField cf in value_stack.array[value_stack.top-2].list)
                                                                {
                                                                  cf.Type = value_stack.array[value_stack.top-3].typeref;
                                                                  cel.Add( cf ); 
                                                                }
                                                                yyval.elem = new CodeComplexMember(cel);
                                                              }
#line hidden
        break;
      case 515: // field_declaration -> attributes_opt modifiers_opt type variable_declarators ';' 
#line 1281 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ 
                                                                
                                                                CodeElementList cel = new CodeElementList();
                                                                foreach (CodeField cf in value_stack.array[value_stack.top-2].list)
                                                                {
                                                                  cf.Type = value_stack.array[value_stack.top-3].typeref;
                                                                  cel.Add( cf ); 
                                                                }
                                                                yyval.elem = new CodeComplexMember(cel);
                                                              }
#line hidden
        break;
      case 516: // method_declaration -> method_header in_gen_clause gen_clause_opt method_body 
#line 1293 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = value_stack.array[value_stack.top-4].elem; ingenclause = false;}
#line hidden
        break;
      case 517: // method_header -> attributes_opt modifiers_opt type qualified_identifier '(' formal_parameter_list_opt ')' 
#line 1298 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeMethod cm = new CodeMethod(value_stack.array[value_stack.top-4].text,value_stack.array[value_stack.top-5].typeref,value_stack.array[value_stack.top-2].elemlist); yyval.elem = cm;  yyval.elem.Location = @value_stack.array[value_stack.top-4].Location;  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); 
                                                                                  
    }
#line hidden
        break;
      case 518: // method_header -> attributes_opt modifiers_opt VOID qualified_identifier '(' formal_parameter_list_opt ')' 
#line 1302 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeMethod cm = new CodeMethod(value_stack.array[value_stack.top-4].text, new TypeRef(typeof(void)), value_stack.array[value_stack.top-2].elemlist);  yyval.elem = cm;
                                                                yyval.elem.Location = @value_stack.array[value_stack.top-4].Location;   MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);
                                                                }
#line hidden
        break;
      case 520: // formal_parameter_list_opt -> formal_parameter_list arglist_opt 
#line 1308 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; }
#line hidden
        break;
      case 525: // return_type -> VOID 
#line 1319 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.typeref = new TypeRef(typeof(void)); }
#line hidden
        break;
      case 528: // formal_parameter_list -> formal_parameter 
#line 1326 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 529: // formal_parameter_list -> formal_parameter_list ',' formal_parameter 
#line 1327 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-3].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 533: // fixed_parameter -> attributes_opt parameter_modifier_opt type IDENTIFIER 
#line 1336 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeParameter(value_stack.array[value_stack.top-1].text,value_stack.array[value_stack.top-2].typeref,value_stack.array[value_stack.top-3].paramattr);}
#line hidden
        break;
      case 534: // parameter_modifier_opt -> 
#line 1339 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.paramattr = ParameterAttributes.None; }
#line hidden
        break;
      case 535: // parameter_modifier_opt -> REF 
#line 1340 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.paramattr = (ParameterAttributes.Out | ParameterAttributes.In); }
#line hidden
        break;
      case 536: // parameter_modifier_opt -> OUT 
#line 1341 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.paramattr = ParameterAttributes.Out; }
#line hidden
        break;
      case 537: // parameter_array -> attributes_opt PARAMS type IDENTIFIER 
#line 1344 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeParameter(value_stack.array[value_stack.top-1].text,value_stack.array[value_stack.top-2].typeref); OverrideToken(@value_stack.array[value_stack.top-2].Location, TokenClass.Type); }
#line hidden
        break;
      case 538: // property_declaration -> attributes_opt modifiers_opt type qualified_identifier '{' accessor_declarations '}' 
#line 1349 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeProperty(value_stack.array[value_stack.top-4].text,value_stack.array[value_stack.top-5].typeref); yyval.elem.Location = @value_stack.array[value_stack.top-4].Location; MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 541: // inproperty -> 
#line 1357 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ inproperty = true; }
#line hidden
        break;
      case 542: // outproperty -> 
#line 1361 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ inproperty = false; }
#line hidden
        break;
      case 543: // inset -> 
#line 1365 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ inset = true; }
#line hidden
        break;
      case 544: // outset -> 
#line 1369 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ inset = false; }
#line hidden
        break;
      case 553: // event_declaration -> attributes_opt modifiers_opt EVENT type variable_declarators ';' 
#line 1394 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ 
                                                                
                                                                CodeElementList cel = new CodeElementList();
                                                                foreach (CodeField cf in value_stack.array[value_stack.top-2].list)
                                                                {
                                                                  cel.Add( cf ); 
                                                                }
                                                                yyval.elem = new CodeComplexMember(cel);
                                                              }
#line hidden
        break;
      case 554: // event_declaration -> attributes_opt modifiers_opt EVENT type qualified_identifier '{' event_accessor_declarations '}' 
#line 1404 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ 
                                                                 
                                                                  MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));
                                                                  CodeField cf = new CodeField(value_stack.array[value_stack.top-4].text,value_stack.array[value_stack.top-5].typeref);
                                                                  cf.Location = @value_stack.array[value_stack.top-5].Location;
                                                                yyval.elem = cf;  }
#line hidden
        break;
      case 555: // event_start -> 
#line 1413 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{inevent = true;}
#line hidden
        break;
      case 556: // event_end -> 
#line 1417 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{inevent = false;}
#line hidden
        break;
      case 561: // indexer_declaration -> attributes_opt modifiers_opt indexer_declarator '{' accessor_declarations '}' 
#line 1436 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ /*$$ = new CodeProperty("Item", null);*/ MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 562: // indexer_declarator -> type THIS '[' formal_parameter_list ']' 
#line 1439 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{   MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 563: // indexer_declarator -> type qualified_this '[' formal_parameter_list ']' 
#line 1440 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 568: // overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ')' 
#line 1455 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 569: // overloadable_operator_declarator -> type OPERATOR overloadable_operator '(' attributes_opt type IDENTIFIER ',' attributes_opt type IDENTIFIER ')' 
#line 1457 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-9].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 592: // conversion_operator_declarator -> IMPLICIT OPERATOR type '(' type IDENTIFIER ')' 
#line 1466 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{   MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 593: // conversion_operator_declarator -> EXPLICIT OPERATOR type '(' type IDENTIFIER ')' 
#line 1467 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 594: // constructor_declaration -> attributes_opt modifiers_opt constructor_declarator constructor_body 
#line 1471 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = value_stack.array[value_stack.top-2].elem;  }
#line hidden
        break;
      case 595: // constructor_declarator -> IDENTIFIER '(' formal_parameter_list_opt ')' constructor_initializer_opt 
#line 1475 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeConstructor(value_stack.array[value_stack.top-5].text, value_stack.array[value_stack.top-3].elemlist); yyval.elem.Location = @value_stack.array[value_stack.top-5].Location;
                                                                 MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-2].Location);  OverrideToken(@value_stack.array[value_stack.top-5].Location, TokenClass.Type);}
#line hidden
        break;
      case 598: // constructor_initializer -> ':' BASE '(' argument_list_opt ')' 
#line 1483 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 599: // constructor_initializer -> ':' THIS '(' argument_list_opt ')' 
#line 1484 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 600: // destructor_declaration -> attributes_opt modifiers_opt '~' IDENTIFIER '(' ')' block 
#line 1487 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{  OverrideToken(@value_stack.array[value_stack.top-4].Location, TokenClass.Type); yyval.elem = new CodeDestructor(value_stack.array[value_stack.top-4].text); yyval.elem.Location = @value_stack.array[value_stack.top-4].Location;}
#line hidden
        break;
      case 605: // struct_declaration -> attributes_opt modifiers_opt STRUCT IDENTIFIER type_arg_list_opt in_gen_clause struct_interfaces_opt gen_clause_opt struct_body comma_opt 
#line 1501 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeValueType cv = new CodeValueType(value_stack.array[value_stack.top-7].text);  
                                                                if (value_stack.array[value_stack.top-6].list != null) cv.GenericArguments = value_stack.array[value_stack.top-6].list.ToArray(typeof(string)) as string[];
                                                                cv.AddRange(value_stack.array[value_stack.top-2].elemlist); yyval.elem = cv; yyval.elem.Location = @value_stack.array[value_stack.top-7].Location;
                                                                OverrideToken(@value_stack.array[value_stack.top-7].Location, TokenClass.Type);}
#line hidden
        break;
      case 609: // struct_body -> '{' struct_member_declarations_opt '}' 
#line 1514 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 612: // struct_member_declarations -> struct_member_declaration 
#line 1521 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 613: // struct_member_declarations -> struct_member_declarations struct_member_declaration 
#line 1522 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 623: // array_initializer -> '{' variable_initializer_list_opt '}' 
#line 1538 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 624: // array_initializer -> '{' variable_initializer_list ',' '}' 
#line 1539 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 629: // interface_declaration -> attributes_opt modifiers_opt INTERFACE IDENTIFIER type_arg_list_opt in_gen_clause interface_base_opt gen_clause_opt interface_body comma_opt 
#line 1553 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeInterface ci = new CodeInterface(value_stack.array[value_stack.top-7].text); 
                                                                  if (value_stack.array[value_stack.top-6].list != null) ci.GenericArguments = value_stack.array[value_stack.top-6].list.ToArray(typeof(string)) as string[];
                                                                  ci.AddRange(value_stack.array[value_stack.top-2].elemlist); yyval.elem = ci; yyval.elem.Location = @value_stack.array[value_stack.top-7].Location;
                                                                  OverrideToken(@value_stack.array[value_stack.top-7].Location, TokenClass.Type);}
#line hidden
        break;
      case 633: // interface_body -> '{' interface_member_declarations_opt '}' 
#line 1566 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 636: // interface_member_declarations -> interface_member_declaration 
#line 1573 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 637: // interface_member_declarations -> interface_member_declarations interface_member_declaration 
#line 1574 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 642: // interface_method_declaration -> attributes_opt new_opt type member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
#line 1585 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeMethod(value_stack.array[value_stack.top-6].text,value_stack.array[value_stack.top-7].typeref,value_stack.array[value_stack.top-4].elemlist); yyval.elem.Location = @value_stack.array[value_stack.top-6].Location;
                                                                  MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-3].Location);  OverrideToken(@value_stack.array[value_stack.top-7].Location, TokenClass.Type);}
#line hidden
        break;
      case 643: // interface_method_declaration -> attributes_opt new_opt VOID member_name '(' formal_parameter_list_opt ')' gen_clause_opt interface_empty_body 
#line 1588 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeMethod(value_stack.array[value_stack.top-6].text, new TypeRef(typeof(void)), value_stack.array[value_stack.top-4].elemlist); 
                                                                  yyval.elem.Location = @value_stack.array[value_stack.top-6].Location; MakePair(@value_stack.array[value_stack.top-5].Location,@value_stack.array[value_stack.top-3].Location); }
#line hidden
        break;
      case 646: // interface_property_declaration -> attributes_opt new_opt type member_name '{' interface_accessors '}' 
#line 1597 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeProperty(value_stack.array[value_stack.top-4].text,value_stack.array[value_stack.top-5].typeref); yyval.elem.Location = @value_stack.array[value_stack.top-4].Location; 
                                                                  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);  OverrideToken(@value_stack.array[value_stack.top-5].Location, TokenClass.Type);}
#line hidden
        break;
      case 647: // interface_indexer_declaration -> attributes_opt new_opt type THIS '[' formal_parameter_list ']' '{' interface_accessors '}' 
#line 1603 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-4].Location);  MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);
                                                                   yyval.elem = new CodeProperty("Item", value_stack.array[value_stack.top-8].typeref); yyval.elem.Location = @value_stack.array[value_stack.top-7].Location;
                                                                   
                                                                 }
#line hidden
        break;
      case 654: // enum_declaration -> attributes_opt modifiers_opt ENUM IDENTIFIER enum_base_opt enum_body comma_opt 
#line 1626 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ CodeEnum ce = new CodeEnum(value_stack.array[value_stack.top-4].text); 
                                                        ce.AddRange(value_stack.array[value_stack.top-2].elemlist); yyval.elem = ce; yyval.elem.Location = @value_stack.array[value_stack.top-4].Location;
                                                        OverrideToken(@value_stack.array[value_stack.top-4].Location, TokenClass.Type);}
#line hidden
        break;
      case 658: // enum_body -> '{' enum_member_declarations_opt '}' 
#line 1638 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-2].elemlist; MakePair(@value_stack.array[value_stack.top-3].Location,Pin(@value_stack.array[value_stack.top-1].Location));}
#line hidden
        break;
      case 659: // enum_body -> '{' enum_member_declarations ',' '}' 
#line 1639 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-3].elemlist; MakePair(@value_stack.array[value_stack.top-4].Location,Pin(@value_stack.array[value_stack.top-1].Location)); }
#line hidden
        break;
      case 662: // enum_member_declarations -> enum_member_declaration 
#line 1646 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = new CodeElementList(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 663: // enum_member_declarations -> enum_member_declarations ',' enum_member_declaration 
#line 1648 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elemlist = value_stack.array[value_stack.top-3].elemlist; yyval.elemlist.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 664: // enum_member_declaration -> attributes_opt IDENTIFIER 
#line 1651 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeField(value_stack.array[value_stack.top-1].text, new TypeRef(typeof(int))); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location;}
#line hidden
        break;
      case 665: // enum_member_declaration -> attributes_opt IDENTIFIER '=' constant_expression 
#line 1652 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeField(value_stack.array[value_stack.top-3].text, new TypeRef(typeof(int))); yyval.elem.Location = @value_stack.array[value_stack.top-3].Location;}
#line hidden
        break;
      case 666: // delegate_declaration -> attributes_opt modifiers_opt DELEGATE return_type member_name '(' formal_parameter_list_opt ')' in_gen_clause gen_clause_opt ';' 
#line 1658 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ yyval.elem = new CodeDelegate(value_stack.array[value_stack.top-7].text,value_stack.array[value_stack.top-8].typeref,value_stack.array[value_stack.top-5].elemlist); yyval.elem.Location = @value_stack.array[value_stack.top-7].Location;
                                                          MakePair(@value_stack.array[value_stack.top-6].Location,@value_stack.array[value_stack.top-4].Location); OverrideToken(@value_stack.array[value_stack.top-7].Location, TokenClass.Type);
                                                         }
#line hidden
        break;
      case 670: // attribute_section -> '[' attribute_list ']' 
#line 1672 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 671: // attribute_section -> '[' attribute_list ',' ']' 
#line 1673 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
      case 678: // attribute_arguments -> '(' expression_list_opt ')' 
#line 1691 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location);}
#line hidden
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 1694 "C:\dev\xacc.ide\xacc\Languages\CSharp.y"


string[] defaultrefs = {"mscorlib.dll", "System.dll", "System.Xml.dll", "System.Drawing.dll", "System.Windows.Forms.dll"};

protected override string[] DefaultReferences
{
  get { return defaultrefs; }
}

protected override void AfterPinRestore()
{
  inset = false;
  inproperty = false;
  inquery = 0;
  inblock = 0;
  inevent = false;
  ingenclause = false;
}

public override bool HasFoldInfo
{
  get {return true; }
}

public override bool SupportsNavigation
{
  get {return true; }
}



bool inset = false;
bool inproperty = false;
int inblock = 0;
int inquery = 0;
bool inevent = false;
bool _ingenclause = false;
bool ingenclause 
{
  get {return _ingenclause; }
  set { _ingenclause = value; }
}

protected override int yylex()
{
  int t = base.yylex();
  
  if (yylval.Type == CSharpLexer.FROM)
  {
    if(yypeek() == CSharpLexer.IDENTIFIER || yypeekval.Class == TokenClass.Keyword)
    {
      OverrideToken(yylval.Location, TokenClass.Keyword);
      return CSharpLexer.FROM;
    }
    else
    {
      return CSharpLexer.IDENTIFIER;
    }
  }
  
  
  if (yylval.Type == CSharpLexer.WHERE)
  {
    if (ingenclause || inquery > 0)
    {
      OverrideToken(yylval.Location, TokenClass.Keyword);
      return CSharpLexer.WHERE;
    }
    else
    {
      return CSharpLexer.IDENTIFIER;
    }
  }
  
  if (inevent)
  {
    if (yylval.Type == CSharpLexer.IDENTIFIER)
    {
      if (yylval.Text == "add")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.ADD;
      }
      if (yylval.Text == "remove")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.REMOVE;
      }
    }
  }
  
  if (inproperty)
  {
    if (yylval.Type == CSharpLexer.IDENTIFIER)
    {
      if (yylval.Text == "get")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.GET;
      }
      if (yylval.Text == "set")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.SET;
      }

    }
  }
  
  if (inset)
  {
    if (yylval.Type == CSharpLexer.IDENTIFIER)
    {
      if (yylval.Text == "value")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return t;
      }
    }
  }
  
  if (inquery > 0)
  {
    if (yylval.Type == CSharpLexer.IDENTIFIER)
    {
      if (yylval.Text == "select")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.SELECT;
      }
      if (yylval.Text == "into")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.INTO;
      }
      if (yylval.Text == "join")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.JOIN;
      }
      if (yylval.Text == "group")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.GROUP;
      }
      if (yylval.Text == "let")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.LET;
      }
      if (yylval.Text == "on")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.ON;
      }
      if (yylval.Text == "equals")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.EQUALS;
      }
      if (yylval.Text == "ascending")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.ASCENDING;
      }
      if (yylval.Text == "descending")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.DESCENDING;
      }
      if (yylval.Text == "orderby")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.ORDERBY;
      }
      if (yylval.Text == "by")
      {
        OverrideToken(yylval.Location, TokenClass.Keyword);
        return CSharpLexer.BY;
      }      
    }
  }
  
  return t;
  
}

public override int GetIndentation(string previousline, int tabsize)
{
  int i = previousline.LastIndexOf("{");
  int j = previousline.LastIndexOf("}");
  
  if (i > j)
  {
    // i need to be adjusted to the first bit of non whitespace text
    return i + tabsize;
  }
  return 0;
}

protected internal override string[] CommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith("//"))
    {
      newlines[i] = lines[i];
    }
    else
    {
      newlines[i] = "//" + lines[i];
    }
  }
  return newlines;
}

protected internal override string[] UnCommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith("//"))
    {
      newlines[i] = lines[i].Substring(2);
    }
    else
    {
      newlines[i] = lines[i];
    }
  }
  return newlines;
}

protected override void Preprocess(IEnumerator tokens)
{
  while (tokens.MoveNext())
  {
    ValueType t = (ValueType)tokens.Current;
    
    switch (t.text.Trim())
    {
      case "#":
        break;
      case "define":
        if (tokens.MoveNext())
        {
          t = (ValueType)tokens.Current;
          AddDefine(t.text, t.Location);
        }
        break;
      case "if":
        if (tokens.MoveNext())
        {
          t = (ValueType)tokens.Current;
          AddConditional(t.text, t.Location);
        }
        break;
      case "else":
        AltConditional(t.Location);
        break;
      case "endif":
        EndConditional(t.Location);
        break;
      case "region":
        if (tokens.MoveNext())
        {
          // BIG HACK!!!
          if (t.Location.LineNumber < ((ValueType)tokens.Current).Location.LineNumber)
          {
            AddRegion("#region", t.Location);
          }
          else
          {
            t = (ValueType)tokens.Current;
            AddRegion(t.text, t.Location);
          }
        }
        break;
      case "endregion":
        EndRegion(t.Location);
        break;
      default:
        break;
      
    }
  }
}


    



#line default
}
}
