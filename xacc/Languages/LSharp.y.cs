#pragma warning disable 3001,3002,3003,3004,3005,3006,3007,3008,3009
// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using Xacc.Build;
using Xacc.CodeModel;
using Xacc.ComponentModel;
using Xacc.Languages.CSLex;
using gppg;

namespace LSharp
{
public enum Tokens {IGNORE = -1,error=1,EOF=2,LBRACE=3,RBRACE=4,INVALID=5,SPLICE=6,UNQUOTE=7,ARGREST=8,IDENTIFIER=9,LITERAL=10,DEFMACRO=11,DEFUN=12,ADD=13,APPEND=14,APPLY=15,ASSOC=16,CAAR=17,CAAAR=18,CAADR=19,CADAR=20,CADDR=21,CADR=22,CAR=23,CDAAR=24,CDAR=25,CDDAR=26,CDDDR=27,CDDR=28,CDR=29,CONS=30,COPYLIST=31,DIV=32,ENV=33,EQ=34,EQL=35,EVAL=36,EVALSTRING=37,STRING=38,INTEGER=39,EXITFN=40,FIRST=41,GT=42,GTE=43,LT=44,LTE=45,INSPECT=46,IS=47,LENGTH=48,LIST=49,LOAD=50,LOGAND=51,LOGOR=52,LOGXOR=53,MACROEXPAND=54,MAP=55,MEMBER=56,MUL=57,NCONC=58,NEW=59,NOT=60,NEQ=61,NTH=62,PR=63,PRL=64,READ=65,READSTRING=66,REFERENCE=67,REVERSE=68,REST=69,SUB=70,THROW=71,TYPEOF=72,USING=73,AND=74,BACKQUOTE=75,CALL=76,COND=77,DEC=78,DO=79,EACH=80,FN=81,FOR=82,IF=83,INC=84,LET=85,MACRO=86,OR=87,QUOTE=88,SETF=89,THE=90,TO=91,TRACE=92,TRY=93,WHEN=94,WHILE=95,WITH=96};

public abstract class LexerBase<T> : Xacc.Languages.CSLex.Language<T>.LexerBase where T : struct, Xacc.ComponentModel.IToken
{
public const int error=1;
public const int EOF=2;
public const int LBRACE=3;
public const int RBRACE=4;
public const int INVALID=5;
public const int SPLICE=6;
public const int UNQUOTE=7;
public const int ARGREST=8;
public const int IDENTIFIER=9;
public const int LITERAL=10;
public const int DEFMACRO=11;
public const int DEFUN=12;
public const int ADD=13;
public const int APPEND=14;
public const int APPLY=15;
public const int ASSOC=16;
public const int CAAR=17;
public const int CAAAR=18;
public const int CAADR=19;
public const int CADAR=20;
public const int CADDR=21;
public const int CADR=22;
public const int CAR=23;
public const int CDAAR=24;
public const int CDAR=25;
public const int CDDAR=26;
public const int CDDDR=27;
public const int CDDR=28;
public const int CDR=29;
public const int CONS=30;
public const int COPYLIST=31;
public const int DIV=32;
public const int ENV=33;
public const int EQ=34;
public const int EQL=35;
public const int EVAL=36;
public const int EVALSTRING=37;
public const int STRING=38;
public const int INTEGER=39;
public const int EXITFN=40;
public const int FIRST=41;
public const int GT=42;
public const int GTE=43;
public const int LT=44;
public const int LTE=45;
public const int INSPECT=46;
public const int IS=47;
public const int LENGTH=48;
public const int LIST=49;
public const int LOAD=50;
public const int LOGAND=51;
public const int LOGOR=52;
public const int LOGXOR=53;
public const int MACROEXPAND=54;
public const int MAP=55;
public const int MEMBER=56;
public const int MUL=57;
public const int NCONC=58;
public const int NEW=59;
public const int NOT=60;
public const int NEQ=61;
public const int NTH=62;
public const int PR=63;
public const int PRL=64;
public const int READ=65;
public const int READSTRING=66;
public const int REFERENCE=67;
public const int REVERSE=68;
public const int REST=69;
public const int SUB=70;
public const int THROW=71;
public const int TYPEOF=72;
public const int USING=73;
public const int AND=74;
public const int BACKQUOTE=75;
public const int CALL=76;
public const int COND=77;
public const int DEC=78;
public const int DO=79;
public const int EACH=80;
public const int FN=81;
public const int FOR=82;
public const int IF=83;
public const int INC=84;
public const int LET=85;
public const int MACRO=86;
public const int OR=87;
public const int QUOTE=88;
public const int SETF=89;
public const int THE=90;
public const int TO=91;
public const int TRACE=92;
public const int TRY=93;
public const int WHEN=94;
public const int WHILE=95;
public const int WITH=96;
}
public struct ValueType : Xacc.ComponentModel.IToken
#line 107 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{

  public CodeElementList  list {get {return value as CodeElementList; } set {this.value = value;}}
  public CodeElement      elem {get {return value as CodeElement; } set {this.value = value;}}
  
#if DEBUG
  public object Value { get { return value; } }
#endif


#line default
internal int __type;
internal TokenClass __class;
Location __loc;
object value;
public Location Location {get {return __loc;} set {__loc = value;} }
public int Type {get {return __type;} set {__type = value;}}
public TokenClass Class {get {return __class;} set {__class = value;}}
public string text {get {return (string)value;} set {this.value = value;}}
public string Text {get {return (string)value;} set {this.value = value;}}
public int Length {get {return Text.Length;}}

public static implicit operator ValueType(Xacc.Languages.CSLex.Yytoken y)
{
  ValueType t = new ValueType();
  t.__type = -1;
  t.__class = y.Class;
  return t;
}

public static readonly ValueType EOF = new ValueType();
}
#line default
public partial class Parser: ShiftReduceParser<ValueType>
{
#line 4 "D:\dev\XACC\xacc\Languages\LSharp.y"


public override string[] Extensions {get {return new string[]{"ls","lsp"}; }}
public override string Name {get {return "LSharp"; }}
LexerBase lexer = new LSharpLexer();
protected override LexerBase Lexer {get {return lexer; }}

[Serializable]
[Image("bullet.png")]
class List : CodeContainerElement
{
  public List(CodeElementList l)
  {
    AddRange(l);
  }
  
  public override string ToString()
  {
    return "(...)";
  }
}


[Serializable]
[Image("CodeMethod.png")]
class Function : CodeElement
{
  string value;
  public Function(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeField.png")]
class Identifier : CodeElement
{
  string value;
  public Identifier(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeProperty.png")]
class Keyword : CodeElement
{
  string value;
  public Keyword(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}



[Serializable]
[Image("File.Type.NA.png")]
class File : CodeContainerElement
{
  public File(string filename, CodeElementList l)
  {
    Name = filename;
    AddRange(l);
  }
}

[Serializable]
[Image("CodeEnum.png")]
class Literal : CodeElement
{
  string value;
  public Literal(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

#line default
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[260];
    AddState(0,new State(-3,new int[]{-7,1,-1,3}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,2,-2},new int[]{-5,4,-4,5,-6,7,-3,11}));
    AddState(4,new State(-4));
    AddState(5,new State(-113));
    AddState(6,new State(-116));
    AddState(7,new State(-117));
    AddState(8,new State(-118));
    AddState(9,new State(-119));
    AddState(10,new State(-120));
    AddState(11,new State(-114));
    AddState(12,new State(new int[]{9,19,74,38,76,40,77,44,78,49,79,51,80,53,81,57,82,67,83,72,84,77,85,79,86,83,87,86,89,88,90,92,91,95,92,99,93,102,94,106,95,109,96,112,12,116,11,120,13,124,14,126,15,128,16,131,18,134,19,136,17,138,20,140,21,142,22,144,23,146,24,148,25,150,26,152,27,154,28,156,29,158,30,160,31,163,32,165,33,167,34,168,35,170,36,172,37,174,40,176,41,178,42,180,43,184,45,188,44,192,46,196,47,198,48,201,49,203,50,205,51,207,52,209,53,211,54,213,55,216,56,219,57,222,58,224,59,226,60,229,61,231,62,233,63,236,64,238,65,240,66,243,67,245,68,248,69,250,70,252,71,254,72,256,73,258,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29},new int[]{-9,13,-10,15,-11,17,-6,32,-3,35}));
    AddState(13,new State(new int[]{4,14}));
    AddState(14,new State(-5));
    AddState(15,new State(new int[]{4,16}));
    AddState(16,new State(-6));
    AddState(17,new State(new int[]{4,18}));
    AddState(18,new State(-7));
    AddState(19,new State(-109,new int[]{-2,20}));
    AddState(20,new State(new int[]{4,21,9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(21,new State(-8));
    AddState(22,new State(-110));
    AddState(23,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,24,-4,5,-6,7,-3,11}));
    AddState(24,new State(-11));
    AddState(25,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,26,-4,5,-6,7,-3,11}));
    AddState(26,new State(-12));
    AddState(27,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,28,-4,5,-6,7,-3,11}));
    AddState(28,new State(-13));
    AddState(29,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,30,-4,5,-6,7,-3,11}));
    AddState(30,new State(-14));
    AddState(31,new State(-115));
    AddState(32,new State(-109,new int[]{-2,33}));
    AddState(33,new State(new int[]{4,34,9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(34,new State(-9));
    AddState(35,new State(-109,new int[]{-2,36}));
    AddState(36,new State(new int[]{4,37,9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(37,new State(-10));
    AddState(38,new State(-109,new int[]{-2,39}));
    AddState(39,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-79},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(40,new State(new int[]{9,41}));
    AddState(41,new State(new int[]{9,42}));
    AddState(42,new State(-109,new int[]{-2,43}));
    AddState(43,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-80},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(44,new State(-107,new int[]{-15,45}));
    AddState(45,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-111},new int[]{-13,46,-5,47,-4,5,-6,7,-3,11}));
    AddState(46,new State(-81));
    AddState(47,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-112},new int[]{-5,48,-4,5,-6,7,-3,11}));
    AddState(48,new State(-108));
    AddState(49,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,50,-4,5,-6,7,-3,11}));
    AddState(50,new State(-82));
    AddState(51,new State(-109,new int[]{-2,52}));
    AddState(52,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-83},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(53,new State(new int[]{9,54}));
    AddState(54,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,55,-4,5,-6,7,-3,11}));
    AddState(55,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,56,-4,5,-6,7,-3,11}));
    AddState(56,new State(-84));
    AddState(57,new State(new int[]{3,60},new int[]{-12,58}));
    AddState(58,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,59,-4,5,-6,7,-3,11}));
    AddState(59,new State(-85));
    AddState(60,new State(-105,new int[]{-17,61}));
    AddState(61,new State(new int[]{9,64,8,65,4,-103},new int[]{-18,62}));
    AddState(62,new State(new int[]{4,63}));
    AddState(63,new State(-102));
    AddState(64,new State(-106));
    AddState(65,new State(new int[]{9,66}));
    AddState(66,new State(-104));
    AddState(67,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,68,-4,5,-6,7,-3,11}));
    AddState(68,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,69,-4,5,-6,7,-3,11}));
    AddState(69,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,70,-4,5,-6,7,-3,11}));
    AddState(70,new State(-109,new int[]{-2,71}));
    AddState(71,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-86},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(72,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,73,-4,5,-6,7,-3,11}));
    AddState(73,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,74,-4,5,-6,7,-3,11}));
    AddState(74,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-111},new int[]{-13,75,-5,76,-4,5,-6,7,-3,11}));
    AddState(75,new State(-87));
    AddState(76,new State(-112));
    AddState(77,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,78,-4,5,-6,7,-3,11}));
    AddState(78,new State(-88));
    AddState(79,new State(new int[]{9,80}));
    AddState(80,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,81,-4,5,-6,7,-3,11}));
    AddState(81,new State(-109,new int[]{-2,82}));
    AddState(82,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-89},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(83,new State(new int[]{3,60},new int[]{-12,84}));
    AddState(84,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,85,-4,5,-6,7,-3,11}));
    AddState(85,new State(-90));
    AddState(86,new State(-109,new int[]{-2,87}));
    AddState(87,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-91},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(88,new State(-100,new int[]{-16,89}));
    AddState(89,new State(new int[]{9,90,4,-92}));
    AddState(90,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,91,-4,5,-6,7,-3,11}));
    AddState(91,new State(-101));
    AddState(92,new State(new int[]{9,93}));
    AddState(93,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,94,-4,5,-6,7,-3,11}));
    AddState(94,new State(-93));
    AddState(95,new State(new int[]{9,96}));
    AddState(96,new State(new int[]{39,97}));
    AddState(97,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,98,-4,5,-6,7,-3,11}));
    AddState(98,new State(-94));
    AddState(99,new State(new int[]{9,100}));
    AddState(100,new State(-109,new int[]{-2,101}));
    AddState(101,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-95},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(102,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,103,-4,5,-6,7,-3,11}));
    AddState(103,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,104,-4,5,-6,7,-3,11}));
    AddState(104,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-111},new int[]{-13,105,-5,76,-4,5,-6,7,-3,11}));
    AddState(105,new State(-96));
    AddState(106,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,107,-4,5,-6,7,-3,11}));
    AddState(107,new State(-109,new int[]{-2,108}));
    AddState(108,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-97},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(109,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,110,-4,5,-6,7,-3,11}));
    AddState(110,new State(-109,new int[]{-2,111}));
    AddState(111,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-98},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(112,new State(-100,new int[]{-16,113}));
    AddState(113,new State(new int[]{9,115,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,114,-4,5,-6,7,-3,11}));
    AddState(114,new State(-99));
    AddState(115,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-116},new int[]{-5,91,-4,5,-6,7,-3,11}));
    AddState(116,new State(new int[]{9,117}));
    AddState(117,new State(new int[]{3,60},new int[]{-12,118}));
    AddState(118,new State(-109,new int[]{-2,119}));
    AddState(119,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-15},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(120,new State(new int[]{9,121}));
    AddState(121,new State(new int[]{3,60},new int[]{-12,122}));
    AddState(122,new State(-109,new int[]{-2,123}));
    AddState(123,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-16},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(124,new State(-109,new int[]{-2,125}));
    AddState(125,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-17},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(126,new State(-109,new int[]{-2,127}));
    AddState(127,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-18},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(128,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,129,-4,5,-6,7,-3,11}));
    AddState(129,new State(-109,new int[]{-2,130}));
    AddState(130,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-19},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(131,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,132,-4,5,-6,7,-3,11}));
    AddState(132,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,133,-4,5,-6,7,-3,11}));
    AddState(133,new State(-20));
    AddState(134,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,135,-4,5,-6,7,-3,11}));
    AddState(135,new State(-21));
    AddState(136,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,137,-4,5,-6,7,-3,11}));
    AddState(137,new State(-22));
    AddState(138,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,139,-4,5,-6,7,-3,11}));
    AddState(139,new State(-23));
    AddState(140,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,141,-4,5,-6,7,-3,11}));
    AddState(141,new State(-24));
    AddState(142,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,143,-4,5,-6,7,-3,11}));
    AddState(143,new State(-25));
    AddState(144,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,145,-4,5,-6,7,-3,11}));
    AddState(145,new State(-26));
    AddState(146,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,147,-4,5,-6,7,-3,11}));
    AddState(147,new State(-27));
    AddState(148,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,149,-4,5,-6,7,-3,11}));
    AddState(149,new State(-28));
    AddState(150,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,151,-4,5,-6,7,-3,11}));
    AddState(151,new State(-29));
    AddState(152,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,153,-4,5,-6,7,-3,11}));
    AddState(153,new State(-30));
    AddState(154,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,155,-4,5,-6,7,-3,11}));
    AddState(155,new State(-31));
    AddState(156,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,157,-4,5,-6,7,-3,11}));
    AddState(157,new State(-32));
    AddState(158,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,159,-4,5,-6,7,-3,11}));
    AddState(159,new State(-33));
    AddState(160,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,161,-4,5,-6,7,-3,11}));
    AddState(161,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,162,-4,5,-6,7,-3,11}));
    AddState(162,new State(-34));
    AddState(163,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,164,-4,5,-6,7,-3,11}));
    AddState(164,new State(-35));
    AddState(165,new State(-109,new int[]{-2,166}));
    AddState(166,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-36},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(167,new State(-37));
    AddState(168,new State(-109,new int[]{-2,169}));
    AddState(169,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-38},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(170,new State(-109,new int[]{-2,171}));
    AddState(171,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-39},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(172,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,173,-4,5,-6,7,-3,11}));
    AddState(173,new State(-40));
    AddState(174,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,175,-4,5,-6,7,-3,11}));
    AddState(175,new State(-41));
    AddState(176,new State(new int[]{39,177,4,-42}));
    AddState(177,new State(-43));
    AddState(178,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,179,-4,5,-6,7,-3,11}));
    AddState(179,new State(-44));
    AddState(180,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,181,-4,5,-6,7,-3,11}));
    AddState(181,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,182,-4,5,-6,7,-3,11}));
    AddState(182,new State(-109,new int[]{-2,183}));
    AddState(183,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-45},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(184,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,185,-4,5,-6,7,-3,11}));
    AddState(185,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,186,-4,5,-6,7,-3,11}));
    AddState(186,new State(-109,new int[]{-2,187}));
    AddState(187,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-46},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(188,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,189,-4,5,-6,7,-3,11}));
    AddState(189,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,190,-4,5,-6,7,-3,11}));
    AddState(190,new State(-109,new int[]{-2,191}));
    AddState(191,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-47},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(192,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,193,-4,5,-6,7,-3,11}));
    AddState(193,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,194,-4,5,-6,7,-3,11}));
    AddState(194,new State(-109,new int[]{-2,195}));
    AddState(195,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-48},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(196,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,197,-4,5,-6,7,-3,11}));
    AddState(197,new State(-49));
    AddState(198,new State(new int[]{9,199}));
    AddState(199,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,200,-4,5,-6,7,-3,11}));
    AddState(200,new State(-50));
    AddState(201,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,202,-4,5,-6,7,-3,11}));
    AddState(202,new State(-51));
    AddState(203,new State(-109,new int[]{-2,204}));
    AddState(204,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-52},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(205,new State(new int[]{38,206}));
    AddState(206,new State(-53));
    AddState(207,new State(-109,new int[]{-2,208}));
    AddState(208,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-54},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(209,new State(-109,new int[]{-2,210}));
    AddState(210,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-55},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(211,new State(-109,new int[]{-2,212}));
    AddState(212,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-56},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(213,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,214,-4,5,-6,7,-3,11}));
    AddState(214,new State(-109,new int[]{-2,215}));
    AddState(215,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-57},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(216,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,217,-4,5,-6,7,-3,11}));
    AddState(217,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,218,-4,5,-6,7,-3,11}));
    AddState(218,new State(-58));
    AddState(219,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,220,-4,5,-6,7,-3,11}));
    AddState(220,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,221,-4,5,-6,7,-3,11}));
    AddState(221,new State(-59));
    AddState(222,new State(-109,new int[]{-2,223}));
    AddState(223,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-60},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(224,new State(-3,new int[]{-1,225}));
    AddState(225,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-61},new int[]{-5,4,-4,5,-6,7,-3,11}));
    AddState(226,new State(new int[]{9,227}));
    AddState(227,new State(-109,new int[]{-2,228}));
    AddState(228,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-62},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(229,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,230,-4,5,-6,7,-3,11}));
    AddState(230,new State(-63));
    AddState(231,new State(-109,new int[]{-2,232}));
    AddState(232,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-64},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(233,new State(new int[]{39,234}));
    AddState(234,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,235,-4,5,-6,7,-3,11}));
    AddState(235,new State(-65));
    AddState(236,new State(-109,new int[]{-2,237}));
    AddState(237,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-66},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(238,new State(-109,new int[]{-2,239}));
    AddState(239,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-67},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(240,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,241,-4,5,-6,7,-3,11}));
    AddState(241,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-111},new int[]{-13,242,-5,76,-4,5,-6,7,-3,11}));
    AddState(242,new State(-68));
    AddState(243,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,244,-4,5,-6,7,-3,11}));
    AddState(244,new State(-69));
    AddState(245,new State(-77,new int[]{-14,246}));
    AddState(246,new State(new int[]{38,247,4,-70}));
    AddState(247,new State(-78));
    AddState(248,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,249,-4,5,-6,7,-3,11}));
    AddState(249,new State(-71));
    AddState(250,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,251,-4,5,-6,7,-3,11}));
    AddState(251,new State(-72));
    AddState(252,new State(-109,new int[]{-2,253}));
    AddState(253,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31,4,-73},new int[]{-5,22,-4,5,-6,7,-3,11}));
    AddState(254,new State(new int[]{9,6,38,8,39,9,10,10,3,12,88,23,75,25,6,27,7,29,1,31},new int[]{-5,255,-4,5,-6,7,-3,11}));
    AddState(255,new State(-74));
    AddState(256,new State(new int[]{9,257}));
    AddState(257,new State(-75));
    AddState(258,new State(-77,new int[]{-14,259}));
    AddState(259,new State(new int[]{38,247,4,-76}));

    rules=new Rule[121];
    rules[1]=new Rule(-8, new int[]{-7,2});
    rules[2]=new Rule(-7, new int[]{-1});
    rules[3]=new Rule(-1, new int[]{});
    rules[4]=new Rule(-1, new int[]{-1,-5});
    rules[5]=new Rule(-3, new int[]{3,-9,4});
    rules[6]=new Rule(-3, new int[]{3,-10,4});
    rules[7]=new Rule(-3, new int[]{3,-11,4});
    rules[8]=new Rule(-3, new int[]{3,9,-2,4});
    rules[9]=new Rule(-3, new int[]{3,-6,-2,4});
    rules[10]=new Rule(-3, new int[]{3,-3,-2,4});
    rules[11]=new Rule(-3, new int[]{88,-5});
    rules[12]=new Rule(-3, new int[]{75,-5});
    rules[13]=new Rule(-3, new int[]{6,-5});
    rules[14]=new Rule(-3, new int[]{7,-5});
    rules[15]=new Rule(-10, new int[]{12,9,-12,-2});
    rules[16]=new Rule(-10, new int[]{11,9,-12,-2});
    rules[17]=new Rule(-11, new int[]{13,-2});
    rules[18]=new Rule(-11, new int[]{14,-2});
    rules[19]=new Rule(-11, new int[]{15,-5,-2});
    rules[20]=new Rule(-11, new int[]{16,-5,-5});
    rules[21]=new Rule(-11, new int[]{18,-5});
    rules[22]=new Rule(-11, new int[]{19,-5});
    rules[23]=new Rule(-11, new int[]{17,-5});
    rules[24]=new Rule(-11, new int[]{20,-5});
    rules[25]=new Rule(-11, new int[]{21,-5});
    rules[26]=new Rule(-11, new int[]{22,-5});
    rules[27]=new Rule(-11, new int[]{23,-5});
    rules[28]=new Rule(-11, new int[]{24,-5});
    rules[29]=new Rule(-11, new int[]{25,-5});
    rules[30]=new Rule(-11, new int[]{26,-5});
    rules[31]=new Rule(-11, new int[]{27,-5});
    rules[32]=new Rule(-11, new int[]{28,-5});
    rules[33]=new Rule(-11, new int[]{29,-5});
    rules[34]=new Rule(-11, new int[]{30,-5,-5});
    rules[35]=new Rule(-11, new int[]{31,-5});
    rules[36]=new Rule(-11, new int[]{32,-2});
    rules[37]=new Rule(-11, new int[]{33});
    rules[38]=new Rule(-11, new int[]{34,-2});
    rules[39]=new Rule(-11, new int[]{35,-2});
    rules[40]=new Rule(-11, new int[]{36,-5});
    rules[41]=new Rule(-11, new int[]{37,-5});
    rules[42]=new Rule(-11, new int[]{40});
    rules[43]=new Rule(-11, new int[]{40,39});
    rules[44]=new Rule(-11, new int[]{41,-5});
    rules[45]=new Rule(-11, new int[]{42,-5,-5,-2});
    rules[46]=new Rule(-11, new int[]{43,-5,-5,-2});
    rules[47]=new Rule(-11, new int[]{45,-5,-5,-2});
    rules[48]=new Rule(-11, new int[]{44,-5,-5,-2});
    rules[49]=new Rule(-11, new int[]{46,-5});
    rules[50]=new Rule(-11, new int[]{47,9,-5});
    rules[51]=new Rule(-11, new int[]{48,-5});
    rules[52]=new Rule(-11, new int[]{49,-2});
    rules[53]=new Rule(-11, new int[]{50,38});
    rules[54]=new Rule(-11, new int[]{51,-2});
    rules[55]=new Rule(-11, new int[]{52,-2});
    rules[56]=new Rule(-11, new int[]{53,-2});
    rules[57]=new Rule(-11, new int[]{54,-5,-2});
    rules[58]=new Rule(-11, new int[]{55,-5,-5});
    rules[59]=new Rule(-11, new int[]{56,-5,-5});
    rules[60]=new Rule(-11, new int[]{57,-2});
    rules[61]=new Rule(-11, new int[]{58,-1});
    rules[62]=new Rule(-11, new int[]{59,9,-2});
    rules[63]=new Rule(-11, new int[]{60,-5});
    rules[64]=new Rule(-11, new int[]{61,-2});
    rules[65]=new Rule(-11, new int[]{62,39,-5});
    rules[66]=new Rule(-11, new int[]{63,-2});
    rules[67]=new Rule(-11, new int[]{64,-2});
    rules[68]=new Rule(-11, new int[]{65,-5,-13});
    rules[69]=new Rule(-11, new int[]{66,-5});
    rules[70]=new Rule(-11, new int[]{67,-14});
    rules[71]=new Rule(-11, new int[]{68,-5});
    rules[72]=new Rule(-11, new int[]{69,-5});
    rules[73]=new Rule(-11, new int[]{70,-2});
    rules[74]=new Rule(-11, new int[]{71,-5});
    rules[75]=new Rule(-11, new int[]{72,9});
    rules[76]=new Rule(-11, new int[]{73,-14});
    rules[77]=new Rule(-14, new int[]{});
    rules[78]=new Rule(-14, new int[]{-14,38});
    rules[79]=new Rule(-9, new int[]{74,-2});
    rules[80]=new Rule(-9, new int[]{76,9,9,-2});
    rules[81]=new Rule(-9, new int[]{77,-15,-13});
    rules[82]=new Rule(-9, new int[]{78,-5});
    rules[83]=new Rule(-9, new int[]{79,-2});
    rules[84]=new Rule(-9, new int[]{80,9,-5,-5});
    rules[85]=new Rule(-9, new int[]{81,-12,-5});
    rules[86]=new Rule(-9, new int[]{82,-5,-5,-5,-2});
    rules[87]=new Rule(-9, new int[]{83,-5,-5,-13});
    rules[88]=new Rule(-9, new int[]{84,-5});
    rules[89]=new Rule(-9, new int[]{85,9,-5,-2});
    rules[90]=new Rule(-9, new int[]{86,-12,-5});
    rules[91]=new Rule(-9, new int[]{87,-2});
    rules[92]=new Rule(-9, new int[]{89,-16});
    rules[93]=new Rule(-9, new int[]{90,9,-5});
    rules[94]=new Rule(-9, new int[]{91,9,39,-5});
    rules[95]=new Rule(-9, new int[]{92,9,-2});
    rules[96]=new Rule(-9, new int[]{93,-5,-5,-13});
    rules[97]=new Rule(-9, new int[]{94,-5,-2});
    rules[98]=new Rule(-9, new int[]{95,-5,-2});
    rules[99]=new Rule(-9, new int[]{96,-16,-5});
    rules[100]=new Rule(-16, new int[]{});
    rules[101]=new Rule(-16, new int[]{-16,9,-5});
    rules[102]=new Rule(-12, new int[]{3,-17,-18,4});
    rules[103]=new Rule(-18, new int[]{});
    rules[104]=new Rule(-18, new int[]{8,9});
    rules[105]=new Rule(-17, new int[]{});
    rules[106]=new Rule(-17, new int[]{-17,9});
    rules[107]=new Rule(-15, new int[]{});
    rules[108]=new Rule(-15, new int[]{-15,-5,-5});
    rules[109]=new Rule(-2, new int[]{});
    rules[110]=new Rule(-2, new int[]{-2,-5});
    rules[111]=new Rule(-13, new int[]{});
    rules[112]=new Rule(-13, new int[]{-5});
    rules[113]=new Rule(-5, new int[]{-4});
    rules[114]=new Rule(-5, new int[]{-3});
    rules[115]=new Rule(-5, new int[]{1});
    rules[116]=new Rule(-4, new int[]{9});
    rules[117]=new Rule(-4, new int[]{-6});
    rules[118]=new Rule(-6, new int[]{38});
    rules[119]=new Rule(-6, new int[]{39});
    rules[120]=new Rule(-6, new int[]{10});

    nonTerminals = new string[] {"", "lists", "exprlist", "list", "listcontent", 
      "expr", "literal", "file", "$accept", "specialform", "macros", "functions", 
      "args", "expropt", "stringlist", "condexprlist", "setvaluexpr", "arglist", 
      "argtail", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // file -> lists 
#line 133 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ CodeModel.Add( new File(CurrentFilename, value_stack.array[value_stack.top-1].list)); }
#line hidden
        break;
      case 3: // lists -> 
#line 137 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = new CodeElementList(); }
#line hidden
        break;
      case 4: // lists -> lists expr 
#line 138 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = value_stack.array[value_stack.top-2].list; yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 5: // list -> LBRACE specialform RBRACE 
#line 142 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 6: // list -> LBRACE macros RBRACE 
#line 143 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 7: // list -> LBRACE functions RBRACE 
#line 144 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 8: // list -> LBRACE IDENTIFIER exprlist RBRACE 
#line 145 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); OverrideToken(@value_stack.array[value_stack.top-3].Location, IsType(value_stack.array[value_stack.top-3].text) ? TokenClass.Type : TokenClass.Identifier); }
#line hidden
        break;
      case 9: // list -> LBRACE literal exprlist RBRACE 
#line 146 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 10: // list -> LBRACE list exprlist RBRACE 
#line 147 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 11: // list -> QUOTE expr 
#line 148 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 12: // list -> BACKQUOTE expr 
#line 149 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 13: // list -> SPLICE expr 
#line 150 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 14: // list -> UNQUOTE expr 
#line 151 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 15: // macros -> DEFUN IDENTIFIER args exprlist 
#line 155 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Type); }
#line hidden
        break;
      case 16: // macros -> DEFMACRO IDENTIFIER args exprlist 
#line 156 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Type); }
#line hidden
        break;
      case 77: // stringlist -> 
#line 223 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 78: // stringlist -> stringlist STRING 
#line 224 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 100: // setvaluexpr -> 
#line 254 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 101: // setvaluexpr -> setvaluexpr IDENTIFIER expr 
#line 255 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 102: // args -> LBRACE arglist argtail RBRACE 
#line 259 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 104: // argtail -> ARGREST IDENTIFIER 
#line 264 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 105: // arglist -> 
#line 268 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 106: // arglist -> arglist IDENTIFIER 
#line 269 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 107: // condexprlist -> 
#line 273 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 108: // condexprlist -> condexprlist expr expr 
#line 274 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 109: // exprlist -> 
#line 278 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = new CodeElementList(); }
#line hidden
        break;
      case 110: // exprlist -> exprlist expr 
#line 279 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list= value_stack.array[value_stack.top-2].list; yyval.list.Add(value_stack.array[value_stack.top-1].elem);}
#line hidden
        break;
      case 111: // expropt -> 
#line 283 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 112: // expropt -> expr 
#line 284 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 113: // expr -> listcontent 
#line 288 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 114: // expr -> list 
#line 289 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 115: // expr -> error 
#line 290 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 116: // listcontent -> IDENTIFIER 
#line 294 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Identifier(value_stack.array[value_stack.top-1].text); }
#line hidden
        break;
      case 117: // listcontent -> literal 
#line 295 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 118: // literal -> STRING 
#line 299 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
      case 119: // literal -> INTEGER 
#line 300 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
      case 120: // literal -> LITERAL 
#line 301 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 307 "D:\dev\XACC\xacc\Languages\LSharp.y"


void CreateFunctions(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Function f = new Function(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

void CreateForms(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Keyword f = new Keyword(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

readonly static string[] functions  = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.Function));
readonly static string[] forms      = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.SpecialForm));

protected override void LoadDefaultReferences(Project proj, string filename)
{
  //make dummy autocomplete info
  CodeModule lsharp = new CodeModule("LSharp");
  ICodeNamespace env = new CodeNamespace("");

  CreateFunctions(env, functions);
  
  Function f = new Function("|");
  f.Name = "|";
  env.Add(f);
  
  CreateForms(env, forms);
  
  lsharp.Add(env);
  
  proj.AddReferencesAndGenerateTree(lsharp);
  proj.LoadAssemblies("mscorlib.dll");
}

protected override bool UseProjectTreeForAutoComplete
{
  get {return false; }
}

protected internal override string[] CommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i];
    }
    else
    {
      newlines[i] = ";" + lines[i];
    }
  }
  return newlines;
}

protected internal override string[] UnCommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i].Substring(1);
    }
    else
    {
      newlines[i] = lines[i];
    }
  }
  return newlines;
}












    
#line default
}
}
