// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using Xacc.Build;
using Xacc.CodeModel;
using Xacc.ComponentModel;
using Xacc.Languages.CSLex;
using gppg;

namespace LSharp
{
public enum Tokens {IGNORE = -1,error=1,EOF=2,LBRACE=3,RBRACE=4,KEYWORD=5,FUNCTION=6,IDENTIFIER=7,LITERAL=8};

public struct ValueType : Xacc.ComponentModel.IToken
#line 107 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{
  public CodeElementList  list;
  public CodeElement      elem;

#line default
internal int type;
internal TokenClass tclass;
Location loc;
internal string text;

public Location Location {get {return loc;} set {loc = value;} }
public int Type {get {return type;}}
public TokenClass Class {get {return tclass;}}
public string Text {get {return text;} set {text = value;}}
public int Length {get {return Text.Length;}}

public static implicit operator ValueType(Xacc.Languages.CSLex.Yytoken y)
{
  ValueType t = new ValueType();
  t.type = -1;
  t.tclass = y.Class;
  return t;
}

public static readonly ValueType EOF = new ValueType();
}
public partial class Parser: ShiftReduceParser<ValueType>
{
#line 4 "D:\dev\XACC\xacc\Languages\LSharp.y"


public override string[] Extensions {get {return new string[]{"ls"}; }}
public override string Name {get {return "LSharp"; }}
LexerBase lexer = new LSharpLexer();
protected override LexerBase Lexer {get {return lexer; }}

[Serializable]
[Image("bullet.png")]
class List : CodeContainerElement
{
  public List(CodeElementList l)
  {
    AddRange(l);
  }
  
  public override string ToString()
  {
    return "(...)";
  }
}


[Serializable]
[Image("CodeMethod.png")]
class Function : CodeElement
{
  string value;
  public Function(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeField.png")]
class Identifier : CodeElement
{
  string value;
  public Identifier(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeProperty.png")]
class Keyword : CodeElement
{
  string value;
  public Keyword(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}



[Serializable]
[Image("File.Type.NA.png")]
class File : CodeContainerElement
{
  public File(string filename, CodeElementList l)
  {
    Name = filename;
    AddRange(l);
  }
}

[Serializable]
[Image("CodeEnum.png")]
class Literal : CodeElement
{
  string value;
  public Literal(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[15];
    AddState(0,new State(-5,new int[]{-4,1,-1,3}));
    AddState(1,new State(new int[]{2,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{6,5,5,6,7,7,8,8,3,10,1,13,2,-2},new int[]{-3,4,-2,9}));
    AddState(4,new State(-6));
    AddState(5,new State(-7));
    AddState(6,new State(-8));
    AddState(7,new State(-9));
    AddState(8,new State(-10));
    AddState(9,new State(-11));
    AddState(10,new State(new int[]{1,14,4,-5,6,-5,5,-5,7,-5,8,-5,3,-5},new int[]{-1,11}));
    AddState(11,new State(new int[]{4,12,6,5,5,6,7,7,8,8,3,10,1,13},new int[]{-3,4,-2,9}));
    AddState(12,new State(-3));
    AddState(13,new State(-12));
    AddState(14,new State(-4));

    rules=new Rule[13];
    rules[1]=new Rule(-5, new int[]{-4,2});
    rules[2]=new Rule(-4, new int[]{-1});
    rules[3]=new Rule(-2, new int[]{3,-1,4});
    rules[4]=new Rule(-2, new int[]{3,1});
    rules[5]=new Rule(-1, new int[]{});
    rules[6]=new Rule(-1, new int[]{-1,-3});
    rules[7]=new Rule(-3, new int[]{6});
    rules[8]=new Rule(-3, new int[]{5});
    rules[9]=new Rule(-3, new int[]{7});
    rules[10]=new Rule(-3, new int[]{8});
    rules[11]=new Rule(-3, new int[]{-2});
    rules[12]=new Rule(-3, new int[]{1});

    nonTerminals = new string[] {"", "listcontents", "list", "listcontent", 
      "file", "$accept", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // file -> listcontents 
#line 123 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ CodeModel.Add( new File(CurrentFilename, value_stack.array[value_stack.top-1].list)); }
        break;
      case 3: // list -> LBRACE listcontents RBRACE 
#line 127 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ 
                                      AddAutoComplete(@value_stack.array[value_stack.top-3].Location, typeof(Function), typeof(Keyword));
                                      MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); 
                                      yyval.elem = new List(value_stack.array[value_stack.top-2].list);
                                      yyval.elem.Location = @value_stack.array[value_stack.top-3].Location + @value_stack.array[value_stack.top-1].Location; 
                                    }
        break;
      case 4: // list -> LBRACE error 
#line 133 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ AddAutoComplete(@value_stack.array[value_stack.top-2].Location, typeof(Function), typeof(Keyword)); }
        break;
      case 5: // listcontents -> 
#line 137 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = new CodeElementList(); }
        break;
      case 6: // listcontents -> listcontents listcontent 
#line 138 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
        break;
      case 7: // listcontent -> FUNCTION 
#line 142 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Function(value_stack.array[value_stack.top-1].text); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location;}
        break;
      case 8: // listcontent -> KEYWORD 
#line 143 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{
                                      if (value_stack.array[value_stack.top-1].text == "new")
                                      {
                                        AddAutoComplete(@value_stack.array[value_stack.top-1].Location, typeof(CodeType), typeof(CodeNamespace));
                                      } 
                                      yyval.elem = new Keyword(value_stack.array[value_stack.top-1].text); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location;
                                    }
        break;
      case 9: // listcontent -> IDENTIFIER 
#line 150 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Identifier(value_stack.array[value_stack.top-1].text); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location;}
        break;
      case 10: // listcontent -> LITERAL 
#line 151 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text); yyval.elem.Location = @value_stack.array[value_stack.top-1].Location; }
        break;
      case 11: // listcontent -> list 
#line 152 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = value_stack.array[value_stack.top-1].elem; }
        break;
      case 12: // listcontent -> error 
#line 153 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = null; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 159 "D:\dev\XACC\xacc\Languages\LSharp.y"


void CreateFunctions(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Function f = new Function(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

void CreateForms(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Keyword f = new Keyword(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

readonly static string[] functions  = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.Function));
readonly static string[] forms      = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.SpecialForm));

protected override void LoadDefaultReferences(Project proj, string filename)
{
  //make dummy autocomplete info
  CodeModule lsharp = new CodeModule("LSharp");
  ICodeNamespace env = new CodeNamespace("");

  CreateFunctions(env, functions);
  
  Function f = new Function("|");
  f.Name = "|";
  env.Add(f);
  
  CreateForms(env, forms);
  
  lsharp.Add(env);
  
  proj.AddReferencesAndGenerateTree(lsharp);
  proj.LoadAssemblies("mscorlib.dll");
}

protected override bool UseProjectTreeForAutoComplete
{
  get {return false; }
}

protected internal override string[] CommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i];
    }
    else
    {
      newlines[i] = ";" + lines[i];
    }
  }
  return newlines;
}

protected internal override string[] UnCommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i].Substring(1);
    }
    else
    {
      newlines[i] = lines[i];
    }
  }
  return newlines;
}












    
}
}
