#pragma warning disable 3001,3002,3003,3004,3005,3006,3007,3008,3009
// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005
// (see accompanying GPPGcopyright.rtf)


using System;
using System.Collections.Generic;
using System.Text;
using Xacc.Build;
using Xacc.CodeModel;
using Xacc.ComponentModel;
using Xacc.Languages.CSLex;
using gppg;

namespace LSharp
{
public enum Tokens {IGNORE = -1,error=1,EOF=2,LBRACE=3,RBRACE=4,DEFMACRO=5,DEFUN=6,ADD=7,APPEND=8,APPLY=9,ASSOC=10,CAAR=11,CAAAR=12,CAADR=13,CADAR=14,CADDR=15,CADR=16,CAR=17,CDAAR=18,CDAR=19,CDDAR=20,CDDDR=21,CDDR=22,CDR=23,CONS=24,COPYLIST=25,DIV=26,ENV=27,EQ=28,EQL=29,EVAL=30,EVALSTRING=31,SPLICE=32,UNQUOTE=33,ARGREST=34,EXITFN=35,FIRST=36,GT=37,GTE=38,LT=39,LTE=40,INSPECT=41,IS=42,LENGTH=43,LIST=44,LOAD=45,LOGAND=46,LOGOR=47,LOGXOR=48,MACROEXPAND=49,MAP=50,MEMBER=51,MUL=52,NCONC=53,NEW=54,NOT=55,NEQ=56,NTH=57,PR=58,PRL=59,READ=60,READSTRING=61,REFERENCE=62,REVERSE=63,REST=64,SUB=65,THROW=66,TYPEOF=67,USING=68,AND=69,BACKQUOTE=70,CALL=71,COND=72,DEC=73,DO=74,EACH=75,FN=76,FOR=77,IF=78,INC=79,LET=80,MACRO=81,OR=82,QUOTE=83,SETF=84,THE=85,TO=86,TRACE=87,TRY=88,WHEN=89,WHILE=90,WITH=91,IDENTIFIER=92,LITERAL=93,STRING=94,INTEGER=95};

public abstract class LexerBase<T> : Xacc.Languages.CSLex.Language<T>.LexerBase where T : struct, Xacc.ComponentModel.IToken
{
public const int error=1;
public const int EOF=2;
public const int LBRACE=3;
public const int RBRACE=4;
public const int DEFMACRO=5;
public const int DEFUN=6;
public const int ADD=7;
public const int APPEND=8;
public const int APPLY=9;
public const int ASSOC=10;
public const int CAAR=11;
public const int CAAAR=12;
public const int CAADR=13;
public const int CADAR=14;
public const int CADDR=15;
public const int CADR=16;
public const int CAR=17;
public const int CDAAR=18;
public const int CDAR=19;
public const int CDDAR=20;
public const int CDDDR=21;
public const int CDDR=22;
public const int CDR=23;
public const int CONS=24;
public const int COPYLIST=25;
public const int DIV=26;
public const int ENV=27;
public const int EQ=28;
public const int EQL=29;
public const int EVAL=30;
public const int EVALSTRING=31;
public const int SPLICE=32;
public const int UNQUOTE=33;
public const int ARGREST=34;
public const int EXITFN=35;
public const int FIRST=36;
public const int GT=37;
public const int GTE=38;
public const int LT=39;
public const int LTE=40;
public const int INSPECT=41;
public const int IS=42;
public const int LENGTH=43;
public const int LIST=44;
public const int LOAD=45;
public const int LOGAND=46;
public const int LOGOR=47;
public const int LOGXOR=48;
public const int MACROEXPAND=49;
public const int MAP=50;
public const int MEMBER=51;
public const int MUL=52;
public const int NCONC=53;
public const int NEW=54;
public const int NOT=55;
public const int NEQ=56;
public const int NTH=57;
public const int PR=58;
public const int PRL=59;
public const int READ=60;
public const int READSTRING=61;
public const int REFERENCE=62;
public const int REVERSE=63;
public const int REST=64;
public const int SUB=65;
public const int THROW=66;
public const int TYPEOF=67;
public const int USING=68;
public const int AND=69;
public const int BACKQUOTE=70;
public const int CALL=71;
public const int COND=72;
public const int DEC=73;
public const int DO=74;
public const int EACH=75;
public const int FN=76;
public const int FOR=77;
public const int IF=78;
public const int INC=79;
public const int LET=80;
public const int MACRO=81;
public const int OR=82;
public const int QUOTE=83;
public const int SETF=84;
public const int THE=85;
public const int TO=86;
public const int TRACE=87;
public const int TRY=88;
public const int WHEN=89;
public const int WHILE=90;
public const int WITH=91;
public const int IDENTIFIER=92;
public const int LITERAL=93;
public const int STRING=94;
public const int INTEGER=95;
}
public struct ValueType : Xacc.ComponentModel.IToken
#line 107 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{

  public CodeElementList  list {get {return value as CodeElementList; } set {this.value = value;}}
  public CodeElement      elem {get {return value as CodeElement; } set {this.value = value;}}
  
#if DEBUG
  public object Value { get { return value; } }
#endif


#line default
internal int __type;
internal TokenClass __class;
Location __loc;
object value;
public Location Location {get {return __loc;} set {__loc = value;} }
public int Type {get {return __type;} set {__type = value;}}
public TokenClass Class {get {return __class;} set {__class = value;}}
public string text {get {return (string)value;} set {this.value = value;}}
public string Text {get {return (string)value;} set {this.value = value;}}
public int Length {get {return Text.Length;}}

public static implicit operator ValueType(Xacc.Languages.CSLex.Yytoken y)
{
  ValueType t = new ValueType();
  t.__type = -1;
  t.__class = y.Class;
  return t;
}

public static readonly ValueType EOF = new ValueType();
}
#line default
public partial class Parser: ShiftReduceParser<ValueType>
{
#line 4 "D:\dev\XACC\xacc\Languages\LSharp.y"


public override string[] Extensions {get {return new string[]{"ls","lsp"}; }}
public override string Name {get {return "LSharp"; }}
LexerBase lexer = new LSharpLexer();
protected override LexerBase Lexer {get {return lexer; }}

[Serializable]
[Image("bullet.png")]
class List : CodeContainerElement
{
  public List(CodeElementList l)
  {
    AddRange(l);
  }
  
  public override string ToString()
  {
    return "(...)";
  }
}


[Serializable]
[Image("CodeMethod.png")]
class Function : CodeElement
{
  string value;
  public Function(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeField.png")]
class Identifier : CodeElement
{
  string value;
  public Identifier(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

[Serializable]
[Image("CodeProperty.png")]
class Keyword : CodeElement
{
  string value;
  public Keyword(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}



[Serializable]
[Image("File.Type.NA.png")]
class File : CodeContainerElement
{
  public File(string filename, CodeElementList l)
  {
    Name = filename;
    AddRange(l);
  }
}

[Serializable]
[Image("CodeEnum.png")]
class Literal : CodeElement
{
  string value;
  public Literal(string value)
  {
    this.value = value;
  }
  
  public override string ToString()
  {
    return value;
  }
}

#line default
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    stringstates=new string[269];
    stringrules=new string[123];
    states=new State[269];
stringstates[0] = @"1 $accept: . file EOF ";
    AddState(0,new State(-3,new int[]{-7,1,-1,3}));
stringstates[1] = @"1 $accept: file . EOF ";
    AddState(1,new State(new int[]{2,2}));
stringstates[2] = @"1 $accept: file EOF .		[]";
    AddState(2,new State(-1));
stringstates[3] = @"2 file: lists .		[EOF, ]
4 lists: lists . expr ";
    AddState(3,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,2,-2},new int[]{-5,4,-4,5,-6,7,-3,11,-12,23}));
stringstates[4] = @"4 lists: lists expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, ]";
    AddState(4,new State(-4));
stringstates[5] = @"114 expr: listcontent .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(5,new State(-114));
stringstates[6] = @"118 listcontent: IDENTIFIER .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(6,new State(-118));
stringstates[7] = @"119 listcontent: literal .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(7,new State(-119));
stringstates[8] = @"120 literal: STRING .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(8,new State(-120));
stringstates[9] = @"121 literal: INTEGER .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(9,new State(-121));
stringstates[10] = @"122 literal: LITERAL .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(10,new State(-122));
stringstates[11] = @"115 expr: list .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(11,new State(-115));
stringstates[12] = @"5 list: LBRACE . specialform RBRACE 
6 list: LBRACE . macros RBRACE 
7 list: LBRACE . functions RBRACE 
8 list: LBRACE . IDENTIFIER exprlist RBRACE 
9 list: LBRACE . literal exprlist RBRACE 
10 list: LBRACE . list exprlist RBRACE 
11 list: LBRACE . specexpr exprlist RBRACE ";
    AddState(12,new State(new int[]{92,19,69,42,71,44,72,48,73,53,74,55,75,57,76,61,77,71,78,76,79,81,80,83,81,87,82,90,84,92,85,99,86,102,87,106,88,109,89,113,90,116,91,119,6,125,5,129,7,133,8,135,9,137,10,140,12,143,13,145,11,147,14,149,15,151,16,153,17,155,18,157,19,159,20,161,21,163,22,165,23,167,24,169,25,172,26,174,27,176,28,177,29,179,30,181,31,183,35,185,36,187,37,189,38,193,40,197,39,201,41,205,42,207,43,210,44,212,45,214,46,216,47,218,48,220,49,222,50,225,51,228,52,231,53,233,54,235,55,238,56,240,57,242,58,245,59,247,60,249,61,252,62,254,63,257,64,259,65,261,66,263,67,265,68,267,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30},new int[]{-9,13,-10,15,-11,17,-6,33,-3,36,-12,39}));
stringstates[13] = @"5 list: LBRACE specialform . RBRACE ";
    AddState(13,new State(new int[]{4,14}));
stringstates[14] = @"5 list: LBRACE specialform RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(14,new State(-5));
stringstates[15] = @"6 list: LBRACE macros . RBRACE ";
    AddState(15,new State(new int[]{4,16}));
stringstates[16] = @"6 list: LBRACE macros RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(16,new State(-6));
stringstates[17] = @"7 list: LBRACE functions . RBRACE ";
    AddState(17,new State(new int[]{4,18}));
stringstates[18] = @"7 list: LBRACE functions RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(18,new State(-7));
stringstates[19] = @"8 list: LBRACE IDENTIFIER . exprlist RBRACE ";
    AddState(19,new State(-106,new int[]{-2,20}));
stringstates[20] = @"8 list: LBRACE IDENTIFIER exprlist . RBRACE 
107 exprlist: exprlist . expr ";
    AddState(20,new State(new int[]{4,21,92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[21] = @"8 list: LBRACE IDENTIFIER exprlist RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(21,new State(-8));
stringstates[22] = @"107 exprlist: exprlist expr .		[RBRACE, IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, ]";
    AddState(22,new State(-107));
stringstates[23] = @"116 expr: specexpr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(23,new State(-116));
stringstates[24] = @"110 specexpr: QUOTE . expr ";
    AddState(24,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,25,-4,5,-6,7,-3,11,-12,23}));
stringstates[25] = @"110 specexpr: QUOTE expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(25,new State(-110));
stringstates[26] = @"111 specexpr: BACKQUOTE . expr ";
    AddState(26,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,27,-4,5,-6,7,-3,11,-12,23}));
stringstates[27] = @"111 specexpr: BACKQUOTE expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(27,new State(-111));
stringstates[28] = @"112 specexpr: SPLICE . expr ";
    AddState(28,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,29,-4,5,-6,7,-3,11,-12,23}));
stringstates[29] = @"112 specexpr: SPLICE expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(29,new State(-112));
stringstates[30] = @"113 specexpr: UNQUOTE . expr ";
    AddState(30,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,31,-4,5,-6,7,-3,11,-12,23}));
stringstates[31] = @"113 specexpr: UNQUOTE expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(31,new State(-113));
stringstates[32] = @"117 expr: error .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(32,new State(-117));
stringstates[33] = @"9 list: LBRACE literal . exprlist RBRACE ";
    AddState(33,new State(-106,new int[]{-2,34}));
stringstates[34] = @"9 list: LBRACE literal exprlist . RBRACE 
107 exprlist: exprlist . expr ";
    AddState(34,new State(new int[]{4,35,92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[35] = @"9 list: LBRACE literal exprlist RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(35,new State(-9));
stringstates[36] = @"10 list: LBRACE list . exprlist RBRACE ";
    AddState(36,new State(-106,new int[]{-2,37}));
stringstates[37] = @"10 list: LBRACE list exprlist . RBRACE 
107 exprlist: exprlist . expr ";
    AddState(37,new State(new int[]{4,38,92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[38] = @"10 list: LBRACE list exprlist RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(38,new State(-10));
stringstates[39] = @"11 list: LBRACE specexpr . exprlist RBRACE ";
    AddState(39,new State(-106,new int[]{-2,40}));
stringstates[40] = @"11 list: LBRACE specexpr exprlist . RBRACE 
107 exprlist: exprlist . expr ";
    AddState(40,new State(new int[]{4,41,92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[41] = @"11 list: LBRACE specexpr exprlist RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, EOF, RBRACE, ]";
    AddState(41,new State(-11));
stringstates[42] = @"75 specialform: AND . exprlist ";
    AddState(42,new State(-106,new int[]{-2,43}));
stringstates[43] = @"75 specialform: AND exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(43,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-75},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[44] = @"76 specialform: CALL . IDENTIFIER expr exprlist ";
    AddState(44,new State(new int[]{92,45}));
stringstates[45] = @"76 specialform: CALL IDENTIFIER . expr exprlist ";
    AddState(45,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,46,-4,5,-6,7,-3,11,-12,23}));
stringstates[46] = @"76 specialform: CALL IDENTIFIER expr . exprlist ";
    AddState(46,new State(-106,new int[]{-2,47}));
stringstates[47] = @"76 specialform: CALL IDENTIFIER expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(47,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-76},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[48] = @"77 specialform: COND . condexprlist expropt ";
    AddState(48,new State(-104,new int[]{-16,49}));
stringstates[49] = @"77 specialform: COND condexprlist . expropt 
105 condexprlist: condexprlist . expr expr ";
    AddState(49,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-108},new int[]{-14,50,-5,51,-4,5,-6,7,-3,11,-12,23}));
stringstates[50] = @"77 specialform: COND condexprlist expropt .		[RBRACE, ]";
    AddState(50,new State(-77));
stringstates[51] = @"105 condexprlist: condexprlist expr . expr 
109 expropt: expr .		[RBRACE, ]";
    AddState(51,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-109},new int[]{-5,52,-4,5,-6,7,-3,11,-12,23}));
stringstates[52] = @"105 condexprlist: condexprlist expr expr .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, RBRACE, ]";
    AddState(52,new State(-105));
stringstates[53] = @"78 specialform: DEC . expr ";
    AddState(53,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,54,-4,5,-6,7,-3,11,-12,23}));
stringstates[54] = @"78 specialform: DEC expr .		[RBRACE, ]";
    AddState(54,new State(-78));
stringstates[55] = @"79 specialform: DO . exprlist ";
    AddState(55,new State(-106,new int[]{-2,56}));
stringstates[56] = @"79 specialform: DO exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(56,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-79},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[57] = @"80 specialform: EACH . IDENTIFIER expr exprlist ";
    AddState(57,new State(new int[]{92,58}));
stringstates[58] = @"80 specialform: EACH IDENTIFIER . expr exprlist ";
    AddState(58,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,59,-4,5,-6,7,-3,11,-12,23}));
stringstates[59] = @"80 specialform: EACH IDENTIFIER expr . exprlist ";
    AddState(59,new State(-106,new int[]{-2,60}));
stringstates[60] = @"80 specialform: EACH IDENTIFIER expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(60,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-80},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[61] = @"81 specialform: FN . args exprlist ";
    AddState(61,new State(new int[]{3,64},new int[]{-13,62}));
stringstates[62] = @"81 specialform: FN args . exprlist ";
    AddState(62,new State(-106,new int[]{-2,63}));
stringstates[63] = @"81 specialform: FN args exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(63,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-81},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[64] = @"99 args: LBRACE . arglist argtail RBRACE ";
    AddState(64,new State(-102,new int[]{-18,65}));
stringstates[65] = @"99 args: LBRACE arglist . argtail RBRACE 
103 arglist: arglist . IDENTIFIER ";
    AddState(65,new State(new int[]{92,68,34,69,4,-100},new int[]{-19,66}));
stringstates[66] = @"99 args: LBRACE arglist argtail . RBRACE ";
    AddState(66,new State(new int[]{4,67}));
stringstates[67] = @"99 args: LBRACE arglist argtail RBRACE .		[IDENTIFIER, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, UNQUOTE, error, RBRACE, ]";
    AddState(67,new State(-99));
stringstates[68] = @"103 arglist: arglist IDENTIFIER .		[IDENTIFIER, ARGREST, RBRACE, ]";
    AddState(68,new State(-103));
stringstates[69] = @"101 argtail: ARGREST . IDENTIFIER ";
    AddState(69,new State(new int[]{92,70}));
stringstates[70] = @"101 argtail: ARGREST IDENTIFIER .		[RBRACE, ]";
    AddState(70,new State(-101));
stringstates[71] = @"82 specialform: FOR . expr expr expr exprlist ";
    AddState(71,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,72,-4,5,-6,7,-3,11,-12,23}));
stringstates[72] = @"82 specialform: FOR expr . expr expr exprlist ";
    AddState(72,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,73,-4,5,-6,7,-3,11,-12,23}));
stringstates[73] = @"82 specialform: FOR expr expr . expr exprlist ";
    AddState(73,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,74,-4,5,-6,7,-3,11,-12,23}));
stringstates[74] = @"82 specialform: FOR expr expr expr . exprlist ";
    AddState(74,new State(-106,new int[]{-2,75}));
stringstates[75] = @"82 specialform: FOR expr expr expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(75,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-82},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[76] = @"83 specialform: IF . expr expr expropt ";
    AddState(76,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,77,-4,5,-6,7,-3,11,-12,23}));
stringstates[77] = @"83 specialform: IF expr . expr expropt ";
    AddState(77,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,78,-4,5,-6,7,-3,11,-12,23}));
stringstates[78] = @"83 specialform: IF expr expr . expropt ";
    AddState(78,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-108},new int[]{-14,79,-5,80,-4,5,-6,7,-3,11,-12,23}));
stringstates[79] = @"83 specialform: IF expr expr expropt .		[RBRACE, ]";
    AddState(79,new State(-83));
stringstates[80] = @"109 expropt: expr .		[RBRACE, ]";
    AddState(80,new State(-109));
stringstates[81] = @"84 specialform: INC . expr ";
    AddState(81,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,82,-4,5,-6,7,-3,11,-12,23}));
stringstates[82] = @"84 specialform: INC expr .		[RBRACE, ]";
    AddState(82,new State(-84));
stringstates[83] = @"85 specialform: LET . IDENTIFIER expr exprlist ";
    AddState(83,new State(new int[]{92,84}));
stringstates[84] = @"85 specialform: LET IDENTIFIER . expr exprlist ";
    AddState(84,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,85,-4,5,-6,7,-3,11,-12,23}));
stringstates[85] = @"85 specialform: LET IDENTIFIER expr . exprlist ";
    AddState(85,new State(-106,new int[]{-2,86}));
stringstates[86] = @"85 specialform: LET IDENTIFIER expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(86,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-85},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[87] = @"86 specialform: MACRO . args exprlist ";
    AddState(87,new State(new int[]{3,64},new int[]{-13,88}));
stringstates[88] = @"86 specialform: MACRO args . exprlist ";
    AddState(88,new State(-106,new int[]{-2,89}));
stringstates[89] = @"86 specialform: MACRO args exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(89,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-86},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[90] = @"87 specialform: OR . exprlist ";
    AddState(90,new State(-106,new int[]{-2,91}));
stringstates[91] = @"87 specialform: OR exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(91,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-87},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[92] = @"88 specialform: SETF . setvaluexpr ";
    AddState(92,new State(-96,new int[]{-17,93}));
stringstates[93] = @"88 specialform: SETF setvaluexpr .		[RBRACE, ]
97 setvaluexpr: setvaluexpr . IDENTIFIER expr 
98 setvaluexpr: setvaluexpr . UNQUOTE expr expr ";
    AddState(93,new State(new int[]{92,94,33,96,4,-88}));
stringstates[94] = @"97 setvaluexpr: setvaluexpr IDENTIFIER . expr ";
    AddState(94,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,95,-4,5,-6,7,-3,11,-12,23}));
stringstates[95] = @"97 setvaluexpr: setvaluexpr IDENTIFIER expr .		[IDENTIFIER, UNQUOTE, RBRACE, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, error, ]";
    AddState(95,new State(-97));
stringstates[96] = @"98 setvaluexpr: setvaluexpr UNQUOTE . expr expr ";
    AddState(96,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,97,-4,5,-6,7,-3,11,-12,23}));
stringstates[97] = @"98 setvaluexpr: setvaluexpr UNQUOTE expr . expr ";
    AddState(97,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,98,-4,5,-6,7,-3,11,-12,23}));
stringstates[98] = @"98 setvaluexpr: setvaluexpr UNQUOTE expr expr .		[IDENTIFIER, UNQUOTE, RBRACE, STRING, INTEGER, LITERAL, LBRACE, QUOTE, BACKQUOTE, SPLICE, error, ]";
    AddState(98,new State(-98));
stringstates[99] = @"89 specialform: THE . IDENTIFIER expr ";
    AddState(99,new State(new int[]{92,100}));
stringstates[100] = @"89 specialform: THE IDENTIFIER . expr ";
    AddState(100,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,101,-4,5,-6,7,-3,11,-12,23}));
stringstates[101] = @"89 specialform: THE IDENTIFIER expr .		[RBRACE, ]";
    AddState(101,new State(-89));
stringstates[102] = @"90 specialform: TO . IDENTIFIER expr exprlist ";
    AddState(102,new State(new int[]{92,103}));
stringstates[103] = @"90 specialform: TO IDENTIFIER . expr exprlist ";
    AddState(103,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,104,-4,5,-6,7,-3,11,-12,23}));
stringstates[104] = @"90 specialform: TO IDENTIFIER expr . exprlist ";
    AddState(104,new State(-106,new int[]{-2,105}));
stringstates[105] = @"90 specialform: TO IDENTIFIER expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(105,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-90},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[106] = @"91 specialform: TRACE . IDENTIFIER exprlist ";
    AddState(106,new State(new int[]{92,107}));
stringstates[107] = @"91 specialform: TRACE IDENTIFIER . exprlist ";
    AddState(107,new State(-106,new int[]{-2,108}));
stringstates[108] = @"91 specialform: TRACE IDENTIFIER exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(108,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-91},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[109] = @"92 specialform: TRY . expr expr expropt ";
    AddState(109,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,110,-4,5,-6,7,-3,11,-12,23}));
stringstates[110] = @"92 specialform: TRY expr . expr expropt ";
    AddState(110,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,111,-4,5,-6,7,-3,11,-12,23}));
stringstates[111] = @"92 specialform: TRY expr expr . expropt ";
    AddState(111,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-108},new int[]{-14,112,-5,80,-4,5,-6,7,-3,11,-12,23}));
stringstates[112] = @"92 specialform: TRY expr expr expropt .		[RBRACE, ]";
    AddState(112,new State(-92));
stringstates[113] = @"93 specialform: WHEN . expr exprlist ";
    AddState(113,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,114,-4,5,-6,7,-3,11,-12,23}));
stringstates[114] = @"93 specialform: WHEN expr . exprlist ";
    AddState(114,new State(-106,new int[]{-2,115}));
stringstates[115] = @"93 specialform: WHEN expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(115,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-93},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[116] = @"94 specialform: WHILE . expr exprlist ";
    AddState(116,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,117,-4,5,-6,7,-3,11,-12,23}));
stringstates[117] = @"94 specialform: WHILE expr . exprlist ";
    AddState(117,new State(-106,new int[]{-2,118}));
stringstates[118] = @"94 specialform: WHILE expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(118,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-94},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[119] = @"95 specialform: WITH . setvaluexpr expr ";
    AddState(119,new State(-96,new int[]{-17,120}));
stringstates[120] = @"95 specialform: WITH setvaluexpr . expr 
97 setvaluexpr: setvaluexpr . IDENTIFIER expr 
98 setvaluexpr: setvaluexpr . UNQUOTE expr expr ";
    AddState(120,new State(new int[]{92,122,33,123,94,8,95,9,93,10,3,12,83,24,70,26,32,28,1,32},new int[]{-5,121,-4,5,-6,7,-3,11,-12,23}));
stringstates[121] = @"95 specialform: WITH setvaluexpr expr .		[RBRACE, ]";
    AddState(121,new State(-95));
stringstates[122] = @"97 setvaluexpr: setvaluexpr IDENTIFIER . expr 
118 listcontent: IDENTIFIER .		[RBRACE, ]";
    AddState(122,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-118},new int[]{-5,95,-4,5,-6,7,-3,11,-12,23}));
stringstates[123] = @"98 setvaluexpr: setvaluexpr UNQUOTE . expr expr 
113 specexpr: UNQUOTE . expr ";
    AddState(123,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,124,-4,5,-6,7,-3,11,-12,23}));
stringstates[124] = @"98 setvaluexpr: setvaluexpr UNQUOTE expr . expr 
113 specexpr: UNQUOTE expr .		[RBRACE, ]";
    AddState(124,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-113},new int[]{-5,98,-4,5,-6,7,-3,11,-12,23}));
stringstates[125] = @"12 macros: DEFUN . IDENTIFIER args exprlist ";
    AddState(125,new State(new int[]{92,126}));
stringstates[126] = @"12 macros: DEFUN IDENTIFIER . args exprlist ";
    AddState(126,new State(new int[]{3,64},new int[]{-13,127}));
stringstates[127] = @"12 macros: DEFUN IDENTIFIER args . exprlist ";
    AddState(127,new State(-106,new int[]{-2,128}));
stringstates[128] = @"12 macros: DEFUN IDENTIFIER args exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(128,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-12},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[129] = @"13 macros: DEFMACRO . IDENTIFIER args exprlist ";
    AddState(129,new State(new int[]{92,130}));
stringstates[130] = @"13 macros: DEFMACRO IDENTIFIER . args exprlist ";
    AddState(130,new State(new int[]{3,64},new int[]{-13,131}));
stringstates[131] = @"13 macros: DEFMACRO IDENTIFIER args . exprlist ";
    AddState(131,new State(-106,new int[]{-2,132}));
stringstates[132] = @"13 macros: DEFMACRO IDENTIFIER args exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(132,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-13},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[133] = @"14 functions: ADD . exprlist ";
    AddState(133,new State(-106,new int[]{-2,134}));
stringstates[134] = @"14 functions: ADD exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(134,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-14},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[135] = @"15 functions: APPEND . exprlist ";
    AddState(135,new State(-106,new int[]{-2,136}));
stringstates[136] = @"15 functions: APPEND exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(136,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-15},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[137] = @"16 functions: APPLY . expr exprlist ";
    AddState(137,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,138,-4,5,-6,7,-3,11,-12,23}));
stringstates[138] = @"16 functions: APPLY expr . exprlist ";
    AddState(138,new State(-106,new int[]{-2,139}));
stringstates[139] = @"16 functions: APPLY expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(139,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-16},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[140] = @"17 functions: ASSOC . expr expr ";
    AddState(140,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,141,-4,5,-6,7,-3,11,-12,23}));
stringstates[141] = @"17 functions: ASSOC expr . expr ";
    AddState(141,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,142,-4,5,-6,7,-3,11,-12,23}));
stringstates[142] = @"17 functions: ASSOC expr expr .		[RBRACE, ]";
    AddState(142,new State(-17));
stringstates[143] = @"18 functions: CAAAR . expr ";
    AddState(143,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,144,-4,5,-6,7,-3,11,-12,23}));
stringstates[144] = @"18 functions: CAAAR expr .		[RBRACE, ]";
    AddState(144,new State(-18));
stringstates[145] = @"19 functions: CAADR . expr ";
    AddState(145,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,146,-4,5,-6,7,-3,11,-12,23}));
stringstates[146] = @"19 functions: CAADR expr .		[RBRACE, ]";
    AddState(146,new State(-19));
stringstates[147] = @"20 functions: CAAR . expr ";
    AddState(147,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,148,-4,5,-6,7,-3,11,-12,23}));
stringstates[148] = @"20 functions: CAAR expr .		[RBRACE, ]";
    AddState(148,new State(-20));
stringstates[149] = @"21 functions: CADAR . expr ";
    AddState(149,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,150,-4,5,-6,7,-3,11,-12,23}));
stringstates[150] = @"21 functions: CADAR expr .		[RBRACE, ]";
    AddState(150,new State(-21));
stringstates[151] = @"22 functions: CADDR . expr ";
    AddState(151,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,152,-4,5,-6,7,-3,11,-12,23}));
stringstates[152] = @"22 functions: CADDR expr .		[RBRACE, ]";
    AddState(152,new State(-22));
stringstates[153] = @"23 functions: CADR . expr ";
    AddState(153,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,154,-4,5,-6,7,-3,11,-12,23}));
stringstates[154] = @"23 functions: CADR expr .		[RBRACE, ]";
    AddState(154,new State(-23));
stringstates[155] = @"24 functions: CAR . expr ";
    AddState(155,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,156,-4,5,-6,7,-3,11,-12,23}));
stringstates[156] = @"24 functions: CAR expr .		[RBRACE, ]";
    AddState(156,new State(-24));
stringstates[157] = @"25 functions: CDAAR . expr ";
    AddState(157,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,158,-4,5,-6,7,-3,11,-12,23}));
stringstates[158] = @"25 functions: CDAAR expr .		[RBRACE, ]";
    AddState(158,new State(-25));
stringstates[159] = @"26 functions: CDAR . expr ";
    AddState(159,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,160,-4,5,-6,7,-3,11,-12,23}));
stringstates[160] = @"26 functions: CDAR expr .		[RBRACE, ]";
    AddState(160,new State(-26));
stringstates[161] = @"27 functions: CDDAR . expr ";
    AddState(161,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,162,-4,5,-6,7,-3,11,-12,23}));
stringstates[162] = @"27 functions: CDDAR expr .		[RBRACE, ]";
    AddState(162,new State(-27));
stringstates[163] = @"28 functions: CDDDR . expr ";
    AddState(163,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,164,-4,5,-6,7,-3,11,-12,23}));
stringstates[164] = @"28 functions: CDDDR expr .		[RBRACE, ]";
    AddState(164,new State(-28));
stringstates[165] = @"29 functions: CDDR . expr ";
    AddState(165,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,166,-4,5,-6,7,-3,11,-12,23}));
stringstates[166] = @"29 functions: CDDR expr .		[RBRACE, ]";
    AddState(166,new State(-29));
stringstates[167] = @"30 functions: CDR . expr ";
    AddState(167,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,168,-4,5,-6,7,-3,11,-12,23}));
stringstates[168] = @"30 functions: CDR expr .		[RBRACE, ]";
    AddState(168,new State(-30));
stringstates[169] = @"31 functions: CONS . expr expr ";
    AddState(169,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,170,-4,5,-6,7,-3,11,-12,23}));
stringstates[170] = @"31 functions: CONS expr . expr ";
    AddState(170,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,171,-4,5,-6,7,-3,11,-12,23}));
stringstates[171] = @"31 functions: CONS expr expr .		[RBRACE, ]";
    AddState(171,new State(-31));
stringstates[172] = @"32 functions: COPYLIST . expr ";
    AddState(172,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,173,-4,5,-6,7,-3,11,-12,23}));
stringstates[173] = @"32 functions: COPYLIST expr .		[RBRACE, ]";
    AddState(173,new State(-32));
stringstates[174] = @"33 functions: DIV . exprlist ";
    AddState(174,new State(-106,new int[]{-2,175}));
stringstates[175] = @"33 functions: DIV exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(175,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-33},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[176] = @"34 functions: ENV .		[RBRACE, ]";
    AddState(176,new State(-34));
stringstates[177] = @"35 functions: EQ . exprlist ";
    AddState(177,new State(-106,new int[]{-2,178}));
stringstates[178] = @"35 functions: EQ exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(178,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-35},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[179] = @"36 functions: EQL . exprlist ";
    AddState(179,new State(-106,new int[]{-2,180}));
stringstates[180] = @"36 functions: EQL exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(180,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-36},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[181] = @"37 functions: EVAL . expr ";
    AddState(181,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,182,-4,5,-6,7,-3,11,-12,23}));
stringstates[182] = @"37 functions: EVAL expr .		[RBRACE, ]";
    AddState(182,new State(-37));
stringstates[183] = @"38 functions: EVALSTRING . expr ";
    AddState(183,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,184,-4,5,-6,7,-3,11,-12,23}));
stringstates[184] = @"38 functions: EVALSTRING expr .		[RBRACE, ]";
    AddState(184,new State(-38));
stringstates[185] = @"39 functions: EXITFN . expropt ";
    AddState(185,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-108},new int[]{-14,186,-5,80,-4,5,-6,7,-3,11,-12,23}));
stringstates[186] = @"39 functions: EXITFN expropt .		[RBRACE, ]";
    AddState(186,new State(-39));
stringstates[187] = @"40 functions: FIRST . expr ";
    AddState(187,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,188,-4,5,-6,7,-3,11,-12,23}));
stringstates[188] = @"40 functions: FIRST expr .		[RBRACE, ]";
    AddState(188,new State(-40));
stringstates[189] = @"41 functions: GT . expr expr exprlist ";
    AddState(189,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,190,-4,5,-6,7,-3,11,-12,23}));
stringstates[190] = @"41 functions: GT expr . expr exprlist ";
    AddState(190,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,191,-4,5,-6,7,-3,11,-12,23}));
stringstates[191] = @"41 functions: GT expr expr . exprlist ";
    AddState(191,new State(-106,new int[]{-2,192}));
stringstates[192] = @"41 functions: GT expr expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(192,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-41},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[193] = @"42 functions: GTE . expr expr exprlist ";
    AddState(193,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,194,-4,5,-6,7,-3,11,-12,23}));
stringstates[194] = @"42 functions: GTE expr . expr exprlist ";
    AddState(194,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,195,-4,5,-6,7,-3,11,-12,23}));
stringstates[195] = @"42 functions: GTE expr expr . exprlist ";
    AddState(195,new State(-106,new int[]{-2,196}));
stringstates[196] = @"42 functions: GTE expr expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(196,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-42},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[197] = @"43 functions: LTE . expr expr exprlist ";
    AddState(197,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,198,-4,5,-6,7,-3,11,-12,23}));
stringstates[198] = @"43 functions: LTE expr . expr exprlist ";
    AddState(198,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,199,-4,5,-6,7,-3,11,-12,23}));
stringstates[199] = @"43 functions: LTE expr expr . exprlist ";
    AddState(199,new State(-106,new int[]{-2,200}));
stringstates[200] = @"43 functions: LTE expr expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(200,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-43},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[201] = @"44 functions: LT . expr expr exprlist ";
    AddState(201,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,202,-4,5,-6,7,-3,11,-12,23}));
stringstates[202] = @"44 functions: LT expr . expr exprlist ";
    AddState(202,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,203,-4,5,-6,7,-3,11,-12,23}));
stringstates[203] = @"44 functions: LT expr expr . exprlist ";
    AddState(203,new State(-106,new int[]{-2,204}));
stringstates[204] = @"44 functions: LT expr expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(204,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-44},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[205] = @"45 functions: INSPECT . expr ";
    AddState(205,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,206,-4,5,-6,7,-3,11,-12,23}));
stringstates[206] = @"45 functions: INSPECT expr .		[RBRACE, ]";
    AddState(206,new State(-45));
stringstates[207] = @"46 functions: IS . IDENTIFIER expr ";
    AddState(207,new State(new int[]{92,208}));
stringstates[208] = @"46 functions: IS IDENTIFIER . expr ";
    AddState(208,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,209,-4,5,-6,7,-3,11,-12,23}));
stringstates[209] = @"46 functions: IS IDENTIFIER expr .		[RBRACE, ]";
    AddState(209,new State(-46));
stringstates[210] = @"47 functions: LENGTH . expr ";
    AddState(210,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,211,-4,5,-6,7,-3,11,-12,23}));
stringstates[211] = @"47 functions: LENGTH expr .		[RBRACE, ]";
    AddState(211,new State(-47));
stringstates[212] = @"48 functions: LIST . exprlist ";
    AddState(212,new State(-106,new int[]{-2,213}));
stringstates[213] = @"48 functions: LIST exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(213,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-48},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[214] = @"49 functions: LOAD . STRING ";
    AddState(214,new State(new int[]{94,215}));
stringstates[215] = @"49 functions: LOAD STRING .		[RBRACE, ]";
    AddState(215,new State(-49));
stringstates[216] = @"50 functions: LOGAND . exprlist ";
    AddState(216,new State(-106,new int[]{-2,217}));
stringstates[217] = @"50 functions: LOGAND exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(217,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-50},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[218] = @"51 functions: LOGOR . exprlist ";
    AddState(218,new State(-106,new int[]{-2,219}));
stringstates[219] = @"51 functions: LOGOR exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(219,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-51},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[220] = @"52 functions: LOGXOR . exprlist ";
    AddState(220,new State(-106,new int[]{-2,221}));
stringstates[221] = @"52 functions: LOGXOR exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(221,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-52},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[222] = @"53 functions: MACROEXPAND . expr exprlist ";
    AddState(222,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,223,-4,5,-6,7,-3,11,-12,23}));
stringstates[223] = @"53 functions: MACROEXPAND expr . exprlist ";
    AddState(223,new State(-106,new int[]{-2,224}));
stringstates[224] = @"53 functions: MACROEXPAND expr exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(224,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-53},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[225] = @"54 functions: MAP . expr expr ";
    AddState(225,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,226,-4,5,-6,7,-3,11,-12,23}));
stringstates[226] = @"54 functions: MAP expr . expr ";
    AddState(226,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,227,-4,5,-6,7,-3,11,-12,23}));
stringstates[227] = @"54 functions: MAP expr expr .		[RBRACE, ]";
    AddState(227,new State(-54));
stringstates[228] = @"55 functions: MEMBER . expr expr ";
    AddState(228,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,229,-4,5,-6,7,-3,11,-12,23}));
stringstates[229] = @"55 functions: MEMBER expr . expr ";
    AddState(229,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,230,-4,5,-6,7,-3,11,-12,23}));
stringstates[230] = @"55 functions: MEMBER expr expr .		[RBRACE, ]";
    AddState(230,new State(-55));
stringstates[231] = @"56 functions: MUL . exprlist ";
    AddState(231,new State(-106,new int[]{-2,232}));
stringstates[232] = @"56 functions: MUL exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(232,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-56},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[233] = @"57 functions: NCONC . exprlist ";
    AddState(233,new State(-106,new int[]{-2,234}));
stringstates[234] = @"57 functions: NCONC exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(234,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-57},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[235] = @"58 functions: NEW . IDENTIFIER exprlist ";
    AddState(235,new State(new int[]{92,236}));
stringstates[236] = @"58 functions: NEW IDENTIFIER . exprlist ";
    AddState(236,new State(-106,new int[]{-2,237}));
stringstates[237] = @"58 functions: NEW IDENTIFIER exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(237,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-58},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[238] = @"59 functions: NOT . expr ";
    AddState(238,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,239,-4,5,-6,7,-3,11,-12,23}));
stringstates[239] = @"59 functions: NOT expr .		[RBRACE, ]";
    AddState(239,new State(-59));
stringstates[240] = @"60 functions: NEQ . exprlist ";
    AddState(240,new State(-106,new int[]{-2,241}));
stringstates[241] = @"60 functions: NEQ exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(241,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-60},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[242] = @"61 functions: NTH . INTEGER expr ";
    AddState(242,new State(new int[]{95,243}));
stringstates[243] = @"61 functions: NTH INTEGER . expr ";
    AddState(243,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,244,-4,5,-6,7,-3,11,-12,23}));
stringstates[244] = @"61 functions: NTH INTEGER expr .		[RBRACE, ]";
    AddState(244,new State(-61));
stringstates[245] = @"62 functions: PR . exprlist ";
    AddState(245,new State(-106,new int[]{-2,246}));
stringstates[246] = @"62 functions: PR exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(246,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-62},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[247] = @"63 functions: PRL . exprlist ";
    AddState(247,new State(-106,new int[]{-2,248}));
stringstates[248] = @"63 functions: PRL exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(248,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-63},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[249] = @"64 functions: READ . expr expropt ";
    AddState(249,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,250,-4,5,-6,7,-3,11,-12,23}));
stringstates[250] = @"64 functions: READ expr . expropt ";
    AddState(250,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-108},new int[]{-14,251,-5,80,-4,5,-6,7,-3,11,-12,23}));
stringstates[251] = @"64 functions: READ expr expropt .		[RBRACE, ]";
    AddState(251,new State(-64));
stringstates[252] = @"65 functions: READSTRING . expr ";
    AddState(252,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,253,-4,5,-6,7,-3,11,-12,23}));
stringstates[253] = @"65 functions: READSTRING expr .		[RBRACE, ]";
    AddState(253,new State(-65));
stringstates[254] = @"66 functions: REFERENCE . stringlist ";
    AddState(254,new State(-73,new int[]{-15,255}));
stringstates[255] = @"66 functions: REFERENCE stringlist .		[RBRACE, ]
74 stringlist: stringlist . STRING ";
    AddState(255,new State(new int[]{94,256,4,-66}));
stringstates[256] = @"74 stringlist: stringlist STRING .		[STRING, RBRACE, ]";
    AddState(256,new State(-74));
stringstates[257] = @"67 functions: REVERSE . expr ";
    AddState(257,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,258,-4,5,-6,7,-3,11,-12,23}));
stringstates[258] = @"67 functions: REVERSE expr .		[RBRACE, ]";
    AddState(258,new State(-67));
stringstates[259] = @"68 functions: REST . expr ";
    AddState(259,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,260,-4,5,-6,7,-3,11,-12,23}));
stringstates[260] = @"68 functions: REST expr .		[RBRACE, ]";
    AddState(260,new State(-68));
stringstates[261] = @"69 functions: SUB . exprlist ";
    AddState(261,new State(-106,new int[]{-2,262}));
stringstates[262] = @"69 functions: SUB exprlist .		[RBRACE, ]
107 exprlist: exprlist . expr ";
    AddState(262,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32,4,-69},new int[]{-5,22,-4,5,-6,7,-3,11,-12,23}));
stringstates[263] = @"70 functions: THROW . expr ";
    AddState(263,new State(new int[]{92,6,94,8,95,9,93,10,3,12,83,24,70,26,32,28,33,30,1,32},new int[]{-5,264,-4,5,-6,7,-3,11,-12,23}));
stringstates[264] = @"70 functions: THROW expr .		[RBRACE, ]";
    AddState(264,new State(-70));
stringstates[265] = @"71 functions: TYPEOF . IDENTIFIER ";
    AddState(265,new State(new int[]{92,266}));
stringstates[266] = @"71 functions: TYPEOF IDENTIFIER .		[RBRACE, ]";
    AddState(266,new State(-71));
stringstates[267] = @"72 functions: USING . stringlist ";
    AddState(267,new State(-73,new int[]{-15,268}));
stringstates[268] = @"72 functions: USING stringlist .		[RBRACE, ]
74 stringlist: stringlist . STRING ";
    AddState(268,new State(new int[]{94,256,4,-72}));

    rules=new Rule[123];
stringrules[1] = @"$accept -> file EOF ";
    rules[1]=new Rule(-8, new int[]{-7,2});
stringrules[2] = @"file -> lists ";
    rules[2]=new Rule(-7, new int[]{-1});
stringrules[3] = @"lists -> ";
    rules[3]=new Rule(-1, new int[]{});
stringrules[4] = @"lists -> lists expr ";
    rules[4]=new Rule(-1, new int[]{-1,-5});
stringrules[5] = @"list -> LBRACE specialform RBRACE ";
    rules[5]=new Rule(-3, new int[]{3,-9,4});
stringrules[6] = @"list -> LBRACE macros RBRACE ";
    rules[6]=new Rule(-3, new int[]{3,-10,4});
stringrules[7] = @"list -> LBRACE functions RBRACE ";
    rules[7]=new Rule(-3, new int[]{3,-11,4});
stringrules[8] = @"list -> LBRACE IDENTIFIER exprlist RBRACE ";
    rules[8]=new Rule(-3, new int[]{3,92,-2,4});
stringrules[9] = @"list -> LBRACE literal exprlist RBRACE ";
    rules[9]=new Rule(-3, new int[]{3,-6,-2,4});
stringrules[10] = @"list -> LBRACE list exprlist RBRACE ";
    rules[10]=new Rule(-3, new int[]{3,-3,-2,4});
stringrules[11] = @"list -> LBRACE specexpr exprlist RBRACE ";
    rules[11]=new Rule(-3, new int[]{3,-12,-2,4});
stringrules[12] = @"macros -> DEFUN IDENTIFIER args exprlist ";
    rules[12]=new Rule(-10, new int[]{6,92,-13,-2});
stringrules[13] = @"macros -> DEFMACRO IDENTIFIER args exprlist ";
    rules[13]=new Rule(-10, new int[]{5,92,-13,-2});
stringrules[14] = @"functions -> ADD exprlist ";
    rules[14]=new Rule(-11, new int[]{7,-2});
stringrules[15] = @"functions -> APPEND exprlist ";
    rules[15]=new Rule(-11, new int[]{8,-2});
stringrules[16] = @"functions -> APPLY expr exprlist ";
    rules[16]=new Rule(-11, new int[]{9,-5,-2});
stringrules[17] = @"functions -> ASSOC expr expr ";
    rules[17]=new Rule(-11, new int[]{10,-5,-5});
stringrules[18] = @"functions -> CAAAR expr ";
    rules[18]=new Rule(-11, new int[]{12,-5});
stringrules[19] = @"functions -> CAADR expr ";
    rules[19]=new Rule(-11, new int[]{13,-5});
stringrules[20] = @"functions -> CAAR expr ";
    rules[20]=new Rule(-11, new int[]{11,-5});
stringrules[21] = @"functions -> CADAR expr ";
    rules[21]=new Rule(-11, new int[]{14,-5});
stringrules[22] = @"functions -> CADDR expr ";
    rules[22]=new Rule(-11, new int[]{15,-5});
stringrules[23] = @"functions -> CADR expr ";
    rules[23]=new Rule(-11, new int[]{16,-5});
stringrules[24] = @"functions -> CAR expr ";
    rules[24]=new Rule(-11, new int[]{17,-5});
stringrules[25] = @"functions -> CDAAR expr ";
    rules[25]=new Rule(-11, new int[]{18,-5});
stringrules[26] = @"functions -> CDAR expr ";
    rules[26]=new Rule(-11, new int[]{19,-5});
stringrules[27] = @"functions -> CDDAR expr ";
    rules[27]=new Rule(-11, new int[]{20,-5});
stringrules[28] = @"functions -> CDDDR expr ";
    rules[28]=new Rule(-11, new int[]{21,-5});
stringrules[29] = @"functions -> CDDR expr ";
    rules[29]=new Rule(-11, new int[]{22,-5});
stringrules[30] = @"functions -> CDR expr ";
    rules[30]=new Rule(-11, new int[]{23,-5});
stringrules[31] = @"functions -> CONS expr expr ";
    rules[31]=new Rule(-11, new int[]{24,-5,-5});
stringrules[32] = @"functions -> COPYLIST expr ";
    rules[32]=new Rule(-11, new int[]{25,-5});
stringrules[33] = @"functions -> DIV exprlist ";
    rules[33]=new Rule(-11, new int[]{26,-2});
stringrules[34] = @"functions -> ENV ";
    rules[34]=new Rule(-11, new int[]{27});
stringrules[35] = @"functions -> EQ exprlist ";
    rules[35]=new Rule(-11, new int[]{28,-2});
stringrules[36] = @"functions -> EQL exprlist ";
    rules[36]=new Rule(-11, new int[]{29,-2});
stringrules[37] = @"functions -> EVAL expr ";
    rules[37]=new Rule(-11, new int[]{30,-5});
stringrules[38] = @"functions -> EVALSTRING expr ";
    rules[38]=new Rule(-11, new int[]{31,-5});
stringrules[39] = @"functions -> EXITFN expropt ";
    rules[39]=new Rule(-11, new int[]{35,-14});
stringrules[40] = @"functions -> FIRST expr ";
    rules[40]=new Rule(-11, new int[]{36,-5});
stringrules[41] = @"functions -> GT expr expr exprlist ";
    rules[41]=new Rule(-11, new int[]{37,-5,-5,-2});
stringrules[42] = @"functions -> GTE expr expr exprlist ";
    rules[42]=new Rule(-11, new int[]{38,-5,-5,-2});
stringrules[43] = @"functions -> LTE expr expr exprlist ";
    rules[43]=new Rule(-11, new int[]{40,-5,-5,-2});
stringrules[44] = @"functions -> LT expr expr exprlist ";
    rules[44]=new Rule(-11, new int[]{39,-5,-5,-2});
stringrules[45] = @"functions -> INSPECT expr ";
    rules[45]=new Rule(-11, new int[]{41,-5});
stringrules[46] = @"functions -> IS IDENTIFIER expr ";
    rules[46]=new Rule(-11, new int[]{42,92,-5});
stringrules[47] = @"functions -> LENGTH expr ";
    rules[47]=new Rule(-11, new int[]{43,-5});
stringrules[48] = @"functions -> LIST exprlist ";
    rules[48]=new Rule(-11, new int[]{44,-2});
stringrules[49] = @"functions -> LOAD STRING ";
    rules[49]=new Rule(-11, new int[]{45,94});
stringrules[50] = @"functions -> LOGAND exprlist ";
    rules[50]=new Rule(-11, new int[]{46,-2});
stringrules[51] = @"functions -> LOGOR exprlist ";
    rules[51]=new Rule(-11, new int[]{47,-2});
stringrules[52] = @"functions -> LOGXOR exprlist ";
    rules[52]=new Rule(-11, new int[]{48,-2});
stringrules[53] = @"functions -> MACROEXPAND expr exprlist ";
    rules[53]=new Rule(-11, new int[]{49,-5,-2});
stringrules[54] = @"functions -> MAP expr expr ";
    rules[54]=new Rule(-11, new int[]{50,-5,-5});
stringrules[55] = @"functions -> MEMBER expr expr ";
    rules[55]=new Rule(-11, new int[]{51,-5,-5});
stringrules[56] = @"functions -> MUL exprlist ";
    rules[56]=new Rule(-11, new int[]{52,-2});
stringrules[57] = @"functions -> NCONC exprlist ";
    rules[57]=new Rule(-11, new int[]{53,-2});
stringrules[58] = @"functions -> NEW IDENTIFIER exprlist ";
    rules[58]=new Rule(-11, new int[]{54,92,-2});
stringrules[59] = @"functions -> NOT expr ";
    rules[59]=new Rule(-11, new int[]{55,-5});
stringrules[60] = @"functions -> NEQ exprlist ";
    rules[60]=new Rule(-11, new int[]{56,-2});
stringrules[61] = @"functions -> NTH INTEGER expr ";
    rules[61]=new Rule(-11, new int[]{57,95,-5});
stringrules[62] = @"functions -> PR exprlist ";
    rules[62]=new Rule(-11, new int[]{58,-2});
stringrules[63] = @"functions -> PRL exprlist ";
    rules[63]=new Rule(-11, new int[]{59,-2});
stringrules[64] = @"functions -> READ expr expropt ";
    rules[64]=new Rule(-11, new int[]{60,-5,-14});
stringrules[65] = @"functions -> READSTRING expr ";
    rules[65]=new Rule(-11, new int[]{61,-5});
stringrules[66] = @"functions -> REFERENCE stringlist ";
    rules[66]=new Rule(-11, new int[]{62,-15});
stringrules[67] = @"functions -> REVERSE expr ";
    rules[67]=new Rule(-11, new int[]{63,-5});
stringrules[68] = @"functions -> REST expr ";
    rules[68]=new Rule(-11, new int[]{64,-5});
stringrules[69] = @"functions -> SUB exprlist ";
    rules[69]=new Rule(-11, new int[]{65,-2});
stringrules[70] = @"functions -> THROW expr ";
    rules[70]=new Rule(-11, new int[]{66,-5});
stringrules[71] = @"functions -> TYPEOF IDENTIFIER ";
    rules[71]=new Rule(-11, new int[]{67,92});
stringrules[72] = @"functions -> USING stringlist ";
    rules[72]=new Rule(-11, new int[]{68,-15});
stringrules[73] = @"stringlist -> ";
    rules[73]=new Rule(-15, new int[]{});
stringrules[74] = @"stringlist -> stringlist STRING ";
    rules[74]=new Rule(-15, new int[]{-15,94});
stringrules[75] = @"specialform -> AND exprlist ";
    rules[75]=new Rule(-9, new int[]{69,-2});
stringrules[76] = @"specialform -> CALL IDENTIFIER expr exprlist ";
    rules[76]=new Rule(-9, new int[]{71,92,-5,-2});
stringrules[77] = @"specialform -> COND condexprlist expropt ";
    rules[77]=new Rule(-9, new int[]{72,-16,-14});
stringrules[78] = @"specialform -> DEC expr ";
    rules[78]=new Rule(-9, new int[]{73,-5});
stringrules[79] = @"specialform -> DO exprlist ";
    rules[79]=new Rule(-9, new int[]{74,-2});
stringrules[80] = @"specialform -> EACH IDENTIFIER expr exprlist ";
    rules[80]=new Rule(-9, new int[]{75,92,-5,-2});
stringrules[81] = @"specialform -> FN args exprlist ";
    rules[81]=new Rule(-9, new int[]{76,-13,-2});
stringrules[82] = @"specialform -> FOR expr expr expr exprlist ";
    rules[82]=new Rule(-9, new int[]{77,-5,-5,-5,-2});
stringrules[83] = @"specialform -> IF expr expr expropt ";
    rules[83]=new Rule(-9, new int[]{78,-5,-5,-14});
stringrules[84] = @"specialform -> INC expr ";
    rules[84]=new Rule(-9, new int[]{79,-5});
stringrules[85] = @"specialform -> LET IDENTIFIER expr exprlist ";
    rules[85]=new Rule(-9, new int[]{80,92,-5,-2});
stringrules[86] = @"specialform -> MACRO args exprlist ";
    rules[86]=new Rule(-9, new int[]{81,-13,-2});
stringrules[87] = @"specialform -> OR exprlist ";
    rules[87]=new Rule(-9, new int[]{82,-2});
stringrules[88] = @"specialform -> SETF setvaluexpr ";
    rules[88]=new Rule(-9, new int[]{84,-17});
stringrules[89] = @"specialform -> THE IDENTIFIER expr ";
    rules[89]=new Rule(-9, new int[]{85,92,-5});
stringrules[90] = @"specialform -> TO IDENTIFIER expr exprlist ";
    rules[90]=new Rule(-9, new int[]{86,92,-5,-2});
stringrules[91] = @"specialform -> TRACE IDENTIFIER exprlist ";
    rules[91]=new Rule(-9, new int[]{87,92,-2});
stringrules[92] = @"specialform -> TRY expr expr expropt ";
    rules[92]=new Rule(-9, new int[]{88,-5,-5,-14});
stringrules[93] = @"specialform -> WHEN expr exprlist ";
    rules[93]=new Rule(-9, new int[]{89,-5,-2});
stringrules[94] = @"specialform -> WHILE expr exprlist ";
    rules[94]=new Rule(-9, new int[]{90,-5,-2});
stringrules[95] = @"specialform -> WITH setvaluexpr expr ";
    rules[95]=new Rule(-9, new int[]{91,-17,-5});
stringrules[96] = @"setvaluexpr -> ";
    rules[96]=new Rule(-17, new int[]{});
stringrules[97] = @"setvaluexpr -> setvaluexpr IDENTIFIER expr ";
    rules[97]=new Rule(-17, new int[]{-17,92,-5});
stringrules[98] = @"setvaluexpr -> setvaluexpr UNQUOTE expr expr ";
    rules[98]=new Rule(-17, new int[]{-17,33,-5,-5});
stringrules[99] = @"args -> LBRACE arglist argtail RBRACE ";
    rules[99]=new Rule(-13, new int[]{3,-18,-19,4});
stringrules[100] = @"argtail -> ";
    rules[100]=new Rule(-19, new int[]{});
stringrules[101] = @"argtail -> ARGREST IDENTIFIER ";
    rules[101]=new Rule(-19, new int[]{34,92});
stringrules[102] = @"arglist -> ";
    rules[102]=new Rule(-18, new int[]{});
stringrules[103] = @"arglist -> arglist IDENTIFIER ";
    rules[103]=new Rule(-18, new int[]{-18,92});
stringrules[104] = @"condexprlist -> ";
    rules[104]=new Rule(-16, new int[]{});
stringrules[105] = @"condexprlist -> condexprlist expr expr ";
    rules[105]=new Rule(-16, new int[]{-16,-5,-5});
stringrules[106] = @"exprlist -> ";
    rules[106]=new Rule(-2, new int[]{});
stringrules[107] = @"exprlist -> exprlist expr ";
    rules[107]=new Rule(-2, new int[]{-2,-5});
stringrules[108] = @"expropt -> ";
    rules[108]=new Rule(-14, new int[]{});
stringrules[109] = @"expropt -> expr ";
    rules[109]=new Rule(-14, new int[]{-5});
stringrules[110] = @"specexpr -> QUOTE expr ";
    rules[110]=new Rule(-12, new int[]{83,-5});
stringrules[111] = @"specexpr -> BACKQUOTE expr ";
    rules[111]=new Rule(-12, new int[]{70,-5});
stringrules[112] = @"specexpr -> SPLICE expr ";
    rules[112]=new Rule(-12, new int[]{32,-5});
stringrules[113] = @"specexpr -> UNQUOTE expr ";
    rules[113]=new Rule(-12, new int[]{33,-5});
stringrules[114] = @"expr -> listcontent ";
    rules[114]=new Rule(-5, new int[]{-4});
stringrules[115] = @"expr -> list ";
    rules[115]=new Rule(-5, new int[]{-3});
stringrules[116] = @"expr -> specexpr ";
    rules[116]=new Rule(-5, new int[]{-12});
stringrules[117] = @"expr -> error ";
    rules[117]=new Rule(-5, new int[]{1});
stringrules[118] = @"listcontent -> IDENTIFIER ";
    rules[118]=new Rule(-4, new int[]{92});
stringrules[119] = @"listcontent -> literal ";
    rules[119]=new Rule(-4, new int[]{-6});
stringrules[120] = @"literal -> STRING ";
    rules[120]=new Rule(-6, new int[]{94});
stringrules[121] = @"literal -> INTEGER ";
    rules[121]=new Rule(-6, new int[]{95});
stringrules[122] = @"literal -> LITERAL ";
    rules[122]=new Rule(-6, new int[]{93});

    nonTerminals = new string[] {"", "lists", "exprlist", "list", "listcontent", 
      "expr", "literal", "file", "$accept", "specialform", "macros", "functions", 
      "specexpr", "args", "expropt", "stringlist", "condexprlist", "setvaluexpr", 
      "arglist", "argtail", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // file -> lists 
#line 134 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ CodeModel.Add( new File(CurrentFilename, value_stack.array[value_stack.top-1].list)); }
#line hidden
        break;
      case 3: // lists -> 
#line 138 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = new CodeElementList(); }
#line hidden
        break;
      case 4: // lists -> lists expr 
#line 139 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = value_stack.array[value_stack.top-2].list; yyval.list.Add(value_stack.array[value_stack.top-1].elem); }
#line hidden
        break;
      case 5: // list -> LBRACE specialform RBRACE 
#line 143 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 6: // list -> LBRACE macros RBRACE 
#line 144 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 7: // list -> LBRACE functions RBRACE 
#line 145 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-3].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 8: // list -> LBRACE IDENTIFIER exprlist RBRACE 
#line 146 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); OverrideToken(@value_stack.array[value_stack.top-3].Location, IsType(value_stack.array[value_stack.top-3].text) ? TokenClass.Type : TokenClass.Identifier); }
#line hidden
        break;
      case 9: // list -> LBRACE literal exprlist RBRACE 
#line 147 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 10: // list -> LBRACE list exprlist RBRACE 
#line 148 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 11: // list -> LBRACE specexpr exprlist RBRACE 
#line 149 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 12: // macros -> DEFUN IDENTIFIER args exprlist 
#line 153 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Type); }
#line hidden
        break;
      case 13: // macros -> DEFMACRO IDENTIFIER args exprlist 
#line 154 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ OverrideToken(@value_stack.array[value_stack.top-3].Location, TokenClass.Type); }
#line hidden
        break;
      case 73: // stringlist -> 
#line 220 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 74: // stringlist -> stringlist STRING 
#line 221 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 96: // setvaluexpr -> 
#line 251 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 97: // setvaluexpr -> setvaluexpr IDENTIFIER expr 
#line 252 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 98: // setvaluexpr -> setvaluexpr UNQUOTE expr expr 
#line 253 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 99: // args -> LBRACE arglist argtail RBRACE 
#line 257 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ MakePair(@value_stack.array[value_stack.top-4].Location,@value_stack.array[value_stack.top-1].Location); }
#line hidden
        break;
      case 101: // argtail -> ARGREST IDENTIFIER 
#line 262 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 102: // arglist -> 
#line 266 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 103: // arglist -> arglist IDENTIFIER 
#line 267 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 104: // condexprlist -> 
#line 271 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 105: // condexprlist -> condexprlist expr expr 
#line 272 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 106: // exprlist -> 
#line 276 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list = new CodeElementList(); }
#line hidden
        break;
      case 107: // exprlist -> exprlist expr 
#line 277 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.list= value_stack.array[value_stack.top-2].list; yyval.list.Add(value_stack.array[value_stack.top-1].elem);}
#line hidden
        break;
      case 108: // expropt -> 
#line 281 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 109: // expropt -> expr 
#line 282 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 110: // specexpr -> QUOTE expr 
#line 286 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 111: // specexpr -> BACKQUOTE expr 
#line 287 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 112: // specexpr -> SPLICE expr 
#line 288 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 113: // specexpr -> UNQUOTE expr 
#line 289 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 114: // expr -> listcontent 
#line 293 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 115: // expr -> list 
#line 294 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 116: // expr -> specexpr 
#line 295 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 117: // expr -> error 
#line 296 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 118: // listcontent -> IDENTIFIER 
#line 300 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Identifier(value_stack.array[value_stack.top-1].text); }
#line hidden
        break;
      case 119: // listcontent -> literal 
#line 301 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{;}
#line hidden
        break;
      case 120: // literal -> STRING 
#line 305 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
      case 121: // literal -> INTEGER 
#line 306 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
      case 122: // literal -> LITERAL 
#line 307 "D:\dev\XACC\xacc\Languages\LSharp.y"
			{ yyval.elem = new Literal(value_stack.array[value_stack.top-1].text);}
#line hidden
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 313 "D:\dev\XACC\xacc\Languages\LSharp.y"


void CreateFunctions(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Function f = new Function(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

void CreateForms(ICodeNamespace env, params string[] names)
{
  foreach (string name in names)
  {
    Keyword f = new Keyword(name.Trim());
    f.Name = name.Trim();
    env.Add(f);
  }
}

readonly static string[] functions  = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.Function));
readonly static string[] forms      = LSharp.TopLoop.Environment.GetSymbols(typeof(LSharp.SpecialForm));

protected override void LoadDefaultReferences(Project proj, string filename)
{
  //make dummy autocomplete info
  CodeModule lsharp = new CodeModule("LSharp");
  ICodeNamespace env = new CodeNamespace("");

  CreateFunctions(env, functions);
  
  Function f = new Function("|");
  f.Name = "|";
  env.Add(f);
  
  CreateForms(env, forms);
  
  lsharp.Add(env);
  
  proj.AddReferencesAndGenerateTree(lsharp);
  proj.LoadAssemblies("mscorlib.dll");
}

protected override bool UseProjectTreeForAutoComplete
{
  get {return false; }
}

protected internal override string[] CommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i];
    }
    else
    {
      newlines[i] = ";" + lines[i];
    }
  }
  return newlines;
}

protected internal override string[] UnCommentLines(string[] lines)
{
  string[] newlines = new string[lines.Length];
  for (int i = 0; i < lines.Length; i++)
  {
    if (lines[i].StartsWith(";"))
    {
      newlines[i] = lines[i].Substring(1);
    }
    else
    {
      newlines[i] = lines[i];
    }
  }
  return newlines;
}












    
#line default
}
}
